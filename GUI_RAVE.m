function varargout = GUI_RAVE(varargin)
%% edited to allow handles.nChannels = 3 with new channel called ACC
% note calibration of accelerometer is not adjusted for gain
% ACUZ method currently not working
% NB. Will not load stereo files. Needs 3 channels

% saved SoundFiles and .wavs are not correct
% - do not use until this is sorted

% GUI_f_R_tuning_21march MATLAB code for GUI_f_R_tuning_21march.fig
%      GUI_f_R_tuning_21march, by itself, creates a new GUI_f_R_tuning_21march or raises the existing
%      singleton*.
%
%      H = GUI_RAVE returns the handle to a new GUI_RAVE or the handle to
%      the existing singleton*.
%
%      GUI_RAVE('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in GUI_RAVE.M with the given input arguments.
%
%      GUI_RAVE('Property','Value',...) creates a new GUI_RAVE or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before GUI_RAVE_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to GUI_RAVE_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help GUI_RAVE

% Last Modified by GUIDE v2.5 30-Mar-2019 07:46:14

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @GUI_RAVE_OpeningFcn, ...
    'gui_OutputFcn',  @GUI_RAVE_OutputFcn, ...
    'gui_LayoutFcn',  [] , ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


%_________________________________________________________________________
%_________________________________________________________________________
%_____________________________PARAMETERS_________________________________
%_________________________________________________________________________
%_________________________________________________________________________




% --- Executes just before GUI_RAVE is made visible.
function GUI_RAVE_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to GUI_RAVE (see VARARGIN)
% figure


global hjSlider indRecord SavedCurvesNumber ColorNumber SavedplotRawDataNumber ...
    SavedplotFilteredDataNumber SavedCurves Colors Is_SavedCurve_Checked freqNoteAnalyse...
    hSpectre PushedZoomSpectre PanGraph StopRecordPushed IsAcquiring h KeyBoardFreq

IsAcquiring =0;
StopRecordPushed =0;
PushedZoomSpectre =0;
% hSpectre = zoom(handles.Spectre);
% set(hSpectre,'ActionPostCallback',{@ZoomCallbackSpectre, handles})
handles.Is_SavedCurve_Checked = zeros(1, 20);
Is_SavedCurve_Checked = zeros(1, 20);
indRecord =0;
SavedCurvesNumber = 0;
ColorNumber = 0;
SavedplotRawDataNumber =0;
SavedplotFilteredDataNumber = 0;
SavedCurves = struct;
SavedCurves.plotRawData={};
SavedCurves.plotFilteredData={};
% SavedCurves
% Colors = {[1 0 0], [255 128 0]/255 , [1 1 0], [128 255 0]/255,[0 153 0]/255,...
%     [0 1 1], [0 128 255]/255, [127 0 255] /255, [1 0 1], [255 0 127]/255, ...
%     [255 204 229]/255, [204 255 229]/255,[204 229 255]/255, [224 224 224]/255,...
%     [128 128 128]/255, [64 64 64]/255, [102 0 102]/255,...
%     [0 102 102]/255, [153 76 0]/255, [102 0 0]/255};
Colors ={[204 0 0]/255, [102 204 0]/255, [0 204 204]/255, [0 0 204]/255, [204 0 204]/255,...
    [0 102 204]/255, [204 102 0]/255, [96 96 96]/255, [102 0 204]/255, [204 204 0]/255};

set(handles.PannelPlayAndSave, 'Visible', 'off');
set(handles.txt_Speed, 'Units', 'pixels');
set(handles.SpeedNfft, 'Units', 'pixels');
positionSpeed = get(handles.txt_Speed, 'Position');
positionSpeed(1) = positionSpeed(1)+40;
positionSpeed(3) = positionSpeed(3)+45;
set(handles.SpeedNfft, 'Position', positionSpeed)
cla(handles.Audio)
cla(handles.Spectre)
cla(handles.Calibration)
cla(handles.Phase)
cla(handles.EGG)
handles.Audio;

linkaxes([handles.Spectre, handles.Phase, handles.AxesAnalyse, handles.AxesClefs],'x')
linkaxes([handles.Calibration,handles.InputCalibration],'x')


YLabelSpectrum = ylabel(handles.AxesYLabelSpectrum,'Magnitude Spectrum');
set(YLabelSpectrum, 'Units', 'Normalized', 'Position', [1,0.5, 0]);
set(YLabelSpectrum, 'FontWeight', 'bold', 'color', '[0 0 0]');
grid(handles.AxesYLabelSpectrum, 'off')
axis(handles.AxesYLabelSpectrum, 'on')
YLabelPhase = ylabel(handles.AxesYLabelPhase,'Phase Spectrum');
set(YLabelPhase, 'Units', 'Normalized', 'Position', [1,0.5, 0]);
set(YLabelPhase, 'FontWeight', 'bold', 'color', '[0 0 0]');
grid(handles.AxesYLabelPhase, 'off')
axis(handles.AxesYLabelPhase, 'on')
YLabelAudio = ylabel(handles.AxesYLabelAudio,'Audio [Pa]');
set(YLabelAudio, 'Units', 'Normalized', 'Position', [1,0.5, 0]);
set(YLabelAudio, 'FontWeight', 'bold', 'color', '[0 0 0]');
grid(handles.AxesYLabelAudio, 'off')
axis(handles.AxesYLabelAudio, 'on')
YLabelEGG = ylabel(handles.AxesYLabelEGG,'EGG [V]');
set(YLabelEGG, 'Units', 'Normalized', 'Position', [1,0.5, 0]);
set(YLabelEGG, 'FontWeight', 'bold', 'color', '[0 0 0]');
grid(handles.AxesYLabelEGG, 'off')
axis(handles.AxesYLabelEGG, 'on')
xlabel(handles.Spectre,'')
xlabel(handles.Phase,'')

axes(handles.Calibration)
plot(handles.Calibration, [0 3000], [0 0], 'w');
hold(handles.Calibration, 'off');
xlabel(handles.Calibration, 'frequency [Hz]');
ylabel(handles.Calibration,'[dB]', 'Units', 'Normalized', 'Position', [-0.11,0.5, 0])

axes(handles.InputCalibration)
plot(handles.InputCalibration, [0 3000], [0 0], 'w');
hold(handles.InputCalibration, 'off');
ylabel(handles.InputCalibration,'[dB]','Units', 'Normalized', 'Position', [-0.11,0.5, 0])
set(handles.InputCalibration,'XTickLabel', '');

h = zoom();
setAxesZoomMotion(h,handles.Audio,'horizontal');
set(h,'ActionPostCallback',{@ZoomCallbackRealTimeNEW, handles});
guidata(hObject,handles);

% PanGraph = pan;
% set(PanGraph,'ActionPostCallback',{@PanGraphCallback, handles})

handles.ExistRecord =0;
handles.StartNewCalib =0;
handles.LoadFile = 0;
handles.DataAquired= 0;
handles.CalibSaved = 0;
handles.LoadCalib =0;
handles.StopRecordPushed = 0;
KeyBoardFreq = zeros(1,61);
handles.KeyBoardFreq = zeros(1,61);
set(handles.PannelChooseDisplay, 'UserData',zeros(1,61));

% handles.nChannels = 3; % edit by NH
handles.nChannels = 2; % edit by NH

figure = handles.figure1;
% % %get deviceusb
% % devinfo = audiodevinfo;
% % % input
% % input = devinfo.input; LInput = max(size(input));
% % InputName ={input(linspace(1,LInput,LInput)).Name};
% % [~, DevIndexMOTU] = max(strcmp(InputName, 'MOTU 828 (Core Audio)'));
% % % [~, DevIndexiMicUSB] = max(strcmp(Name, 'iMic USB audio system (Core Audio)'));
% % [~, DevIndexiMicUSB] = max(strcmp(InputName, 'Built-in Microph (Core Audio)')); % edit by NH
% % DevID_MOTU=cell2mat({input(DevIndexMOTU).ID});
% % DevID_iMicUSB=cell2mat({input(DevIndexiMicUSB).ID});
% %
% % % output
% % output = devinfo.output; LInput = max(size(output));
% % OutputName ={input(linspace(1,LInput,LInput)).Name};
% % [~, DevIndexMOTUout] = max(strcmp(OutputName, 'MOTU 828 (Core Audio)'));
% % % [~, DevIndexiMicUSBout] = max(strcmp(Name, 'iMic USB audio system (Core Audio)'));
% % [~, DevIndexiMicUSBout] = max(strcmp(OutputName, 'Built-in Output (Core Audio)')); % edit by NH
% % DevID_MOTUout=cell2mat({output(DevIndexMOTUout).ID});
% % DevID_iMicUSBout=cell2mat({output(DevIndexiMicUSBout).ID});
% %
% % handles.DevIDmic = DevID_iMicUSB; % TEMP change NH % should be = 0
% % % handles.DevIDmic = 0; % TEMP change NH
% % handles.DevIDoutputMOTU = DevID_MOTUout;
% % handles.DevIDoutputiMicUSB = DevID_iMicUSBout;
% % % handles.DevIDoutputiMicUSB = 1; % TEMP change NH

% set default audio input and output
devinfo = audiodevinfo;
input = devinfo.input;
DevID_Mic=cell2mat({input(1).ID});
handles.DevIDmic = DevID_Mic;
output = devinfo.output;
DevID_Out=cell2mat({output(1).ID});
% handles.DevIDoutputiMicUSB = DevID_Out;
% handles.DevIDoutputMOTU = DevID_Out;




%axes
set(handles.Spectre, 'XLim', [0 3000]);
set(handles.Phase, 'XLim', [0 3000]);
set(handles.Spectre, 'YLim', [-20 20]);
set(handles.Phase, 'YLim', [-120 120]);

graph3 = handles.Analyse;
axes(graph3);
plot([0 10], [0 0], 'k'); hold on;
plot([0 10], [2 2], 'k');
plot([0 10], [4 4], 'k');
plot([0 10], [6 6], '-k');
plot([0 10], [8 8], '-k');
plot([0 10], [14 14], 'k');
plot([0 10], [16 16], 'k');
plot([0 10], [18 18], 'k');
plot([0 10], [20 20], 'k');
plot([0 10], [22 22], 'k');
axis([ 0 10 -3 25])
grid off
axis off
hold off

graph4 = handles.axes_cle_sol;
axes(graph4);
bw = imread('TrebleClefAndOctave.png');
% bw2 = imcomplement(bw);
% imwrite(bw2, 'cle-de-sol.tif');
h = imshow(bw);
grid off
hold off


FreqNoteA = [261.6 277.18 293.67 311.13 329.63 349.23 369.99 392.00 415.30 440.0 ...
    466.16 493.88];
FreqNoteA01 = FreqNoteA/2;
FreqNoteA00 = FreqNoteA01/2;
FreqNoteB = 2*FreqNoteA;
FreqNoteC = 2*FreqNoteB;
FreqNoteD = 2*FreqNoteC;
freqNoteAnalyse = cat(2,FreqNoteA00,FreqNoteA01,FreqNoteA, FreqNoteB,FreqNoteC,FreqNoteD);
axes(handles.AxesAnalyse);
plot(handles.AxesAnalyse,[freqNoteAnalyse(1) freqNoteAnalyse(1)],[0 10], 'color', [0.8 0.8 0.8]); hold(handles.AxesAnalyse, 'all');
plot(handles.AxesAnalyse,[freqNoteAnalyse(5) freqNoteAnalyse(5)], [0 10],'color', [0.8 0.8 0.8]);
plot(handles.AxesAnalyse,[freqNoteAnalyse(8) freqNoteAnalyse(8)],[0 10],'color', 'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(12) freqNoteAnalyse(12)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(15) freqNoteAnalyse(15)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(18) freqNoteAnalyse(18)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(22) freqNoteAnalyse(22)],[0 10],   'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(25) freqNoteAnalyse(25)],[0 10],  'color', [0.8 0.8 0.8]);
plot(handles.AxesAnalyse,[freqNoteAnalyse(29) freqNoteAnalyse(29)],[0 10], 'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(32) freqNoteAnalyse(32)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(36) freqNoteAnalyse(36)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(39) freqNoteAnalyse(39)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(42) freqNoteAnalyse(42)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(46) freqNoteAnalyse(46)],[0 10],  'color', [0.8 0.8 0.8]);
plot(handles.AxesAnalyse,[freqNoteAnalyse(49) freqNoteAnalyse(49)],[0 10],  'color', [0.8 0.8 0.8]);
plot(handles.AxesAnalyse,[freqNoteAnalyse(53) freqNoteAnalyse(53)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(56) freqNoteAnalyse(56)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(60) freqNoteAnalyse(60)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(63) freqNoteAnalyse(63)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(66) freqNoteAnalyse(66)],[0 10],  'k');
plot(handles.AxesAnalyse,[freqNoteAnalyse(70) freqNoteAnalyse(70)],[0 10],  'color', [0.8 0.8 0.8]);
axis(handles.AxesAnalyse,[ 0 freqNoteAnalyse(end) 0 10])
grid(handles.AxesAnalyse,'off')
axis(handles.AxesAnalyse,'off')
hold(handles.AxesAnalyse,'off')


plot(handles.AxesClefs, [98 98],[0 1], 'k', 'linewidth', 1); hold(handles.AxesClefs, 'all');
plot(handles.AxesClefs, [98 220],[1 1], 'k','linewidth', 1);
plot(handles.AxesClefs, [220 220],[1 0], 'k','linewidth', 1);
plot(handles.AxesClefs, [330 330],[0 1], 'k','linewidth', 1);
plot(handles.AxesClefs, [330 698.5],[1 1], 'k','linewidth', 1);
plot(handles.AxesClefs, [698.5 698.5],[1 0], 'k','linewidth', 1);
plot(handles.AxesClefs, [1318.5 1318.5],[0 1], 'k','linewidth', 1);
plot(handles.AxesClefs, [1318.5 2794],[1 1], 'k','linewidth', 1);
plot(handles.AxesClefs, [2794 2794],[1 0], 'k','linewidth', 1);
grid(handles.AxesClefs,'off')
colorAxesClefs = [238 238 238]/255;
set(handles.AxesClefs, 'Units', 'Pixels');
posFreq = get(handles.AxesClefs, 'Position');
axes(handles.AxesBassClef)
set(handles.AxesBassClef, 'Units', 'Pixels');
pos = get(handles.AxesBassClef, 'Position');
pos(3) = 25;
pos(4) = 27;
pos(1) =posFreq(1) + posFreq(3)/3000*((98+220)/2)-pos(3)/2;
set(handles.AxesBassClef, 'Position', pos)
imshow(get(handles.pictureBassClef, 'CData'));

%%%%%%%%%%%%%%%%%%%%%
% CleSolDeformee = [];
%
% axes(handles.AxesTrebbleClef_1)
% set(handles.AxesTrebbleClef_1, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_1, 'Position')
% Data = get(handles.TrebbleClefPictureHOR_1, 'CData');
% pos(3) = posFreq(3)*(262-247)/(3000);
% % pos(3) = size(Data,2);
% [sx,sy,sz] = size(Data)
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% NewData
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% pos(1) = posFreq(1) + posFreq(3)/(3000)*(247);
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_1, 'Position', pos)
% % imshow(Data)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
% CleSolDeformee = cat(2,CleSolDeformee,NewData);
%
% axes(handles.AxesTrebbleClef_2)
% set(handles.AxesTrebbleClef_2, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_2, 'Position')
% Data = get(handles.TrebbleClefPictureHOR_2, 'CData');
% pos(3) = posFreq(3)*(330-262)/(3000);
% [sx,sy,sz] = size(Data)
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% NewData
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(262);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_2, 'Position', pos)
% % imshow(Data)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
% CleSolDeformee = cat(2,CleSolDeformee,NewData);
%
% axes(handles.AxesTrebbleClef_3)
% set(handles.AxesTrebbleClef_3, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_3, 'Position')
% Data = get(handles.TrebbleClefPictureHOR_3, 'CData');
% pos(3) = posFreq(3)*(330-262)/(3000)
% [sx,sy,sz] = size(Data)
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% NewData
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(330);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_3, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
% CleSolDeformee = cat(2,CleSolDeformee,NewData);
%
% axes(handles.AxesTrebbleClef_4)
% set(handles.AxesTrebbleClef_4, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_4, 'Position');
% Data = get(handles.TrebbleClefPictureHOR_4, 'CData')
% pos(3) = posFreq(3)*(494-392)/(3000)
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(392);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_4, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
% CleSolDeformee = cat(2,CleSolDeformee,NewData);
%
% axes(handles.AxesTrebbleClef_5)
% set(handles.AxesTrebbleClef_5, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_5, 'Position')
% Data = get(handles.TrebbleClefPictureHOR_5, 'CData');
% pos(3) = posFreq(3)*(587-494)/(3000)
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(494);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_5, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
% CleSolDeformee = cat(2,CleSolDeformee,NewData);
%
%
% axes(handles.AxesTrebbleClef_6)
% set(handles.AxesTrebbleClef_6, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_6, 'Position')
% Data = get(handles.TrebbleClefPictureHOR_6, 'CData');
% pos(3) = posFreq(3)*(698.5-587)/(3000)
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(587);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_6, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
% CleSolDeformee = cat(2,CleSolDeformee,NewData);
%
%
% axes(handles.AxesTrebbleClef_7)
% set(handles.AxesTrebbleClef_7, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_7, 'Position')
% Data = get(handles.TrebbleClefPictureHOR_7, 'CData');
% pos(3) = posFreq(3)*(880-698.5)/(3000)
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(698.5);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_7, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
% CleSolDeformee = cat(2,CleSolDeformee,NewData);
%
%
% axes(handles.AxesTrebbleClef_8)
% set(handles.AxesTrebbleClef_8, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_8, 'Position')
% Data = get(handles.TrebbleClefPictureHOR_8, 'CData');
% pos(3) = posFreq(3)*(988-880)/(3000)
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(880);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_8, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
% CleSolDeformee = cat(2,CleSolDeformee,NewData);
% imwrite(CleSolDeformee, 'CleSolDeformee.png');
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %2 trebble clefs
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% axes(handles.AxesTwoTrebbleClef_1)
% set(handles.AxesTwoTrebbleClef_1, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_1, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_1, 'CData');
% pos(3) = posFreq(3)*(1046.5-988)/(3000);
% % pos(3) = size(Data,2);
% [sx,sy,sz] = size(Data)
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% NewData
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% pos(1) = posFreq(1) + posFreq(3)/(3000)*(988);
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_1, 'Position', pos)
% % imshow(Data)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_2)
% set(handles.AxesTwoTrebbleClef_2, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_2, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_2, 'CData');
% pos(3) = posFreq(3)*(1318.5-1046.5)/(3000);
% [sx,sy,sz] = size(Data)
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% NewData
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(262);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_2, 'Position', pos)
% % imshow(Data)
% imagesc(NewData, [0 255]);
% colormap gray
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_3)
% set(handles.AxesTwoTrebbleClef_3, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_3, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_3, 'CData');
% pos(3) = posFreq(3)*(1568-1318.5)/(3000)
% [sx,sy,sz] = size(Data)
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% NewData
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(330);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_3, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
%
% axes(handles.AxesTwoTrebbleClef_4)
% set(handles.AxesTwoTrebbleClef_4, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_4, 'Position');
% Data = get(handles.TwoTrebbleClefPictureHOR_4, 'CData')
% pos(3) = posFreq(3)*(1975-1568)/(3000)
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(392);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_4, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_5)
% set(handles.AxesTwoTrebbleClef_5, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_5, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_5, 'CData');
% pos(3) = posFreq(3)*(2349-1975)/(3000)
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(494);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_5, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_6)
% set(handles.AxesTwoTrebbleClef_6, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_6, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_6, 'CData');
% pos(3) = posFreq(3)*(2794-2349)/(3000)
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(587);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_6, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_7)
% set(handles.AxesTwoTrebbleClef_7, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_7, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_7, 'CData');
% pos(3) = posFreq(3)*(3520-2794)/(3000)
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(698.5);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_7, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_8)
% set(handles.AxesTwoTrebbleClef_8, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_8, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_8, 'CData');
% pos(3) = posFreq(3)*(3951-3520)/(3000)
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(880);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% pos
% sizeNewData  = size(NewData)
% set(handles.AxesTwoTrebbleClef_8, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




axes(handles.AxesTwoTrebbleClefs)
set(handles.AxesTwoTrebbleClefs, 'Units', 'Pixels');
pos = get(handles.AxesTwoTrebbleClefs, 'Position');
pos(3) = 34;
pos(4) = 42;
pos(1) =posFreq(1) + posFreq(3)/3000*((1318.5 +2794)/2)-pos(3)/2;
set(handles.AxesTwoTrebbleClefs, 'Position', pos)
imshow(get(handles.pictureTwoTrebbleClefs, 'CData'))
% colorAxesClefs = [238 238 238]/255;
set(handles.AxesClefs, 'Color',colorAxesClefs);
set(handles.AxesClefs, 'AmbientLightColor', colorAxesClefs);
set(handles.AxesClefs, 'GridColor', colorAxesClefs);
set(handles.AxesClefs, 'MinorGridColor', colorAxesClefs);
set(handles.AxesClefs, 'XColor', colorAxesClefs);
set(handles.AxesClefs, 'YColor', colorAxesClefs);
set(handles.AxesClefs, 'ZColor', colorAxesClefs);
% axis(handles.AxesClefs,'off')
ylim(handles.AxesClefs, [0 1.5]);
xlim(handles.AxesClefs, [0 3000]);

axes(handles.AxesTrebbleClefs)
set(handles.AxesTrebbleClefs, 'Units', 'Pixels');
pos = get(handles.AxesTrebbleClefs, 'Position');
pos(3) = 16;
pos(4) = 39;
set(handles.AxesTrebbleClefs, 'Position', pos)
imshow(get(handles.pictureTrebbleClef, 'CData'))

axes(handles.AxesTrebbleClef2)
set(handles.AxesTrebbleClef2, 'Units', 'Pixels');
pos = get(handles.AxesTrebbleClef2, 'Position');
pos(3) = 16;
pos(4) = 39;
set(handles.AxesTrebbleClef2, 'Position', pos)
imshow(get(handles.pictureTrebbleClef, 'CData'))


axes(handles.AxesBassClef2)
set(handles.AxesBassClef2, 'Units', 'Pixels');
pos = get(handles.AxesBassClef2, 'Position');
pos(3) = 25;
pos(4) = 27;
set(handles.AxesBassClef2, 'Position', pos)
imshow(get(handles.pictureBassClef, 'CData'));


%definition du double knob slider initial
set(handles.PannelCurves, 'Units', 'pixels');
PCposition =get(handles.PannelCurves, 'Position')
handles.PCleft = PCposition(1); handles.PCbottom = PCposition(2);
set(handles.Audio, 'Units', 'pixels');
AUDIOposition =get(handles.Audio, 'Position')
handles.AUDIOleft = AUDIOposition(1); handles.AUDIObottom =AUDIOposition(2);
handles.AUDIOwidth= AUDIOposition(3); handles.AUDIOheight = AUDIOposition(4);
jRangeSlider = com.jidesoft.swing.RangeSlider(0,1,0,1);
jRangeSlider = javacomponent(jRangeSlider, [handles.AUDIOleft+handles.PCleft-13,...
    handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf)
set(jRangeSlider,'PaintTicks',false, 'PaintLabels',false) %, 'Background', java.awt.Color(handles.R_RealTime, handles.G_RealTime, handles.B_RealTime))


% Standard Java JSlider pour le nombre de periodes de Audio
jSlider = javax.swing.JSlider(0,1,0)
javacomponent(jSlider,[handles.AUDIOleft+handles.PCleft-13,...
    handles.AUDIObottom-2*handles.AUDIOheight+handles.PCbottom+21,handles.AUDIOwidth+2*13,26], gcf)
hjSlider = handle(jSlider, 'CallbackProperties');
set(hjSlider, 'StateChangedCallback', {@EggSliderCallback, handles});

% definition des parametres standards
handles.Fs = 44100;
handles.NbBits = 16;
handles.FreqLo = 300;
handles.FreqHi = 3000;
handles.transduc = 0.01;
handles.SavePath = '';
handles.SaveName = '';
handles.NbAverageBrowse = 1;
% % % % handles.NbCyclePerSecond = 8;
handles.NbAverageCalculate = 8;
handles.numPoints = 2^13;
handles.Paramchanged = 0;
handles.Namechanged = 0;
handles.ParamSaved=0;
handles.ListFileName = [cellstr('')];
handles.ListPathName = [cellstr('')];
% ecriture des parametres standards dans les objets de l interface
set(handles.edit_SamplingFrequency,'String',handles.Fs);
set(handles.edit_NumberOfBits,'String',handles.NbBits);
set(handles.edit_LowestFrequency,'String',handles.FreqLo);
set(handles.edit_HighestFrequency,'String',handles.FreqHi);
set(handles.edit_SavePath,'String',handles.SavePath);
handles.ValueSpeed = 3;
set(handles.SpeedNfft, 'Value', handles.ValueSpeed);
set(handles.df_Val, 'String', '5.38');
set(handles.dt_Val, 'String', '0.186');
set(handles.Nfft_Val, 'String', '2^13');
% set(handles.edit_ValNbAverage_Browse,'String',handles.NbAverageBrowse);
set(handles.edit_ValNbAverage_Calculate,'String',handles.NbAverageCalculate);
set(handles.edit_SavePath,'String',handles.SavePath);
set(handles.edit_SaveName,'String',handles.SaveName);
set(handles.edit_ValTransducterSetUp,'String',handles.transduc);
set(handles.text_PathCalib, 'String', '');
set(handles.text_NameCalib, 'String', '');
set(handles.ValH1, 'String' , '');
set(handles.ValH2, 'String' , '');
set(handles.ValH3, 'String' , '');
set(handles.ValH4, 'String' , '');
set(handles.ValR1, 'String' , '');
set(handles.ValR2, 'String' , '');
set(handles.ValR3, 'String' , '');
set(handles.R1tuningRate, 'String' , '%');
set(handles.R2tuningRate, 'String' , '%');
set(handles.ValHarmonicWidth, 'String' , num2str(get(handles.SliderHarmonicsWidth, 'Min')));
set(handles.ValRAmplitude, 'String' , num2str(get(handles.SliderResonanceAmplitude, 'Min')));
set(handles.pushbutton_SaveParameters,'Enable','on')
set(handles.pushbutton_StartCalibration,'Enable','on')
set(handles.pushbutton_BrowseFile,'Enable','on')
set(handles.pushbutton_BeginRecord,'Enable','off')
set(handles.pushbutton_FlattenCalibration,'Enable','off')
set(handles.pushbutton_SaveCalibration,'Enable','off')
set(handles.CalculationPlayStopBBSignal, 'Enable','off')
set(handles.CalculationStop, 'Enable','off')
% Choose default command line output for GUI_RAVE
handles.output = hObject;

obj = findobj('Style', 'pushbutton');
for i=1:length(obj)
    set(obj(i), 'Value',0);
end

set(handles.figure1,'CloseRequestFcn',{@CloseMain, handles});

guidata(hObject, handles);

function CloseMain(hObject, eventdata, handles, varargin)
% clear all; close all;
% cla;
obj = findobj('Style', 'pushbutton');
for i=1:length(obj)
    set(obj(i), 'Value',0);
end
display('exit GUI')
% status = close(handles.figure1);
delete(handles.figure1);
clear all

% function PanGraphCallback(obj,evd, handles)
% ax = gca;
%
% tagNEW = get(ax, 'Tag')
% display('PanCallback')
% if strcmp(tagNEW, 'Spectre')==1 ||strcmp(tagNEW, 'Phase')==1
%     YLim = get(handles.Spectre, 'YLim')
%     global hSpectre PushedZoomSpectre
%     PushedZoomSpectre =1;
%     [PlottedCurves]= DisplayChosenCurvesNEW(handles)
%     PushedZoomSpectre =0;
% end






function LoadStandardParamAcuz(handles)
%%
% set(handles.radiobuttonAcuz,'Value',1);
handles.Fs = 44100;
handles.NbBits = 16;
handles.FreqLo = 200;
handles.FreqHi = 4000;
handles.transduc = 0.01;
handles.SavePath = pwd;
handles.SaveName = 'StandardParametersRAVE';
handles.NbAverageBrowse = 'no';
handles.NbAverageCalculate = 'no';

set(handles.edit_SamplingFrequency,'String',handles.Fs);
set(handles.edit_NumberOfBits,'String',handles.NbBits);
set(handles.edit_LowestFrequency,'String',handles.FreqLo);
set(handles.edit_HighestFrequency,'String',handles.FreqHi);
set(handles.edit_SavePath,'String',handles.SavePath);
%         set(handles.edit_ValNbAverage_Browse,'String',handles.NbAverageBrowse);
set(handles.edit_ValNbAverage_Calculate,'String',handles.NbAverageCalculate);
set(handles.edit_SavePath,'String',handles.SavePath);
set(handles.edit_SaveName,'String',handles.SaveName);
set(handles.edit_ValTransducterSetUp,'String',handles.transduc);

% set(handles.radiobuttonAcuz, 'FontSize', 18);
% set(handles.radiobuttonAcuz, 'FontWeight', 'bold');
% set(handles.radiobuttonAcuz, 'ForegroundColor',handles.MainPannelTextColorAcuz);
%
% set(handles.radiobuttonRealTime, 'FontSize', 10);
% set(handles.radiobuttonRealTime, 'FontWeight', 'normal');
% set(handles.radiobuttonRealTime, 'ForegroundColor',[ 0 0 0]);
%
% %......Main Pannel
% set(handles.PannelCurves, 'ShadowColor', handles.MainPannelTextColorAcuz);
% set(handles.PannelCurves, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.radiobuttonAcuz, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.radiobuttonRealTime, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.ValT, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.TextTitle, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.PannelPlayAndSave, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.PlaySelection, 'BackgroundColor', [ 0 0 0]);
% set(handles.SaveSelection, 'ForegroundColor', handles.MainPannelBGColorAcuz);
% set(handles.PannelChooseDisplay, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.DisplayAllCurves, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.DisplayRawData, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.DisplayFilteredData, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.DisplayDerivUnwrapPhase, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.DisplayMean, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% set(handles.DisplayDeleteHarmonics, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% %         %......Parameters Pannel
% %         set(handles.PannelParameters, 'ShadowColor', handles.MainPannelTextColorAcuz);
% %         set(handles.PannelParameters, 'BackgroundColor', handles.MainPannelBGColorAcuz);
% %         %......Calibration Pannel
% %         set(handles.PannelCalibration, 'ShadowColor', handles.MainPannelTextColorAcuz);
% %         set(handles.PannelCalibration, 'BackgroundColor', handles.MainPannelBGColorAcuz);

jRangeSlider = com.jidesoft.swing.RangeSlider(0,1,0,1);
jRangeSlider = javacomponent(jRangeSlider, [handles.AUDIOleft+handles.PCleft-13,...
    handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf);
set(jRangeSlider,'PaintTicks',false, 'PaintLabels',false); %, 'Background', java.awt.Color(handles.R_Acuz, handles.G_Acuz, handles.B_Acuz))

% % UIWAIT makes GUI_RAVE wait for user response (see UIRESUME)
% uiwait(handles.figure1);

function edit_ValNbAverage_Calculate_CreateFcn(hObject, eventdata, handles)

function edit_LowestFrequency_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_LowestFrequency (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function edit_LowestFrequency_Callback(hObject, eventdata, handles)
% hObject    handle to edit_LowestFrequency (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_LowestFrequency as text
%        str2double(get(hObject,'String')) returns contents of edit_LowestFrequency as a double
var = str2num(char(get(handles.edit_LowestFrequency, 'String')));
if var ~= handles.FreqLo
    handles.FreqLo = var;
    handles.Paramchanged = 1;
    handles.ParamSaved=0;
    %     if handles.Namechanged==0
    %         set(handles.edit_SaveName,'String','Rename: you have changed the parameters!');
    %     end
end
guidata(hObject, handles)

function edit_HighestFrequency_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_HighestFrequency (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function edit_HighestFrequency_Callback(hObject, eventdata, handles)
% hObject    handle to edit_HighestFrequency (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_HighestFrequency as text
%        str2double(get(hObject,'String')) returns contents of edit_HighestFrequency as a double
var = str2num(char(get(handles.edit_HighestFrequency, 'String')));
if var ~= handles.FreqHi
    handles.FreqHi = var;
    handles.Paramchanged = 1;
    handles.ParamSaved=0;
    %     if handles.Namechanged==0
    %         set(handles.edit_SaveName,'String','');%Rename: you have changed the parameters!
    %     end
end
guidata(hObject, handles);

function edit_SaveName_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_SaveName (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function edit_SaveName_Callback(hObject, eventdata, handles)
% hObject    handle to edit_SaveName (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_SaveName as text
%        str2double(get(hObject,'String')) returns contents of edit_SaveName as a double
var = get(handles.edit_SaveName, 'String');
if strcmp(var,handles.SaveName)==0
    handles.SaveName = var;
    handles.Namechanged = 1;
end
guidata(hObject, handles);

function edit_SavePath_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_SavePath (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function edit_SavePath_Callback(hObject, eventdata, handles)
% hObject    handle to edit_SavePath (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_SavePath as text
%        str2double(get(hObject,'String')) returns contents of edit_SavePath as a double
var = get(handles.edit_SavePath, 'String');
if strcmp(var,handles.SavePath)==0
    handles.SavePath = PathName;
end
guidata(hObject, handles);

function edit_SamplingFrequency_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_SamplingFrequency (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function edit_SamplingFrequency_Callback(hObject, eventdata, handles)
% hObject    handle to edit_SamplingFrequency (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_SamplingFrequency as text
%        str2double(get(hObject,'String')) returns contents of edit_SamplingFrequency as a double
var = str2num(char(get(handles.edit_SamplingFrequency, 'String')));
if var ~= handles.Fs
    handles.Fs = var;
    handles.Paramchanged = 1;
    handles.ParamSaved=0;
    %     if handles.Namechanged==0
    %         set(handles.edit_SaveName,'String','')
    %     end
end
guidata(hObject, handles);

function edit_NumberOfBits_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_NumberOfBits (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function edit_NumberOfBits_Callback(hObject, eventdata, handles)
% hObject    handle to edit_NumberOfBits (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_NumberOfBits as text
%        str2double(get(hObject,'String')) returns contents of edit_NumberOfBits as a double
var = str2num(char(get(handles.edit_NumberOfBits, 'String')));
if var ~= handles.NbBits
    handles.NbBits = var;
    handles.Paramchanged = 1;
    handles.ParamSaved=0;
    %     if handles.Namechanged==0
    %         set(handles.edit_SaveName,'String','')
    %     end
end
guidata(hObject, handles);

function edit_ValTransducterSetUp_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_ValTransducterSetUp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
function edit_ValTransducterSetUp_Callback(hObject, eventdata, handles)
% hObject    handle to edit_ValTransducterSetUp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_ValTransducterSetUp as text
%        str2double(get(hObject,'String')) returns contents of edit_ValTransducterSetUp as a double
var = get(handles.edit_ValTransducterSetUp, 'String');
if var ~= handles.transduc
    handles.transduc = str2num(var);
    handles.Paramchanged = 1;
    handles.ParamSaved=0;
    %     if handles.Namechanged==0
    %         set(handles.edit_SaveName,'String','')
    %     end
end
guidata(hObject, handles)

% --- Executes on selection change in popupmenu_SaveFileNameParameters.
function popupmenu_SaveFileNameParameters_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_SaveFileNameParameters (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_SaveFileNameParameters contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_SaveFileNameParameters
var = get(handles.popupmenu_SaveFileNameParameters, 'String');
val = var{get(handles.popupmenu_SaveFileNameParameters,'Value')};
handles.SaveName = val;
set(handles.edit_SaveName,'String',val);
handles.Namechanged = 1;

% --- Executes on selection change in popupmenu_LoadFileParameters.
function popupmenu_LoadFileParameters_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_LoadFileParameters (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
var = get(handles.popupmenu_LoadFileParameters, 'String');
val = var{get(handles.popupmenu_LoadFileParameters,'Value')};
handles.SaveName = val;
[~, ind] = max(strcmp(val, handles.ListFileName));
handles.SavePath = handles.ListPathName{ind};
filename_param = cat(2, handles.SaveName, '.mat');
fullpathToFile_param= fullfile(handles.SavePath,filename_param);
load(fullpathToFile_param);
handles.Fs = Fs ;
handles.NbBits = NbBits;
handles.FreqLo = FreqLo;
handles.FreqHi = FreqHi;
handles.transduc = transduc;
handles.SaveName = NameParamFile;
handles.SavePath = NameParamPath;

set(handles.edit_SamplingFrequency,'String',handles.Fs);
set(handles.edit_NumberOfBits,'String',handles.NbBits);
set(handles.edit_LowestFrequency,'String',handles.FreqLo);
set(handles.edit_HighestFrequency,'String',handles.FreqHi);
set(handles.edit_SavePath,'String',handles.SavePath);
set(handles.edit_SaveName,'String',handles.SaveName);
set(handles.edit_ValTransducterSetUp,'String',handles.transduc);

handles.Paramchanged = 0;
handles.Namechanged = 0;
handles.ParamSaved = 1;

guidata(hObject, handles);
UpdateInfosCalibrationChoosingSpeed(handles)

myicon = imread('GreenCheck2.png');
msg = msgbox('Your parameters have been uploaded und saved !', 'Success','custom', myicon);
pause(1)
close(msg)

guidata(hObject, handles)

% --- Executes on button press in pushbutton_SaveParameters.
function pushbutton_SaveParameters_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_SaveParameters (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

[filename, pathname] = uiputfile('Param-.mat', 'Save parameters as');
NameParamFile = filename(1:end-4);  assignin('base', 'NameParamFile', NameParamFile);
NameParamPath = pathname; assignin('base', 'NameParamPath', NameParamPath);
Fs = handles.Fs; assignin('base', 'Fs', Fs);
NbBits = handles.NbBits; assignin('base', 'NbBits', NbBits);
FreqLo = handles.FreqLo; assignin('base', 'FreqLo', FreqLo);
FreqHi = handles.FreqHi; assignin('base', 'FreqHi', FreqHi);
transduc = handles.transduc; assignin('base', 'transduc', transduc);
save([pathname, filename], 'Fs', 'NbBits', 'FreqLo', 'FreqHi', 'transduc', 'NameParamPath', ...
    'NameParamFile');
% handles.Paramchanged = 0;
% handles.Namechanged = 0;
handles.ParamSaved = 1;
handles.SavePath = NameParamPath;
handles.SaveName = NameParamFile;
if max(size(handles.ListFileName))>1
    if max(strcmp(handles.SaveName, handles.ListFileName))==0
        handles.ListFileName = cat(1,[cellstr(''); cellstr(handles.SaveName)],handles.ListFileName(2:end));
        handles.ListPathName = cat(1,[cellstr(''); cellstr(handles.SavePath)],handles.ListPathName(2:end));
    end
else
    handles.ListFileName = [cellstr(''); cellstr(handles.SaveName)];
    a = handles.ListFileName;
    handles.ListPathName = [cellstr(''); cellstr(handles.SavePath)];
    b = handles.ListPathName;
end
guidata(hObject, handles);
UpdateInfosCalibrationChoosingSpeed(handles);
set(handles.popupmenu_LoadFileParameters,'String',handles.ListFileName);
set(handles.edit_SavePath,'String',handles.SavePath);
set(handles.edit_SaveName,'String',handles.SaveName);
myicon = imread('GreenCheck2.png');
msg = msgbox('Your parameters have been replaced and saved!', 'Success','custom', myicon);
pause(1)
close(msg)
guidata(hObject, handles);

% --- Executes on button press in pushbutton_LoadParameters.
function pushbutton_LoadParameters_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_LoadParameters (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
[filename_param,path_param]= uigetfile('*.mat');
if ischar(filename_param)
    % load parameters
    prompt = 'Saving Parameters';
    fullpathToFile_param= fullfile(path_param,filename_param);
    handles.SaveName = filename_param(1:end-4);
    handles.SavePath = path_param;
    load(fullpathToFile_param)
    handles.Fs = Fs ;
    handles.NbBits = NbBits;
    handles.FreqLo = FreqLo;
    handles.FreqHi = FreqHi;
    handles.transduc = transduc;
    handles.SaveName = NameParamFile;
    handles.SavePath = NameParamPath;
    
    set(handles.edit_SamplingFrequency,'String',handles.Fs);
    set(handles.edit_NumberOfBits,'String',handles.NbBits);
    set(handles.edit_LowestFrequency,'String',handles.FreqLo);
    set(handles.edit_HighestFrequency,'String',handles.FreqHi);
    set(handles.edit_SavePath,'String',handles.SavePath);
    set(handles.edit_SaveName,'String',handles.SaveName);
    set(handles.edit_ValTransducterSetUp,'String',handles.transduc);
    
    handles.Paramchanged = 0;
    handles.Namechanged = 0;
    handles.ParamSaved = 1;
    
    guidata(hObject, handles);
    UpdateInfosCalibrationChoosingSpeed(handles)
    
    myicon = imread('GreenCheck2.png');
    msg = msgbox('Your parameters have been updated and saved !', 'Success','custom', myicon);
    pause(1)
    close(msg)
end


%_________________________________________________________________________
%_________________________________________________________________________
%_____________________________CALIBRATION_________________________________
%_________________________________________________________________________
%_________________________________________________________________________

function SpeedNfft_CreateFcn(hObject, eventdata, handles)
handles.ValueSpeed = get(hObject, 'Value');

function UpdateInfosCalibrationLoadingCalib(handles)
contents = {'low' ;'middle'; 'fast' ;'very fast'};
set(handles.SpeedNfft,'String', contents)
if handles.numPoints==2^15
    handles.dt = (handles.numPoints-1)/handles.Fs;
    handles.df = handles.Fs/handles.numPoints;
    set(handles.Nfft_Val, 'String', '2^15');
    set(handles.dt_Val, 'String', round(handles.dt,2));
    set(handles.df_Val, 'String', round(handles.df,2));
    set(handles.SpeedNfft, 'Value', 1);
elseif handles.numPoints==2^14
    handles.dt = (handles.numPoints-1)/handles.Fs;
    handles.df = handles.Fs/handles.numPoints;
    set(handles.Nfft_Val, 'String', '2^14');
    set(handles.dt_Val, 'String', round(handles.dt,2));
    set(handles.df_Val, 'String', round(handles.df,2));
    set(handles.SpeedNfft, 'Value', 2);
elseif handles.numPoints==2^13
    handles.dt = (handles.numPoints-1)/handles.Fs;
    handles.df = handles.Fs/handles.numPoints;
    set(handles.Nfft_Val, 'String', '2^13');
    set(handles.dt_Val, 'String', round(handles.dt,2));
    set(handles.df_Val, 'String', round(handles.df,2));
    set(handles.SpeedNfft, 'Value', 3);
elseif handles.numPoints==2^12
    handles.dt = (handles.numPoints-1)/handles.Fs;
    handles.df = handles.Fs/handles.numPoints;
    set(handles.Nfft_Val, 'String', '2^12');
    set(handles.dt_Val, 'String', round(handles.dt,2));
    set(handles.df_Val, 'String', round(handles.df,2));
    set(handles.SpeedNfft, 'Value', 4);
end

function UpdateInfosCalibrationChoosingSpeed(handles)
contents = cellstr(get(handles.SpeedNfft,'String'));
contents = contents{get(handles.SpeedNfft,'Value')};
if strcmp(contents, 'low')
    numPoints = 2^15;
    dt = (numPoints-1)/handles.Fs;
    df = handles.Fs/numPoints;
    handles.numPoints = 2^15;
    handles.dt = (handles.numPoints-1)/handles.Fs;
    handles.df = handles.Fs/handles.numPoints;
    set(handles.Nfft_Val, 'String', '2^15');
    set(handles.dt_Val, 'String', round(dt,2));
    set(handles.df_Val, 'String', round(df,2));
    handles.ValueSpeed = get(handles.SpeedNfft, 'Value');
elseif strcmp(contents, 'middle') ==1
    handles.numPoints = 2^14;
    numPoints = 2^14;
    dt = (numPoints-1)/handles.Fs;
    df = handles.Fs/numPoints;
    handles.dt = (handles.numPoints-1)/handles.Fs;
    handles.df = handles.Fs/handles.numPoints;
    set(handles.Nfft_Val, 'String', '2^14');
    set(handles.dt_Val, 'String', round(dt,2));
    set(handles.df_Val, 'String', round(df,2));
    handles.ValueSpeed = get(handles.SpeedNfft, 'Value');
elseif strcmp(contents, 'fast') ==1
    handles.numPoints = 2^13;
    numPoints = 2^13;
    dt = (numPoints-1)/handles.Fs;
    df = handles.Fs/numPoints;
    handles.dt = (handles.numPoints-1)/handles.Fs;
    handles.df = handles.Fs/handles.numPoints;
    set(handles.Nfft_Val, 'String', '2^13');
    set(handles.dt_Val, 'String', round(dt,2));
    set(handles.df_Val, 'String', round(df,2));
    handles.ValueSpeed = get(handles.SpeedNfft, 'Value');
else
    handles.numPoints = 2^12;
    numPoints = 2^12;
    dt = (numPoints-1)/handles.Fs;
    df = handles.Fs/numPoints;
    handles.dt = (handles.numPoints-1)/handles.Fs;
    handles.df = handles.Fs/handles.numPoints;
    set(handles.Nfft_Val, 'String', '2^12');
    set(handles.dt_Val, 'String', round(dt,2));
    set(handles.df_Val, 'String', round(df,2));
    handles.ValueSpeed = get(handles.SpeedNfft, 'Value');
end

% --- Executes on selection change in SpeedNfft.
function SpeedNfft_Callback(hObject, eventdata, handles)
% hObject    handle to SpeedNfft (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% Hints: contents = cellstr(get(hObject,'String')) returns SpeedNfft contents as cell array
%        contents{get(hObject,'Value')} returns selected item from SpeedNfft

if handles.ParamSaved == 0 & handles.LoadFile ==0 & handles.LoadCalib ==0
    uiwait(msgbox({'         You did not save your parameters :';'Please save them before starting a calibration !'}, 'Error','modal'));
    set(hObject, 'Value', handles.ValueSpeed);
elseif handles.StartNewCalib == 0 & (handles.CalibSaved==1 || handles.LoadCalib ==1 || handles.LoadFile ==1)
    question = questdlg('Do you want to start a new calibration ?','User Input','Yes','No', 'No');
    if isequal(question, 'Yes')
        question2 = questdlg('Do you want to keep the current parameters ?','User Input','Keep Params','Load StandardParams', 'New Params', 'Keep Params');
        if isequal(question2, 'Keep Params')
            handles.CalibSaved =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            handles.LoadCalib =0;
            handles.DataAquired = 0;
            guidata(hObject, handles)
            UpdateInfosCalibrationChoosingSpeed(handles)
            guidata(hObject, handles)
            
        elseif isequal(question2, 'Load StandardParams')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            LoadStandardParamAcuz(handles)
            pause(0.1)
            guidata(hObject, handles)
            UpdateInfosCalibrationChoosingSpeed(handles)
            myicon = imread('GreenCheck2.png');
            msg = msgbox('Your parameters have been uploaded und saved !', 'Success','custom', myicon);
            pause(1)
            close(msg)
            guidata(hObject, handles)
            
        elseif isequal(question2, 'New Params')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 0;
            handles.LoadFile = 0;
            handles.SavePath = '';
            handles.SaveName = '';
            set(handles.edit_SavePath,'String',handles.SavePath);
            set(handles.edit_SaveName,'String',handles.SaveName);
            set(handles.edit_LowestFrequency,'String','');
            set(handles.edit_HighestFrequency,'String','');
            set(handles.edit_ValTransducterSetUp,'String','');
            
            set(handles.pushbutton_StartCalibration,'Enable','off')
            
            uiwait(msgbox({'         You did not save your parameters :';'Please save the new parameters before starting a calibration !'}, 'Error','modal'));
            set(hObject, 'Value', handles.ValueSpeed);
            
            guidata(hObject, handles)
        end
        
        axes(handles.Audio)
        plot(handles.Audio, [0 1], [0 0], 'w');
        hold(handles.Audio, 'off');
        
        axes(handles.Spectre)
        plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Spectre, 'off');
        
        axes(handles.Phase)
        plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Phase, 'off');
        
        axes(handles.Calibration)
        plot(handles.Calibration, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Calibration, 'off');
        xlabel(handles.Calibration, 'frequency [Hz]');
        ylabel(handles.Calibration,'[dB]', 'Units', 'Normalized', 'Position', [-0.11,0.5, 0])
        
        axes(handles.InputCalibration)
        plot(handles.InputCalibration, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.InputCalibration, 'off');
        ylabel(handles.InputCalibration,'[dB]','Units', 'Normalized', 'Position', [-0.11,0.5, 0])
        set(handles.InputCalibration,'XTickLabel', '');
        
        handles.NameCalib = '';
        handles.PathCalib = '';
        set(handles.text_PathCalib, 'String', handles.PathCalib);
        set(handles.text_NameCalib, 'String', handles.NameCalib);
        
        handles.StartNewCalibration=1;
    else
        set(hObject, 'Value', handles.ValueSpeed);
        handles.StartNewCalibration=0;
    end
else
    UpdateInfosCalibrationChoosingSpeed(handles)
end
guidata(hObject, handles)

% --- Executes on button press in pushbutton_StartCalibration.
function pushbutton_StartCalibration_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_StartCalibration (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
if handles.ParamSaved == 0 & max([handles.LoadFile handles.LoadCalib]) ~=1
    uiwait(msgbox({'         You did not save your parameters :';'Please save them before starting a calibration !'}, 'Error','modal'));
elseif handles.LoadFile == 1 || handles.DataAquired== 1 || handles.CalibSaved == 1 || handles.LoadCalib==1
    question = questdlg('Do you want to start a new acquisition ?','User Input','Yes', 'No', 'No');
    if isequal(question, 'Yes')
        question2 = questdlg('Do you want to keep the current parameters ?','User Input','Keep Params','Load StandardParams', 'Cancel', 'Cancel');
        if isequal(question2, 'Keep Params')
            handles.CalibSaved =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            handles.LoadCalib =0;
            handles.DataAquired = 0;
            guidata(hObject, handles)
            UpdateInfosCalibrationChoosingSpeed(handles)
            
            axes(handles.Audio)
            plot(handles.Audio, [0 1], [0 0], 'w');
            hold(handles.Audio, 'off');
            
            axes(handles.Spectre)
            plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
            hold(handles.Spectre, 'off');
            
            axes(handles.Phase)
            plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
            hold(handles.Phase, 'off');
            
            %%%%%%%%%%%%%%%%%%%%
            handles.NameCalib = '';
            handles.PathCalib = '';
            set(handles.text_PathCalib, 'String', handles.PathCalib);
            set(handles.text_NameCalib, 'String', handles.NameCalib);
            set(handles.pushbutton_FlattenCalibration,'Enable','on')
            set(handles.pushbutton_BeginRecord,'Enable','off')
            %             set(handles.pushbutton_PlayRecord,'Enable','off')
            
            %definition de parametres pour crer le bruit
            Fs = handles.Fs;
            % % %     NbCyclePerSecond = handles.NbCyclePerSecond
            %     numPoints = 2^(nextpow2(handles.Fs/handles.NbCyclePerSecond));
            %numPoints = floor(handles.Fs/handles.NbCyclePerSecond);
            numPoints = handles.numPoints;
            assignin('base', 'numPoints', numPoints);
            set(handles.Nfft_Val, 'String', ['2^',int2str(log2(handles.numPoints))]);
            df = handles.Fs/numPoints; handles.df = df; assignin('base', 'df', df);
            set(handles.df_Val, 'String', round(df,2));
            harmHi = ceil(handles.FreqHi/df);
            if harmHi > floor(numPoints/2)
                harmHi = floor(numPoints/2);
            end
            handles.harmHi = harmHi;
            assignin('base', 'harmHi', harmHi);
            
            harmLo = floor(handles.FreqLo/df);
            if harmLo == 0
                harmLo = 1;
            end
            handles.harmLo = harmLo;
            assignin('base', 'harmLo', harmLo);
            
            Tcalib = 2; %[s]
            assignin('base', 'Tcalib', Tcalib);
            
            % % %     numCycles = ceil(Tcalib*handles.NbCyclePerSecond)
            numCycles = 16;
            assignin('base', 'numCycles', numCycles);
            handles.numCycles = numCycles;
            
            modf = 2; handles.modf = modf; assignin('base', 'modf', modf);
            
            % create initial noise signal for calibration
            output.spectrum = zeros(harmHi + 1, 1);
            output.spectrum(harmLo + 1 : harmHi + 1) = 1;
            output.waveform = spectrumToWaveform(output.spectrum,numPoints);
            output.alpha = sum(abs(output.spectrum)) / max(abs(output.waveform));
            output = randomisePhase(output);
            CalibCycles = 2*numCycles; handles.CalibCycles = CalibCycles;
            handles.OutputSpectrum = output.spectrum;
            handles.OutputWaveform = output.waveform;
            guidata(handles.pushbutton_StartCalibration, handles)
            [handles.TotSpectrumA, handles.TotSpectrumE] = calibrate(handles)
            guidata(handles.pushbutton_StartCalibration, handles)
            
            guidata(hObject, handles)
        elseif isequal(question2, 'Load StandardParams')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            LoadStandardParamAcuz(handles)
            pause(0.1)
            guidata(hObject, handles)
            handles.ParamSaved = 1;
            UpdateInfosCalibrationChoosingSpeed(handles)
            guidata(hObject, handles)
            axes(handles.Audio)
            plot(handles.Audio, [0 1], [0 0], 'w');
            hold(handles.Audio, 'off');
            
            axes(handles.Spectre)
            plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
            hold(handles.Spectre, 'off');
            
            axes(handles.Phase)
            plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
            hold(handles.Phase, 'off');
            
            %%%%%%%%%%%%%%%%%%%%
            set(handles.pushbutton_FlattenCalibration,'Enable','on')
            set(handles.pushbutton_BeginRecord,'Enable','off')
            handles.NameCalib = '';
            handles.PathCalib = '';
            set(handles.text_PathCalib, 'String', handles.PathCalib);
            set(handles.text_NameCalib, 'String', handles.NameCalib);
            
            %definition de parametres pour crer le bruit
            Fs = handles.Fs;
            % % %     NbCyclePerSecond = handles.NbCyclePerSecond
            %     numPoints = 2^(nextpow2(handles.Fs/handles.NbCyclePerSecond));
            %numPoints = floor(handles.Fs/handles.NbCyclePerSecond);
            numPoints = handles.numPoints;
            assignin('base', 'numPoints', numPoints);
            set(handles.Nfft_Val, 'String', ['2^',int2str(log2(handles.numPoints))]);
            df = handles.Fs/numPoints; handles.df = df; assignin('base', 'df', df);
            set(handles.df_Val, 'String', round(df,2));
            harmHi = ceil(handles.FreqHi/df)
            if harmHi > floor(numPoints/2)
                harmHi = floor(numPoints/2);
            end
            handles.harmHi = harmHi;
            assignin('base', 'harmHi', harmHi);
            
            harmLo = floor(handles.FreqLo/df)
            if harmLo == 0
                harmLo = 1;
            end
            handles.harmLo = harmLo;
            assignin('base', 'harmLo', harmLo);
            
            Tcalib = 2; %[s]
            assignin('base', 'Tcalib', Tcalib);
            
            % % %     numCycles = ceil(Tcalib*handles.NbCyclePerSecond)
            numCycles = 16;
            assignin('base', 'numCycles', numCycles);
            handles.numCycles = numCycles;
            
            modf = 2; handles.modf = modf; assignin('base', 'modf', modf);
            
            % create initial noise signal for calibration
            output.spectrum = zeros(harmHi + 1, 1);
            output.spectrum(harmLo + 1 : harmHi + 1) = 1;
            output.waveform = spectrumToWaveform(output.spectrum,numPoints);
            output.alpha = sum(abs(output.spectrum)) / max(abs(output.waveform));
            output = randomisePhase(output);
            CalibCycles = 2*numCycles; handles.CalibCycles = CalibCycles;
            handles.OutputSpectrum = output.spectrum;
            handles.OutputWaveform = output.waveform;
            guidata(handles.pushbutton_StartCalibration, handles)
            [handles.TotSpectrumA, handles.TotSpectrumE] = calibrate(handles)
            guidata(handles.pushbutton_StartCalibration, handles)
            
            handles.LoadFile= 0;
            guidata(hObject, handles)
        elseif isequal(question2, 'Cancel')
            set(handles.SpeedNfft, 'Value', handles.ValueSpeed);
            handles.StartNewCalibration =0;
        end
    end
else
    set(handles.pushbutton_FlattenCalibration,'Enable','on')
    set(handles.pushbutton_BeginRecord,'Enable','off')
    handles.NameCalib = '';
    handles.PathCalib = '';
    set(handles.text_PathCalib, 'String', handles.PathCalib);
    set(handles.text_NameCalib, 'String', handles.NameCalib);
    
    %definition de parametres pour crer le bruit
    Fs = handles.Fs;
    % % %     NbCyclePerSecond = handles.NbCyclePerSecond
    %     numPoints = 2^(nextpow2(handles.Fs/handles.NbCyclePerSecond));
    %numPoints = floor(handles.Fs/handles.NbCyclePerSecond);
    numPoints = str2num(get(handles.Nfft_Val, 'String'));
    assignin('base', 'numPoints', numPoints);
    handles.numPoints = numPoints;
    df = handles.Fs/handles.numPoints; handles.df = df; assignin('base', 'df', df);
    %     set(handles.df_Val, 'String', round(df,2));
    harmHi = ceil(handles.FreqHi/df);
    if harmHi > floor(numPoints/2)
        harmHi = floor(numPoints/2);
    end
    handles.harmHi = harmHi;
    assignin('base', 'harmHi', harmHi);
    
    harmLo = floor(handles.FreqLo/df);
    if harmLo == 0
        harmLo = 1;
    end
    handles.harmLo = harmLo;
    assignin('base', 'harmLo', harmLo);
    
    Tcalib = 2; %[s]
    assignin('base', 'Tcalib', Tcalib);
    
    % % %     numCycles = ceil(Tcalib*handles.NbCyclePerSecond)
    numCycles = 16;
    assignin('base', 'numCycles', numCycles);
    handles.numCycles = numCycles;
    
    modf = 2; handles.modf = modf; assignin('base', 'modf', modf);
    
    % create initial noise signal for calibration
    output.spectrum = zeros(harmHi + 1, 1);
    output.spectrum(harmLo + 1 : harmHi + 1) = 1;
    output.waveform = spectrumToWaveform(output.spectrum,numPoints);
    output.alpha = sum(abs(output.spectrum)) / max(abs(output.waveform));
    output = randomisePhase(output);
    CalibCycles = 2*numCycles; handles.CalibCycles = CalibCycles;
    handles.OutputSpectrum = output.spectrum;
    handles.OutputWaveform = output.waveform;
    guidata(handles.pushbutton_StartCalibration, handles);
    [handles.TotSpectrumA, handles.TotSpectrumE] = calibrate(handles);
    guidata(handles.pushbutton_StartCalibration, handles);
    
end

guidata(hObject, handles)

function [y1, y2] = calibrate(handles)

noise=[];
for n= 1:handles.CalibCycles+2+handles.modf
    noise=[noise handles.OutputWaveform'];
end

% check input
devinfo = audiodevinfo;
input = devinfo.input;
DevID_Mic=cell2mat({input(handles.audioInputMenu.Value).ID});
% check output
devinfo = audiodevinfo;
output = devinfo.output;
DevID_Out=cell2mat({output(handles.audioOutputMenu.Value).ID});

if get(handles.radiobuttonCalibAcuz, 'Value') ==1
    %     inputbufferOri = pawavplayrecordmodifiedMARIE([noise' noise'],handles.DevIDoutputMOTU,handles.Fs,0,1,handles.nChannels,handles.DevIDoutputMOTU,'core');
    inputbufferOri = pawavplayrecordmodifiedMARIE([noise' noise'],DevID_Out,handles.Fs,0,1,handles.nChannels,DevID_Out,'core');
    % elseif get(handles.radiobuttonCalibRealTime, 'Value') ==1
else
    % %     if get(handles.radiobuttonPipe, 'Value') == 1
    % %         %         soundsc(noise, handles.Fs);
    % %         %         sortie =  handles.DevIDoutputMOTU
    % %         %         mic =  handles.DevIDmic
    % %         sound = audioplayer(noise, handles.Fs, 16, handles.DevIDoutputMOTU);
    % %         sound.play();
    % %         clockStart = clock;
    % %         recorder = audiorecorder(handles.Fs,handles.NbBits,handles.nChannels,handles.DevIDmic);
    % %     else
    % % %         sound = audioplayer(noise, handles.Fs, 16, handles.DevIDoutputiMicUSB);
    % % sound = audioplayer(noise, handles.Fs, 16, handles.audioInputMenu.DevIDout);
    % %         %         sound = audioplayer(noise, handles.Fs, 16, handles.DevIDoutputMOTU);
    % %         sound.play();
    % %         clockStart = clock;
    % % %         recorder = audiorecorder(handles.Fs,handles.NbBits,handles.nChannels,handles.DevIDmic);
    % % recorder = audiorecorder(handles.Fs,handles.NbBits,handles.nChannels,handles.audioInputMenu.Value);
    % %     end
    
    
    % play sound and record
    sound = audioplayer(noise, handles.Fs, 16, DevID_Out);
    sound.play();
    clockStart = clock;
    recorder = audiorecorder(handles.Fs,handles.NbBits,handles.nChannels,DevID_Mic);
    
    
    
    TimeWaitBar = (length(handles.OutputWaveform)-1)/handles.Fs;
    WaitbarWindow = waitbar(0,'Please wait...');
    Tacq = length(noise)/handles.Fs;
    record(recorder,Tacq);
    clockWaitBar = clock;
    Index = 1+floor(abs(mod(abs(clockWaitBar(end)-clockStart(end)),60))/TimeWaitBar);
    test = isrecording(recorder);
    while test ==1
        clock1 = clock;
        waitbar(Index/(handles.CalibCycles+2+handles.modf), WaitbarWindow);
        Index = Index+1;
        if Index>=(handles.CalibCycles+2+handles.modf)
            Index = (handles.CalibCycles+2+handles.modf);
        end
        clock2 = clock;
        pause(TimeWaitBar- abs(mod(abs(clock2(end)-clock1(end)),60)));
        test = isrecording(recorder);
    end
    close(WaitbarWindow)
    inputbufferOri = getaudiodata(recorder);
end



% >> correct phase
Correlation = xcorr(inputbufferOri(:,2),noise');
[~,lag] = max(Correlation);
Offset = mod(lag,handles.numPoints);
%   Correction only
inputbufferEC=inputbufferOri(Offset:end,2);
inputbufferAC=inputbufferOri(Offset:end,1);
% >> Double check correction, OffsetDoubleCheck should be 1! <<
CorrelationDoubleCheck=xcorr(inputbufferEC,noise');
[~,lagDoubleCheck]=max(CorrelationDoubleCheck);
OffsetDoubleCheck = mod(lagDoubleCheck,handles.numPoints);
% disp(['OffsetOfSampleForDoubleCheckShouldBeOne:', num2str(OffsetDoubleCheck)]);
% index of StartSample
StartSample = (handles.modf+1)*length(handles.OutputWaveform)+1;
% >> obtain and process Acous0al input wav <<
totalWaveformA = inputbufferAC(StartSample: StartSample+handles.CalibCycles*...
    length(handles.OutputWaveform)-1);
totalWaveformA = totalWaveformA * sqrt(2) / handles.transduc; % Units P
CalibCycles = 2*handles.numCycles;
totalWaveformA = reshape(totalWaveformA, handles.numPoints, CalibCycles);
allSeparateSpectrumA = waveformToSpectrum(totalWaveformA, handles.numPoints);

totalWaveformE = inputbufferEC(StartSample: StartSample+handles.CalibCycles*...
    length(handles.OutputWaveform)-1);
totalWaveformE = totalWaveformE * sqrt(2) / handles.transduc; % Units P
totalWaveformE = reshape(totalWaveformE, handles.numPoints, CalibCycles);
allSeparateSpectrumE = waveformToSpectrum(totalWaveformE, handles.numPoints);
% set(handles.dt_Val,'String', round(max(size(totalWaveformA))/handles.Fs,3))
% -------------------
totalSpectrumA = mean(allSeparateSpectrumA,2);
totalSpectrumE = mean(allSeparateSpectrumE,2);
Zref = totalSpectrumA;
Zref_feedback = totalSpectrumE;
% variable de sortie de la fonction calibrate(handles)
y1 = totalSpectrumA ;
y2 = totalSpectrumE ;
% plot
graph = handles.Calibration;
axes(graph)
%figure(22)
plot(handles.Calibration, handles.df*linspace(handles.harmLo + 1,handles.harmHi + 1, handles.harmHi-handles.harmLo+1),...
    db(totalSpectrumA(handles.harmLo+1:handles.harmHi+1)),'r', 'linewidth', 2);
% set(graph, 'Fontsize', 12, 'Fontweight', 'bold');
graph2 = handles.InputCalibration;
axes(graph2)
plot(handles.InputCalibration, handles.df*linspace(handles.harmLo + 1,handles.harmHi + 1, handles.harmHi-handles.harmLo+1),...
    db(totalSpectrumE(handles.harmLo+1:handles.harmHi+1)),'g', 'linewidth', 2);
set(graph2,'xtick',[])
set(graph2,'xticklabel',[])
% set(graph2, 'Fontsize', 12, 'Fontweight', 'bold');
xlabel(handles.Calibration, 'frequency [Hz]');
ylabel(handles.Calibration,'[dB]', 'Units', 'Normalized', 'Position', [-0.11,0.5, 0])

ylabel(handles.InputCalibration,'[dB]','Units', 'Normalized', 'Position', [-0.11,0.5, 0])
set(handles.InputCalibration,'XTickLabel', '');
xlim(handles.Calibration, [0 handles.FreqHi]);
xlim(handles.InputCalibration, [0 handles.FreqHi]);

% --- Executes on button press in pushbutton_FlattenCalibration.
function pushbutton_FlattenCalibration_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_FlattenCalibration (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

set(handles.pushbutton_SaveCalibration,'Enable','on')

output.spectrum = handles.OutputSpectrum;
totalSpectrumA = handles.TotSpectrumA;
adjustSpectrum = zeros(size(output.spectrum));
adjustSpectrum(handles.harmLo + 1:handles.harmHi + 1)...
    = ones(length(handles.harmLo + 1:handles.harmHi + 1),1)./...
    abs(totalSpectrumA(handles.harmLo + 1:handles.harmHi + 1));
output.spectrum = output.spectrum .* adjustSpectrum;
output.waveform = spectrumToWaveform(output.spectrum,handles.numPoints);
% sizeWaveform = size(output.waveform)
output.alpha = sum(abs(output.spectrum)) / max(abs(output.waveform));
output = randomisePhase(output);
handles.OutputSpectrum = output.spectrum;
handles.OutputWaveform = output.waveform;
% sizeWaveform2 = size(handles.OutputWaveform)
guidata(hObject, handles)
handles.TotSpectrumA = calibrate(handles);
if get(handles.radiobuttonCalibRealTime, 'Value')==1
    handles.CalibType = 'RealTime';
    if get(handles.radiobuttonPipe, 'Value')==1
        handles.OutputType = 'Pipe';
    else
        handles.OutputType = 'LoudSpeaker';
    end
else
    handles.CalibType = 'Acuz';
    handles.OutputType = 'Pipe';
end

guidata(hObject, handles);

% --- Executes on button press in pushbutton_SaveCalibration.
function pushbutton_SaveCalibration_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_SaveCalibration (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global hjSlider


% check input
devinfo = audiodevinfo;
input = devinfo.input;
DevID_Mic=cell2mat({input(handles.audioInputMenu.Value).ID});
% check output
devinfo = audiodevinfo;
output = devinfo.output;
DevID_Out=cell2mat({output(handles.audioOutputMenu.Value).ID});

CalibSource = handles.OutputWaveform; handles.CalibSource = CalibSource; handles.nCalib = length(handles.CalibSource);
Zref = handles.TotSpectrumA; handles.Zref = Zref;
question2 = questdlg('Do you want to save this calibration','User Input','Yes','No', 'Yes');
if isequal(question2, 'Yes')
    handles.CalibSaved = 1;
    handles.StartNewCalib = 0;
    PARAMS.computer = 'mac';
    PARAMS.device_type = 'core';
    PARAMS.device_number = DevID_Mic;
    PARAMS.device_output_number = DevID_Out;
    PARAMS.nChannelFirst = 1;
    PARAMS.nChannelLast = 3;
    PARAMS.samplingFreq = handles.Fs;
    PARAMS.bitDepth = handles.NbBits;
    PARAMS.numPoints = handles.numPoints;
    PARAMS.freqLo = handles.FreqLo;
    PARAMS.freqHi = handles.FreqHi;
    %     PARAMS.numCycles = handles.NbCycle;
    PARAMS.transduct = handles.transduc;
    %     PARAMS.path = handles.SavePath;
    PARAMS.freqIncr = handles.df;
    PARAMS.freqNyquist = handles.Fs/2;
    PARAMS.harmLo = handles.harmLo;
    PARAMS.harmHi = handles.harmHi;
    PARAMS.absc = handles.df*...
        linspace(handles.harmLo + 1,handles.harmHi + 1, handles.harmHi-handles.harmLo+1);
    %     PARAMS.absc = handles.absc;
    %     PARAMS.absc = handles.freqZ(handles.harmLo+1:handles.harmHi+1);
    % % %     PARAMS.NbCyclePerSecond = handles.NbCyclePerSecond;
    PARAMS.NameParamFile = handles.SaveName;
    PARAMS.NameParamPath = handles.SavePath;
    [filename, pathname] = uiputfile( [handles.SavePath, 'Calib-.mat'], 'Save calibration as');
    PARAMS.NameCalibFile = filename(1:end-4);
    PARAMS.NameCalibPath = pathname;
    PARAMS.CalibType = handles.CalibType;
    PARAMS.OutputType = handles.OutputType;
    handles.PARAMS = PARAMS;
    save([pathname, filename], 'Zref','CalibSource', 'PARAMS');
    set(handles.text_PathCalib, 'String', PARAMS.NameCalibPath);
    set(handles.text_NameCalib, 'String', PARAMS.NameCalibFile);
    
    
%     if strcmp(handles.OutputType, 'LoudSpeaker') ==1
%         set(handles.radiobuttonCalculationAcuz, 'Enable','off');
%         set(handles.radiobuttonCalculationRealTime, 'Value',1);
%         set(handles.pushbutton_BeginRecord,'Enable','off')
%     elseif strcmp(handles.OutputType, 'Pipe') ==1
%         set(handles.radiobuttonCalculationAcuz, 'Enable','on');
%         if get(handles.radiobuttonCalculationRealTime, 'Value') == 0
%             set(handles.pushbutton_BeginRecord,'Enable','on')
%         else
%             set(handles.pushbutton_BeginRecord,'Enable','off')
%         end
%     end
    
    jSlider = javax.swing.JSlider(0,handles.nCalib,0);
    javacomponent(jSlider,[handles.AUDIOleft+handles.PCleft-13,...
        handles.AUDIObottom-2*handles.AUDIOheight+handles.PCbottom+21,handles.AUDIOwidth+2*13,26], gcf)
    hjSlider = handle(jSlider, 'CallbackProperties');
    set(hjSlider, 'StateChangedCallback', {@EggSliderCallback, handles});
end
guidata(hObject, handles)

% --- Executes on button press in pushbutton_LoadCalibration.
function pushbutton_LoadCalibration_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_LoadCalibration (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

global hjSlider
[filename_calib,path]= uigetfile('*.mat');
if ischar(filename_calib)
    handles.LoadCalib =1;
    handles.StartNewCalib = 0;
    % load parameters
    prompt = 'Saving calibration file';
    fullpathToFile_calib= fullfile(path,filename_calib);
    handles.myfile_calib = fullpathToFile_calib;
    CalibData = importdata(handles.myfile_calib);
    handles.CalibSource = CalibData.CalibSource;
    PARAMS = CalibData.PARAMS;
    handles.PARAMS = PARAMS;;
    handles.Fs = PARAMS.samplingFreq;
    handles.Zref = CalibData.Zref;
    handles.nCalib = length(handles.CalibSource);
    %     handles.tCalib = (0:1/handles.Fs:(handles.nCalib-1)*handles.Fs);
    handles.numPoints = PARAMS.numPoints;
    handles.harmLo = PARAMS.harmLo;
    handles.harmHi = PARAMS.harmHi;
    handles.absc = PARAMS.absc;
    handles.df = handles.absc(2)-handles.absc(1);
    handles.dt = handles.nCalib/handles.Fs;
    handles.FreqLo = PARAMS.freqLo;
    handles.FreqHi = PARAMS.freqHi;
    %     handles.NbCycle = PARAMS.numCycles;
    handles.transduc = PARAMS.transduct;
    handles.NbBits = PARAMS.bitDepth;
    handles.SaveName = PARAMS.NameParamFile;
    handles.SavePath = PARAMS.NameParamPath;
    handles.NameCalib = PARAMS.NameCalibFile;
    handles.PathCalib = PARAMS.NameCalibPath;
    handles.CalibType = PARAMS.CalibType;
    handles.OutputType = PARAMS.OutputType;
    % % %     handles.NbCyclePerSecond = PARAMS.NbCyclePerSecond
    guidata(hObject, handles)
    %     % display new parameters in the GUI
    set(handles.edit_SamplingFrequency,'String',handles.Fs);
    set(handles.edit_NumberOfBits,'String',handles.NbBits);
    set(handles.edit_LowestFrequency,'String',handles.FreqLo);
    set(handles.edit_HighestFrequency,'String',handles.FreqHi);
    set(handles.edit_ValTransducterSetUp,'String',handles.transduc);
    set(handles.text_PathCalib, 'String', PARAMS.NameCalibPath);
    set(handles.text_NameCalib, 'String', PARAMS.NameCalibFile);
    set(handles.edit_SaveName, 'String', PARAMS.NameParamFile);
    set(handles.edit_SavePath, 'String', PARAMS.NameParamPath);
    
    if strcmp(handles.CalibType, 'Acuz') ==1
        set(handles.radiobuttonCalculationAcuz, 'Enable','on');
        set(handles.radiobuttonCalculationAcuz, 'Value',1);
        set(handles.radiobuttonCalculationRealTime, 'Enable','on');
        set(handles.radiobuttonCalculationRealTime, 'Value',0);
        set(handles.CalculationPlayStopBBSignal, 'Visible','off');
        set(handles.CalculationStop, 'Visible','off');
        set(handles.pushbutton_BeginRecord, 'Visible','on');
        set(handles.pushbutton_BeginRecord, 'Enable','on');
        set(handles.radiobuttonCalibAcuz, 'Value', 1);
        set(handles.radiobuttonPipe, 'Value', 1);
        set(handles.radiobuttonCalibRealTime, 'Value', 0);
        set(handles.radiobuttonLoudSpeaker, 'Value', 0);
        set(handles.PannelCalibType, 'UserData',0)
        if get(handles.radiobuttonCalculationRealTime, 'Value') == 1
            set(handles.pushbutton_BeginRecord,'Enable','off')
        else
            set(handles.pushbutton_BeginRecord,'Enable','on')
        end
    elseif strcmp(handles.CalibType, 'RealTime') ==1
        set(handles.radiobuttonCalculationAcuz, 'Enable','on');
        set(handles.radiobuttonCalculationAcuz, 'Value',0);
        set(handles.radiobuttonCalculationRealTime, 'Enable','on');
        set(handles.radiobuttonCalculationRealTime, 'Value',1);
        set(handles.CalculationPlayStopBBSignal, 'Visible','on');
        set(handles.pushbutton_BeginRecord, 'Visible','on');
        set(handles.pushbutton_BeginRecord, 'Enable','on');
        set(handles.CalculationStop, 'Visible','on');
        set(handles.CalculationPlayStopBBSignal, 'Enable','on');
        set(handles.CalculationStop, 'Enable','on');
        set(handles.radiobuttonCalibAcuz, 'Value', 0);
        set(handles.radiobuttonCalibRealTime, 'Value', 1);
%         set(handles.PannelCalibType, 'UserData',1)
        if strcmp(handles.OutputType, 'Pipe') ==1
            set(handles.radiobuttonCalculationAcuz, 'Enable','on');
            set(handles.radiobuttonPipe, 'Value', 1);
            set(handles.PannelOutputType, 'UserData',1)
        else
            set(handles.radiobuttonCalculationAcuz, 'Enable','on');
            set(handles.radiobuttonLoudSpeaker, 'Value', 1);
            set(handles.PannelOutputType, 'UserData',0);
        end
    end
    guidata(hObject, handles);
    UpdateInfosCalibrationLoadingCalib(handles)
    guidata(hObject, handles);
    
    
    %plot the calib curve
    axes(handles.Calibration);
    plot(handles.Calibration, handles.absc , 20*log10(abs(handles.Zref(handles.harmLo+1:handles.harmHi+1))),'r');
    xlabel(handles.Calibration, 'frequency [Hz]'); ylabel('[dB]');
    xlim(handles.Calibration, [handles.FreqLo handles.FreqHi]);
    
    guidata(hObject, handles);
    
    myicon = imread('GreenCheck2.png');
    msg = msgbox('Your parameters and calibration informations have been correctly updated!', 'Success','custom', myicon);
    pause(1.5)
    close(msg)
    
    jSlider = javax.swing.JSlider(0,handles.nCalib,0)
    javacomponent(jSlider,[handles.AUDIOleft+handles.PCleft-13,...
        handles.AUDIObottom-2*handles.AUDIOheight+handles.PCbottom+21,handles.AUDIOwidth+2*13,26], gcf)
    hjSlider = handle(jSlider, 'CallbackProperties');
    set(hjSlider, 'StateChangedCallback', {@EggSliderCallback, handles});
end

%_________________________________________________________________________
%_____________________________LOAD FILE  _________________________________
%________________Save&Display : Parameters/Calibration/Curves_____________
%_________________________________________________________________________

% --- Executes on button press in pushbutton_BrowseFile.
function pushbutton_BrowseFile_Callback(hObject, eventdata, handles)

% set(handles.PannelCurves, 'Units', 'pixels');
% PCposition =get(handles.PannelCurves, 'Position')
% handles.PCleft = PCposition(1); handles.PCbottom = PCposition(2);
% set(handles.Audio, 'Units', 'pixels');
% AUDIOposition =get(handles.Audio, 'Position')
% handles.AUDIOleft = AUDIOposition(1); handles.AUDIObottom =AUDIOposition(2);
% handles.AUDIOwidth= AUDIOposition(3); handles.AUDIOheight = AUDIOposition(4);

global Is_SavedCurve_Checked SavedCurvesNumber ColorNumber ...
    SavedplotRawDataNumber SavedplotFilteredDataNumber SavedCurves...
    IsAcquiring

% set(handles.pushbutton_HP_on_Browse,'Enable','on')
% set(handles.pushbutton_HP_off_Browse,'Enable','on')


[filename_sound,path] = uigetfile('*.*', 'Select the Acuz .wav file or the RealTime .mat soundfile');
% filename_sound
% class(filename_sound)
if filename_sound~=0
    %display('Soundfile selected.');
    
    
    global hjRangeSlider h zoomZ;
    
    if strcmp(filename_sound(end-3:end), '.mat')==0
        filename_mat = cat(2,filename_sound(1:end-10),['.mat'])
        
        myicon = imread('GreenCheck2.png');
        msg = msgbox('Merci de choisir le fichier de calibration correspondant!', 'Success','custom', myicon);
        pause(1.5)
        close(msg)
        [filename_calib,path]= uigetfile('.mat');
        
        if filename_calib~=0
            %display('Calibfile selected.')
            if ischar(filename_sound)
                %                 cla(handles.Audio)
                %                 cla(handles.EGG)
                %                 cla(handles.Spectre)
                %                 cla(handles.Phase)
                set(handles.text_ValNbAverage_Browse, 'String', '1')
                WaitbarWindow = waitbar(0,'Please wait...');
                % file type is Acuz
                handles.LoadFileType = 'OLDAcuz';
                
                
                
                for aa=1:SavedCurvesNumber
                    if aa<10
                        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(aa)]);
                        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(aa)]);
                        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(aa)]);
                        set(check_obj, 'Visible', 'off');
                        set(delete_obj, 'Visible', 'off');
                        set(legend_obj, 'Visible', 'off');
                    else
                        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(aa)]);
                        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(aa)]);
                        legend_obj = findobj('Tag', ['checkboxlegend', num2str(aa)]);
                        set(check_obj, 'Visible', 'off');
                        set(delete_obj, 'Visible', 'off');
                        set(legend_obj, 'Visible', 'off');
                    end
                end
                
                handles.Is_SavedCurve_Checked = zeros(1, 20);
                Is_SavedCurve_Checked = zeros(1, 20);
                SavedCurvesNumber = 0;
                ColorNumber = 0;
                SavedplotRawDataNumber =0;
                SavedplotFilteredDataNumber = 0;
                SavedCurves.plotRawData = {};
                SavedCurves.plotFilteredData = {};
                IsAcquiring =0;
                %                 set(handles.radiobuttonAcuz, 'FontSize', 18);
                %                 set(handles.radiobuttonAcuz, 'FontWeight', 'bold');
                %                 set(handles.radiobuttonAcuz, 'ForegroundColor',handles.MainPannelTextColorAcuz);
                %                 set(handles.radiobuttonAcuz, 'Value', 1);
                %                 %......RealTime
                %                 set(handles.radiobuttonRealTime, 'FontSize', 10);
                %                 set(handles.radiobuttonRealTime, 'FontWeight', 'normal');
                %                 set(handles.radiobuttonRealTime, 'ForegroundColor',[ 0 0 0]);
                %                 set(handles.radiobuttonRealTime, 'Value', 0)
                %                 %......Main Pannel
                %                 set(handles.PannelCurves, 'ShadowColor', handles.MainPannelTextColorAcuz);
                %                 set(handles.PannelCurves, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.radiobuttonAcuz, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.radiobuttonRealTime, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.ValT, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.TextTitle, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.PannelChooseDisplay, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.DisplayAllCurves, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.DisplayRawData, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.DisplayFilteredData, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.DisplayDerivUnwrapPhase, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.DisplayMean, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.DisplayDeleteHarmonics, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                %                 set(handles.PannelPlayAndSave, 'BackgroundColor', handles.MainPannelBGColorAcuz);
                
                % concatenate the filename with the path
                fullpathToFile_sound = fullfile(path,filename_sound);
                fullpathToFile_mat = fullfile(path,filename_mat);
                % save the full path to handles
                handles.myfile_sound = fullpathToFile_sound;
                handles.myfile_mat = fullpathToFile_mat;
                
                waitbar(1/3, WaitbarWindow);
                
                handles.LoadFile = 1;
                handles.LoadCalib = 1;
                handles.DataAquired = 0;
                handles.StartNewCalib = 0;
                set(handles.SaveSelection, 'Visible', 'on');
                set(handles.SaveSelection, 'Enable', 'on');
                
                fullpathToFile_calib= fullfile(path,filename_calib);
                handles.myfile_calib = fullpathToFile_calib;
                handles.SaveName = filename_calib(1:end-4);
                CalibData = importdata(handles.myfile_calib);
                handles.CalibSource = CalibData.CalibSource;
                handles.nCalib = length(handles.CalibSource);
                PARAMS = CalibData.PARAMS;
                handles.PARAMS = PARAMS;
                handles.Zref = CalibData.Zref;
                handles.IndStartStopNoise = [0;19];
                
                
                set(handles.PannelPlayAndSave, 'Visible', 'on');
                set(handles.PlaySelection, 'Visible', 'on');
                set(handles.PlaySelection, 'Enable', 'on');
                set(handles.SaveSelection, 'Visible', 'on');
                set(handles.SaveSelection, 'Enable', 'on');
                set(handles.PannelPlayAndSave, 'Units', 'pixels');
                posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
                posPlayAndSave(1) = handles.AUDIOleft+handles.PCleft;
                set(handles.PannelPlayAndSave, 'Position',posPlayAndSave);
                
                
                %import data
                TimeSignal = importdata(handles.myfile_sound);
                load(fullpathToFile_mat)
                
                %associate data to handles
                handles.s = TimeSignal.data * sqrt(2) / PARAMS.transduct; % Units P
                % % %                 handles.s = handles.s/max(abs(handles.s)); %s normalise
                handles.Fs = TimeSignal.fs;
                handles.t = linspace(0,(length(handles.s)-1)/handles.Fs, length(handles.s));
                handles.Min_s = min(handles.s);
                handles.Max_s = max(handles.s);
                handles.tmax = roundn(max(handles.t),-1);
                handles.harmLo = PARAMS.harmLo;
                handles.harmHi = PARAMS.harmHi;
                handles.absc = PARAMS.absc;
                handles.FreqLo = PARAMS.freqLo;
                handles.FreqHi = PARAMS.freqHi;
                handles.NbCycle = PARAMS.numCycles;
                handles.transduc = PARAMS.transduct;
                handles.NbBits = PARAMS.bitDepth;
                handles.SavePath = path;
                
                
                %a ajouter pour plus tard pour sauver en mode NEWAcuz
                handles.NameCalib = handles.SaveName;
                handles.PathCalib = handles.SavePath;
                handles.CalibType = 'Acuz';
                handles.OutputType = 'Pipe';
                handles.RecordType = 'Acuz';
                handles.df = handles.absc(2)-handles.absc(1);
                % fin des trucs a ajouter
                handles.MinValSlider = 0;
                handles.MaxValSlider = handles.NbCycle+4;
                
                
                % calculate and display
                %[NbCycle, TCycle] = get_info_cycle(handles)
                %
                modf = 2;
                handles.tCalib = (handles.nCalib-1)/handles.Fs; %(length(handles.s)-1)/((handles.NbCycle+2+modf)*handles.Fs)
                Tcycle = (0:handles.tCalib:handles.tmax);
                handles.TCycle = (0:handles.tCalib:1.1*max(handles.t)) ; %linspace(0, max(handles.t), handles.NbCycle+4+1);
                handles.TCycle = handles.TCycle(1:handles.NbCycle+4+1);
                
                waitbar(2/3, WaitbarWindow);
                
                [handles.Z, handles.freqZ] = calculate_Z(handles); %%attention s doit etre en unites Pa
                %     [handles.meanZ, handles.H] = find_H(handles);
                %     [handles.LogScaleImpFilt handles.PhaseFilt]= filtrage(handles);
                
                %     set(handles.slider1,'Value',handles.TCycle(4));
                %     set(handles.slider1, 'Min', handles.TCycle(4));
                %     set(handles.slider1, 'Max', handles.TCycle(end));
                %     slider_step = 1/(handles.NbCycle);
                %     set(handles.slider1, 'SliderStep', [slider_step, slider_step ]);
                
                %     set_slider_parameters(handles)
                set(handles.TextTitle, 'String', filename_sound(3:end-10));
                axes(handles.Audio);
                plot(handles.Audio, handles.t,handles.s,'b');
                axis([0 handles.TCycle(end) min(handles.s) max(handles.s)]);
                hold(handles.Audio, 'on')
                plot(handles.Audio, [handles.TCycle(1) handles.TCycle(1)],[min(handles.s) max(handles.s)], 'r', 'linewidth',2);
                hold(handles.Audio, 'on')
                plot(handles.Audio, [handles.TCycle(2) handles.TCycle(2)],[min(handles.s) max(handles.s)], 'r', 'linewidth',2);
                hold(handles.Audio, 'off')
                
                axes(handles.Calibration)
                plot(handles.Calibration, handles.freqZ, 20*log10(abs(handles.Zref)),'r');
                xlabel('frequency [Hz]'); ylabel('[dB]')
                xlim([handles.FreqLo handles.FreqHi])
                
                
                
                
                %     xmin = 0; handles.xmin = xmin;
                %     xmax = max(handles.t); handles.xmax = xmax;
                %     tLo = xmin + ((xmax-xmin)*(floor(handles.MaxValSlider/2)-1))/(handles.MaxValSlider-handles.MinValSlider);
                %     handles.tLo = tLo;
                %     tHi = xmin + ((xmax-xmin)*(floor(handles.MaxValSlider/2)+1))/(handles.MaxValSlider-handles.MinValSlider);
                %     handles.tHi = tHi;
                %     handles.DELTAx = (xmax - xmin)/handles.NbCycle;
                %                 ax = handles.Audio;
                h = zoom();
                setAxesZoomMotion(h,handles.Audio,'horizontal');
                set(h,'ActionPostCallback',{@ZoomCallbackAcuz, handles})
                h.Enable = 'off';
                
                %     plot([0 0],[handles.Min_s handles.Max_s],'r','linewidth',2); hold on;
                %     plot([handles.DELTAx handles.DELTAx],[handles.Min_s handles.Max_s],'r','linewidth',2); hold off;
                guidata(hObject,handles);
                
                axes(handles.Spectre)
                plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
                hold(handles.Spectre, 'off');
                
                
                axes(handles.Phase)
                plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
                hold(handles.Phase, 'off');
                
                %display new parameters in the GUI
                set(handles.edit_SamplingFrequency,'String',handles.Fs);
                set(handles.edit_NumberOfBits,'String',handles.NbBits);
                set(handles.edit_LowestFrequency,'String',handles.FreqLo);
                set(handles.edit_HighestFrequency,'String',handles.FreqHi);
                set(handles.edit_SavePath,'String',handles.SavePath);
                % set(handles.edit_ValNbAverage_Browse,'String',handles.NbAverageBrowse);
                set(handles.edit_ValNbAverage_Calculate,'String',handles.NbAverageCalculate);
                set(handles.edit_SavePath,'String',handles.SavePath);
                set(handles.edit_SaveName,'String',handles.SaveName);
                set(handles.text_PathCalib,'String',handles.SavePath);
                set(handles.text_NameCalib,'String',handles.SaveName);
                set(handles.edit_ValTransducterSetUp,'String',handles.transduc);
                %legend
                set(handles.DisplayUnwrapPhase, 'String', 'Phase');
                set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Phase) / d(freq)');
                
                set(handles.radiobuttonCalibAcuz, 'Value',1);
                set(handles.radiobuttonCalibRealTime, 'Value',0);
                set(handles.PannelCalibType, 'UserData',0);
                
                set(handles.radiobuttonPipe, 'Value',1);
                set(handles.radiobuttonLoudSpeaker, 'Value',0);
                set(handles.PannelOutputType, 'UserData',1);
                
                set(handles.radiobuttonCalculationAcuz, 'Enable','on');
                set(handles.radiobuttonCalculationAcuz, 'Value',1);
                set(handles.radiobuttonCalculationRealTime, 'Value',0);
                
                
                set(handles.pushbutton_BeginRecord, 'Enable', 'on');
                set(handles.CalculationPlayStopBBSignal, 'Visible', 'off');
                set(handles.CalculationStop, 'Visible', 'off');
                
                waitbar(9/10, WaitbarWindow);
                
                jRangeSlider = com.jidesoft.swing.RangeSlider(handles.MinValSlider,handles.MaxValSlider,0,1);
                %     jRangeSlider = javacomponent(jRangeSlider, [67+13-13,591+53+32+5,731+2*13,26], gcf)
                jRangeSlider = javacomponent(jRangeSlider, [handles.AUDIOleft+handles.PCleft-13,...
                    handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf);
                %                 [colorR, colorG, colorB] = getRGBcolorSlider(handles)
                set(jRangeSlider,'PaintTicks',false, 'PaintLabels',false);%, 'Background', java.awt.Color(colorR, colorG, colorB))
                hjRangeSlider = handle(jRangeSlider, 'CallbackProperties');
                set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackAcuz, handles});
                
                waitbar(3/3, WaitbarWindow);
                pause(0.3);
                close(WaitbarWindow);
                
                myicon = imread('GreenCheck2.png');
                msg = msgbox('Your files were downloaded and parameters updated.', 'Success','custom', myicon);
                pause(1.5)
                close(msg)
                
            end
        else
            %display('No Calibfile selected.')
            myicon = imread('ErrorIcon.png');
            msg = msgbox('No calibration file selected.', 'Error','custom', myicon);
            pause(1)
            close(msg)
        end
    else
        if ischar(filename_sound)
            
            WaitbarWindow = waitbar(0,'Please wait...');
            %         cla(handles.Audio)
            %         cla(handles.EGG)
            %         cla(handles.Spectre)
            %         cla(handles.Phase)
            for aa=1:SavedCurvesNumber
                if aa<10
                    check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(aa)]);
                    delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(aa)]);
                    legend_obj = findobj('Tag', ['checkboxlegend0', num2str(aa)]);
                    set(legend_obj, 'Visible', 'off');
                    set(check_obj, 'Visible', 'off');
                    set(delete_obj, 'Visible', 'off');
                else
                    check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(aa)]);
                    delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(aa)]);
                    legend_obj = findobj('Tag', ['checkboxlegend', num2str(aa)]);
                    set(check_obj, 'Visible', 'off');
                    set(delete_obj, 'Visible', 'off');
                    set(legend_obj, 'Visible', 'off');
                end
            end
            
            handles.Is_SavedCurve_Checked = zeros(1, 20);
            Is_SavedCurve_Checked = zeros(1, 20);
            SavedCurvesNumber = 0;
            ColorNumber = 0;
            SavedplotRawDataNumber =0;
            SavedplotFilteredDataNumber = 0;
            SavedCurves.plotRawData = {};
            SavedCurves.plotFilteredData = {};
            IsAcquiring=0;
            handles.LoadFile = 1;
            handles.LoadCalib=1;
            handles.DataAquired = 0;
            handles.StartNewCalib = 0;
            set(handles.SaveSelection, 'Visible', 'on');
            set(handles.SaveSelection, 'Enable', 'on');
            
            waitbar(1/3, WaitbarWindow);
            % file type is Realtime
            handles.LoadFileType = 'NEWAcuz';
            %         %......RealTime
            %         set(handles.radiobuttonRealTime, 'Value', 1);
            %         set(handles.radiobuttonRealTime, 'FontSize', 18);
            %         set(handles.radiobuttonRealTime, 'FontWeight', 'normal');
            %         set(handles.radiobuttonRealTime, 'ForegroundColor',handles.MainPannelTextColorRealTime);
            %         %......Acuz
            %         set(handles.radiobuttonAcuz, 'FontSize', 10);
            %         set(handles.radiobuttonAcuz, 'FontWeight', 'normal');
            %         set(handles.radiobuttonAcuz, 'ForegroundColor',[ 0 0 0]);
            %         %......Main Pannel
            %         set(handles.PannelCurves, 'ShadowColor', handles.MainPannelTextColorRealTime);
            %         set(handles.PannelCurves, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.radiobuttonAcuz, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.radiobuttonRealTime, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.ValT, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.TextTitle, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.PannelChooseDisplay, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.DisplayAllCurves, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.DisplayRawData, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.DisplayFilteredData, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.DisplayDerivUnwrapPhase, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.DisplayMean, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.DisplayDeleteHarmonics, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            %         set(handles.PannelPlayAndSave, 'BackgroundColor', handles.MainPannelBGColorRealTime);
            
            
            % concatenate the filename with the path
            fullpathToFile_sound = fullfile(path,filename_sound);
            % save the full path to handles
            handles.myfile_sound = fullpathToFile_sound;
            %import data
            data = importdata(handles.myfile_sound);
            PARAMS = data.PARAMS;
            handles.PARAMS = PARAMS;
            
            
            
            %associate data to handles
            s = data.SoundFile(:,1)* sqrt(2) / PARAMS.transduct; % Units P
            egg = data.SoundFile(:,2);
            %             acc = data.SoundFile(:,3); % NH edit to add accelerometer
            handles.CalibSource = data.CalibSource;
            handles.nCalib = length(handles.CalibSource);
            handles.NbCycle = floor(length(s)/handles.nCalib);
            indexCUT = handles.NbCycle *handles.nCalib;
            handles.s = s(1:indexCUT); % Units P
            handles.egg = egg(1:indexCUT);
            %             handles.acc = acc(1:indexCUT); % NH edit
            handles.Fs = PARAMS.samplingFreq;
            handles.Zref = data.Zref;
            handles.t = linspace(0,(length(handles.s)-1)/handles.Fs, length(handles.s));
            handles.Min_s = min(handles.s);
            handles.Max_s = max(handles.s);
            handles.tmax = roundn(max(handles.t),-1);
            handles.harmLo = PARAMS.harmLo;
            handles.harmHi = PARAMS.harmHi;
            handles.absc = PARAMS.absc;
            handles.df = handles.absc(2)-handles.absc(1);
            handles.FreqLo = PARAMS.freqLo;
            handles.FreqHi = PARAMS.freqHi;
            handles.transduc = PARAMS.transduct;
            handles.NbBits = PARAMS.bitDepth;
            handles.NameCalib = PARAMS.NameCalibFile;
            handles.PathCalib = PARAMS.NameCalibPath;
            handles.SaveName = PARAMS.NameParamFile;
            handles.SavePath = path;
            handles.CalibType = PARAMS.CalibType;
            handles.OutputType = PARAMS.OutputType;
            handles.RecordType = PARAMS.RecordType;
            handles.IndStartStopNoise = PARAMS.IndStartStopNoise;
            
            handles.CalibSource = data.CalibSource;
            
            
            waitbar(2/3, WaitbarWindow);
            
            %calculate and display
            handles.NbCycle = floor(length(handles.s)/handles.nCalib);
            handles.tCalib = length(handles.s)/((handles.NbCycle)*handles.Fs);
            handles.TCycle = linspace(min(handles.t),max(handles.t), handles.NbCycle+1);
            lengthTCycle = length(handles.TCycle);
            [handles.Z, handles.freqZ] = calculate_Z(handles);
            guidata(hObject,handles);
            NEWfunction_plot(handles);
            
            handles.xmin = min(handles.t);
            handles.xmax = max(handles.t);
            handles.tLo = 0;
            handles.tHi = handles.TCycle(2);
            handles.DELTAx = (handles.xmax - handles.xmin)/handles.NbCycle;
            
            %             ax = handles.Audio;
            h = zoom();
            setAxesZoomMotion(h,handles.Audio,'horizontal');
            set(h,'ActionPostCallback',{@ZoomCallbackRealTimeNEW, handles});
            guidata(hObject,handles);
            
            hold(handles.Audio, 'off')
            plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
            hold(handles.Audio, 'on')
            
            hold(handles.EGG, 'off')
            plot(handles.EGG, handles.t,handles.egg, 'color', [0.3 0.3 0.3]);
            hold(handles.EGG, 'on')
            
            if size(handles.IndStartStopNoise,2)~=0
                
                for ii = 1:size(handles.IndStartStopNoise,2)
                    % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                    % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                    t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    egg_Noise_Undefined1 = handles.egg(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                    plot(handles.EGG, t_Noise_Undefined1, egg_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                    
                    if handles.IndStartStopNoise(1,1)==0
                        if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                            t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            egg_Noise = handles.egg(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            plot(handles.Audio, t_Noise, s_Noise , 'b');
                            plot(handles.EGG, t_Noise, egg_Noise , 'b');
                            
                            t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            egg_Noise_Undefined2 = handles.egg(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                            plot(handles.EGG, t_Noise_Undefined2, egg_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                        else
                            plot(handles.Audio, handles.t,handles.s, 'b');
                            plot(handles.EGG, handles.t,handles.egg, 'b');
                        end
                    end
                    if handles.IndStartStopNoise(2,ii)*handles.nCalib<length(handles.s)
                        
                        t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        egg_Noise = handles.egg(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        plot(handles.EGG, t_Noise, egg_Noise , 'b');
                        
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        egg_Noise_Undefined2 = handles.egg(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                        plot(handles.EGG, t_Noise_Undefined2, egg_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    else
                        t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        egg_Noise = handles.egg(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        plot(handles.EGG, t_Noise, egg_Noise , 'b');
                    end
                end
                
            end
            xlim(handles.Audio, [handles.t(1) handles.t(end)])
            YLimAudio = [-max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))...
                max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))];
            ylim(handles.Audio, YLimAudio)
            hold(handles.Audio, 'off');
            
            xlim(handles.EGG, [handles.t(1) handles.t(end)])
            ylim(handles.EGG, [min(handles.egg) max(handles.egg)])
            hold(handles.EGG, 'off');
            
            axes(handles.Spectre);
            plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
            hold(handles.Spectre, 'off');
            
            
            axes(handles.Phase);
            plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
            hold(handles.Phase, 'off');
            
            
            
            
            %display new parameters in the GUI
            
            if strcmp(handles.CalibType, 'Acuz') ==1
                set(handles.radiobuttonCalibAcuz, 'Value',1)
                set(handles.radiobuttonCalibRealTime, 'Value',0)
                set(handles.PannelCalibType, 'UserData',0)
            elseif strcmp(handles.CalibType, 'RealTime') ==1
                set(handles.radiobuttonCalibAcuz, 'Value',0)
                set(handles.radiobuttonCalibRealTime, 'Value',1)
                set(handles.PannelCalibType, 'UserData',1)
                if strcmp(handles.OutputType, 'Pipe')==1
                    set(handles.radiobuttonCalculationAcuz,'Enable','on');
                    set(handles.radiobuttonPipe, 'Value',1)
                    set(handles.radiobuttonLoudSpeaker, 'Value',0)
                    set(handles.PannelOutputType, 'UserData',1)
                elseif strcmp(handles.OutputType, 'LoudSpeaker')==1
                    set(handles.radiobuttonCalculationAcuz,'Enable','off');
                    set(handles.radiobuttonPipe, 'Value',0)
                    set(handles.radiobuttonLoudSpeaker, 'Value',1)
                    set(handles.PannelOutputType, 'UserData',0)
                end
            end
            if strcmp(handles.RecordType , 'Acuz') ==1
                set(handles.radiobuttonCalculationAcuz, 'Value',1)
                set(handles.radiobuttonCalculationRealTime, 'Value',0)
                set(handles.pushbutton_BeginRecord, 'Enable', 'on')
                set(handles.CalculationPlayStopBBSignal, 'Visible', 'off');
                set(handles.CalculationStop, 'Visible', 'off');
                set(handles.CalculationPlayStopBBSignal, 'Enable', 'on');
                set(handles.CalculationStop, 'Enable', 'on');
                %legend
                set(handles.DisplayUnwrapPhase, 'String', 'Phase');
                set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Phase) / d(freq)');
            elseif strcmp(handles.RecordType , 'RealTime') ==1
                set(handles.radiobuttonCalculationAcuz, 'Value',0)
                set(handles.radiobuttonCalculationRealTime, 'Value',1)
                set(handles.pushbutton_BeginRecord, 'Enable', 'on')
                set(handles.CalculationPlayStopBBSignal, 'Visible', 'on');
                set(handles.CalculationStop, 'Visible', 'on');
                set(handles.CalculationPlayStopBBSignal, 'Enable', 'on');
                set(handles.CalculationStop, 'Enable', 'on');
                %legend
                set(handles.DisplayUnwrapPhase, 'String', 'Unwrap(Phase)');
                set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Unwrap(Phase)) / d(freq)');
            end
            
            
            set(handles.edit_SamplingFrequency,'String',handles.Fs);
            set(handles.edit_NumberOfBits,'String',handles.NbBits);
            set(handles.edit_LowestFrequency,'String',handles.FreqLo);
            set(handles.edit_HighestFrequency,'String',handles.FreqHi);
            set(handles.edit_SavePath,'String',handles.SavePath);
            set(handles.edit_ValNbAverage_Calculate,'String',handles.NbAverageCalculate);
            set(handles.edit_SavePath,'String',handles.SavePath);
            set(handles.edit_SaveName,'String',handles.SaveName);
            set(handles.text_PathCalib,'String',handles.PathCalib);
            set(handles.text_NameCalib,'String',handles.NameCalib);
            set(handles.edit_ValTransducterSetUp,'String',handles.transduc);
            
            
            set(handles.PannelPlayAndSave, 'Visible', 'on');
            set(handles.PlaySelection, 'Visible', 'on');
            set(handles.PlaySelection, 'Enable', 'on');
            set(handles.SaveSelection, 'Visible', 'on');
            set(handles.SaveSelection, 'Enable', 'on');
            posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
            posPlayAndSave(1) = handles.AUDIOleft+handles.PCleft;
            set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
            
            waitbar(9/10, WaitbarWindow);
            
            handles.MinValSlider = 0;
            handles.MaxValSlider = handles.NbCycle;
            jRangeSlider = com.jidesoft.swing.RangeSlider(handles.MinValSlider,handles.MaxValSlider,handles.MinValSlider,handles.MaxValSlider);
            jRangeSlider = javacomponent(jRangeSlider, [handles.AUDIOleft+handles.PCleft-13,...
                handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf);
            %             [colorR, colorG, colorB] = getRGBcolorSlider(handles)
            set(jRangeSlider,'PaintTicks',false, 'PaintLabels',false);%, 'Background', java.awt.Color(colorR, colorG, colorB))
            hjRangeSlider = handle(jRangeSlider);
            %         set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackRealTime, handles});
            %             set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackRealTimeNEW, handles});
            set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackRealTimeNEW2, handles});
            
            waitbar(3/3, WaitbarWindow);
            pause(0.3);
            close(WaitbarWindow);
            
            myicon = imread('GreenCheck2.png');
            msg = msgbox('Your file was downloaded and parameters updated.', 'Success','custom', myicon);
            pause(1.5)
            close(msg)
            
        end
    end
    
    
    %     %display new parameters in the GUI
    %     set(handles.edit_SamplingFrequency,'String',handles.Fs);
    %     set(handles.edit_NumberOfBits,'String',handles.NbBits);
    %     set(handles.edit_LowestFrequency,'String',handles.FreqLo);
    %     set(handles.edit_HighestFrequency,'String',handles.FreqHi);
    %     set(handles.edit_SavePath,'String',handles.SavePath);
    %     % set(handles.edit_ValNbAverage_Browse,'String',handles.NbAverageBrowse);
    %     set(handles.edit_ValNbAverage_Calculate,'String',handles.NbAverageCalculate);
    %     set(handles.edit_SavePath,'String',handles.SavePath);
    %     set(handles.edit_SaveName,'String',handles.SaveName);
    %     set(handles.edit_ValTransducterSetUp,'String',handles.transduc);
else
    %display('No soundfile selected.')
end

guidata(hObject, handles);

% --- Executes on mouse press over axes background.
function Audio_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to Audio (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
ax = gca;
tag = get(ax, 'Tag');

if strcmp(tag, 'Audio') ==1 & handles.LoadFile~= 0 & strcmp(handles.LoadFileType,'NEWAcuz')==1
    coord = double(get(hObject, 'CurrentPoint'));
    x = coord(1,1);
    format long;
    xi = (0:handles.nCalib/handles.Fs:round(max(handles.t),1));
    [~,indxcenter] = min(abs(x*ones(1, length(xi))-xi));
    xcenter=(xi(indxcenter));
    if indxcenter>11
        xmin = xi(indxcenter-11);
    else
        xmin= xi(1);
        indxcenter = 12;
    end
    if length(xi) >= indxcenter+11
        xmax = xi(indxcenter+11);
    else
        xmax = xi(end);
        xmin = xi(end-22);
    end
    xlim(handles.Audio, [xmin, xmax]);
    set(handles.Audio, 'Tag', 'Audio');
end
guidata(hObject, handles);

% --- Executes on mouse press over axes background.
function Spectre_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to Audio (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --- Executes on key press with focus on figure1 and none of its controls.
function figure1_KeyPressFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  structure with the following fields (see MATLAB.UI.FIGURE)
%	Key: name of the key that was pressed, in lower case
%	Character: character interpretation of the key(s) that was pressed
%	Modifier: name(s) of the modifier key(s) (i.e., control, shift) pressed
% handles    structure with handles and user data (see GUIDATA)

if handles.LoadFile ==1 & strcmp(handles.LoadFileType, 'NEWAcuz')==1
    
    %get the current key press character and convert to code
    keycode = double(get(handles.figure1, 'CurrentCharacter'));
    %     if isequal([handles.xmin handles.xmax], [0 max(handles.t)]) == 0
    if keycode == 29 %next periods
        oldLim = double(get(handles.Audio, 'XLim'));
        oldxmin = oldLim(1); oldxmax = oldLim(2);
        newxmin = oldxmin + 11*handles.nCalib/handles.Fs;
        newxmax = oldxmax + 11*handles.nCalib/handles.Fs;
        if newxmax>max(handles.t)
            newxmax = max(handles.t);
            newxmin = newxmax - 22*handles.nCalib/handles.Fs;
        end
        xlim(handles.Audio, [newxmin newxmax]);
    elseif keycode ==28 %previous periods
        oldLim = double(get(handles.Audio, 'XLim'));
        oldxmin = oldLim(1); oldxmax = oldLim(2);
        newxmin = oldxmin - 11*handles.nCalib/handles.Fs;
        newxmax = oldxmax - 11*handles.nCalib/handles.Fs;
        if newxmin<0
            newxmin = 0;
            newxmax = newxmin + 22*handles.nCalib/handles.Fs;
        end
        xlim(handles.Audio, [newxmin newxmax]);
    end
end
guidata(hObject, handles)



function ZoomCallbackAcuz(obj,evd, handles)

global XLimSpectrum StopRecordPushed PushedZoomSpectre...
    h hjRangeSlider Is_SavedCurve_Checked

ax = evd.Axes;
tagNEW = get(ax, 'Tag');
% display('ZoomCallbackAcuz')
XLimSpectrum = get(ax, 'XLim');
PushedZoomSpectre=0;

XLim = get(handles.Spectre, 'XLim');
set(handles.AxesClefs, 'Units', 'Pixels');
posFreq = get(handles.AxesClefs, 'Position');
axes(handles.AxesBassClef)
set(handles.AxesBassClef, 'Units', 'Pixels');
pos = get(handles.AxesBassClef, 'Position');
pos(3) = 25;
pos(4) = 27;
pos(1) =posFreq(1) + posFreq(3)/(XLim(2)-XLim(1))*((98+220)/2-XLim(1))-pos(3)/2;
if pos(1)>= posFreq(1) + posFreq(3) -pos(3)/2
    set(handles.AxesBassClef, 'Visible', 'off')
else
    set(handles.AxesBassClef, 'Visible', 'on')
end
set(handles.AxesBassClef, 'Position', pos)
imshow(get(handles.pictureBassClef, 'CData'));

axes(handles.AxesTrebbleClef_1)
set(handles.AxesTrebbleClef_1, 'Units', 'Pixels');
pos = get(handles.AxesTrebbleClef_1, 'Position');
pos(3) = 16;
pos(4) = 39;
pos(1) =posFreq(1) + posFreq(3)/(XLim(2)-XLim(1))*((330+698.5)/2-XLim(1))-pos(3);
if pos(1)>= posFreq(1) + posFreq(3) -pos(3)/2
    set(handles.AxesTrebbleClef_1, 'Visible', 'off')
else
    set(handles.AxesTrebbleClef_1, 'Visible', 'on')
end
set(handles.AxesTrebbleClef_1, 'Position', pos)
imshow(get(handles.pictureTrebbleClef, 'CData'))

axes(handles.AxesTwoTrebbleClefs)
set(handles.AxesTwoTrebbleClefs, 'Units', 'Pixels');
pos = get(handles.AxesTwoTrebbleClefs, 'Position');
pos(3) = 31;
pos(4) = 38;
pos(1) =posFreq(1) + posFreq(3)/(XLim(2)-XLim(1))*((1318.5 +2794)/2-XLim(1))-pos(3)/2;
if pos(1)>= posFreq(1) + posFreq(3) -pos(3)/2
    set(handles.AxesTwoTrebbleClefs, 'Visible', 'off')
else
    set(handles.AxesTwoTrebbleClefs, 'Visible', 'on')
end
set(handles.AxesTwoTrebbleClefs, 'Position', pos)
imshow(get(handles.pictureTwoTrebbleClefs, 'CData'))

if StopRecordPushed==1
    %     strcmp(tagNEW, 'Audio')
    %     strcmp(tagNEW, 'EGG')
    if strcmp(tagNEW, 'Audio')==0 & strcmp(tagNEW, 'EGG')==0
        
        display('Zoom sur un des spectres')
        PushedZoomSpectre =1
        %         if length(find(Is_SavedCurve_Checked))
        
        set(handles.Audio,'Tag','Audio');
        set(handles.Spectre,'Tag','Spectre');
        set(handles.Phase,'Tag','Phase');
        [PlottedCurves]= DisplayChosenCurvesNEW(handles);
        PushedZoomSpectre =0
        %         hSpectre = zoom(handles.Spectre);
        %         set(hSpectre,'ActionPostCallback',{@ZoomCallbackSpectre, handles}) ;
        YLim = get(handles.Spectre, 'YLim');
        %         set(handles.Audio,'Tag','Audio');
        %         set(handles.Spectre,'Tag','Spectre');
        %         set(handles.Phase,'Tag','Phase');
        
    elseif strcmp(tagNEW, 'Audio')==1
        
        dir = get(h, 'Direction');
        isDirOut = strcmp(dir, 'out')
        
        ValLo = get(hjRangeSlider,'LowValue')
        ValHi = get(hjRangeSlider,'HighValue')
        
        
        if isDirOut ==1
            
            
            %         plot(handles.Audio, handles.t,handles.s,'color', [0.3 0.3 0.3]);
            hold(handles.Audio, 'on');
            plot(handles.Audio, handles.t,handles.s,'b');
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(ValLo+1) handles.TCycle(ValLo+1)],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
            plot(handles.Audio, [handles.TCycle(ValHi+1) handles.TCycle(ValHi+1)],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
            hold(handles.Audio, 'off');
            xlim(handles.Audio, [0 handles.TCycle(end)]);
            ylim(handles.Audio, [min(handles.s) max(handles.s)]);
            
            ValMin = handles.AUDIOleft+handles.PCleft-13;
            width = handles.AUDIOwidth+2*13;
            ValMax = ValMin+width;
            NbAvg = ValHi-ValLo;
            if NbAvg >=1
                maxValSlider = 20;
                minValSlider = 0;
                pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13;
                set(handles.PannelPlayAndSave, 'Units', 'pixels');
                posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
                if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
                    posPlayAndSave(1) = pos;
                else
                    posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
                end
                set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
                %             set(handles.PannelPlayAndSave, 'Position', [pos 755 85 47]);
                set(handles.PannelPlayAndSave, 'Visible', 'on')
            else
                set(handles.PannelPlayAndSave, 'Visible', 'off')
            end
            
            jRangeSlider2 = com.jidesoft.swing.RangeSlider(0,20,ValLo,ValHi);
            jRangeSlider2 = javacomponent(jRangeSlider2, [handles.AUDIOleft+handles.PCleft-13,...
                handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf);
            %         [colorR, colorG, colorB] = getRGBcolorSlider(handles);
            set(jRangeSlider2,'PaintTicks',false, 'PaintLabels',false);%, 'Background', java.awt.Color(colorR, colorG, colorB))
            hjRangeSlider = handle(jRangeSlider2, 'CallbackProperties');
            set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackAcuz, handles});
            set(ax, 'Tag', 'Audio')
            %         guidata(hObject,handles);
            
        else
            
            XLim = double(get(handles.Audio, 'XLim'));
            xmin = XLim(1);
            xmax = XLim(2);
            [~,indmin] = min(abs(handles.TCycle-xmin));
            xmin = handles.TCycle(indmin);
            [~,indmax] = min(abs(handles.TCycle-xmax));
            xmax = handles.TCycle(indmax);
            if xmin <0
                xmin =0;
            end
            if xmax>= handles.TCycle(end)
                xmax = handles.TCycle(end);
            end
            if xmin>handles.TCycle(ValLo+1)
                xmin = handles.TCycle(ValLo+1);
            end
            if xmax<handles.TCycle(ValHi+1)
                xmax = handles.TCycle(ValHi+1);
            end
            [~,indmin] = min(abs(handles.TCycle-xmin));
            [~,indmax] = min(abs(handles.TCycle-xmax));
            
            
            ValLo = get(hjRangeSlider,'LowValue');
            ValHi = get(hjRangeSlider,'HighValue');
            
            %         plot(handles.Audio, handles.t,handles.s,'color', [0.3 0.3 0.3]);
            hold(handles.Audio, 'on')
            plot(handles.Audio, handles.t,handles.s,'b');
            hold(handles.Audio, 'on')
            plot(handles.Audio, [handles.TCycle(ValLo+1) handles.TCycle(ValLo+1)],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
            plot(handles.Audio, [handles.TCycle(ValHi+1) handles.TCycle(ValHi+1)],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
            xlim(handles.Audio, [handles.TCycle(indmin) handles.TCycle(indmax)]);
            ylim(handles.Audio, [min(handles.s) max(handles.s)]);
            hold(handles.Audio, 'off')
            
            ValMin = handles.AUDIOleft+handles.PCleft-13;
            width = handles.AUDIOwidth+2*13;
            ValMax = ValMin+width;
            NbAvg = ValHi-ValLo;
            if NbAvg >=1
                maxValSlider = indmax-1;
                minValSlider = indmin-1;
                pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13;
                set(handles.PannelPlayAndSave, 'Units', 'pixels');
                posPlayAndSave = get(handles.PannelPlayAndSave, 'Position')
                if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
                    posPlayAndSave(1) = pos;
                else
                    posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
                end
                set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
                %             set(handles.PannelPlayAndSave, 'Position', [pos 755 85 47]);
                set(handles.PannelPlayAndSave, 'Visible', 'on')
            else
                set(handles.PannelPlayAndSave, 'Visible', 'off')
            end
            
            jRangeSlider2 = com.jidesoft.swing.RangeSlider(indmin-1,indmax-1,ValLo,ValHi);
            test = handles.AUDIOleft
            jRangeSlider2 = javacomponent(jRangeSlider2, [handles.AUDIOleft+handles.PCleft-13,...
                handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf);
            %         [colorR, colorG, colorB] = getRGBcolorSlider(handles);
            set(jRangeSlider2,'PaintTicks',false, 'PaintLabels',false);%, 'Background', java.awt.Color(colorR, colorG, colorB))
            hjRangeSlider = handle(jRangeSlider2, 'CallbackProperties');
            set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackAcuz, handles});
            %         guidata(hObject, handles);
        end
        
        
        set(handles.Audio,'Tag','Audio');
        set(handles.Spectre,'Tag','Spectre');
        set(handles.Phase,'Tag','Phase');
        
        [PlottedCurves]= DisplayChosenCurvesNEW(handles);
        
    end
end

h = zoom();
setAxesZoomMotion(h,handles.Audio,'horizontal');
set(h,'ActionPostCallback',{@ZoomCallbackAcuz, handles})

set(handles.Audio,'Tag','Audio');
set(handles.EGG,'Tag','EGG');
set(handles.Spectre,'Tag','Spectre');
set(handles.Phase,'Tag','Phase');
set(handles.AxesAnalyse,'Tag','AxesAnalyse');

function DoubleCursorCallbackAcuz(hObject,eventdata, handles)

global hjRangeSlider h
set(handles.Audio,'Tag','Audio');
set(handles.Spectre,'Tag','Spectre');
set(handles.Phase,'Tag','Phase');

valueAdjusting = getValueIsAdjusting(hjRangeSlider);
if valueAdjusting==0
    
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    indLo = ValLo-2;
    indHi = ValHi-2;
    NbAvg = indHi-indLo;
    
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    
    XLimZ = double(get(handles.Spectre, 'XLim'))
    xminZ = XLimZ(1); xmaxZ = XLimZ(2);
    
    tLo = handles.TCycle(ValLo+1)
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1)
    handles.tHi = tHi;
    
    axes(handles.Audio);
    plot(handles.Audio, handles.t,handles.s,'b');
    
    % ax = handles.Audio;
    h = zoom();
    setAxesZoomMotion(h,handles.Audio,'horizontal');
    set(h,'ActionPostCallback',{@ZoomCallbackAcuz, handles});
    h.Enable = 'off';
    
    axis([xmin xmax min(handles.s) max(handles.s)]);
    hold on;
    if ValLo<=2 || ValLo>handles.NbCycle+3
        plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'r','linewidth',2);
    else
        plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    end
    hold on;
    if ValHi<=2|| ValHi>handles.NbCycle+3
        plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'r','linewidth',2);
    else
        plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    end
    hold off;
    
    
    [PlottedCurves]= DisplayChosenCurvesNEW(handles)
    
    % if indLo>=1 & indHi >=1 & indLo<handles.NbCycle+2 & indHi<handles.NbCycle+2 & NbAvg>=1
    %
    % set(handles.PannelPlayAndSave, 'Visible', 'on');
    %
    % AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indLo:indLo+NbAvg-1),2)./...
    %         handles.Zref(handles.harmLo+1:handles.harmHi+1)));
    % PhasePlot = 180/pi*angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indLo:indLo+NbAvg-1),2)./...
    %        handles.Zref(handles.harmLo+1:handles.harmHi+1));
    % AmpTot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,:),2)./...
    %         handles.Zref(handles.harmLo+1:handles.harmHi+1)));
    % PhaseTot = 180/pi*angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,:),2)./...
    %        handles.Zref(handles.harmLo+1:handles.harmHi+1));
    % freqZplot = handles.freqZ(handles.harmLo+1:handles.harmHi+1);
    % MeanAmpPlot = mean(AmpPlot);
    % % axes(handles.Spectre);
    % %     plot(freqZplot,AmpPlot-MeanAmpPlot, 'k');
    % %     hold on;
    % %     plot(freqZplot,medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,25),5), 'b');
    % % %     plot(freqZplot,AmpTot, 'b');
    % %     xlabel('f (Hz)')
    % %     ylabel('|S(f)|')
    % % %     axis([handles.FreqLo handles.FreqHi min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)])
    % %     axis([0 handles.FreqHi min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)])
    % %     legend({'20log(|Z/Z_{ref}|)', 'filtred 20log(|Z/Z_{ref}|)' },'FontSize', 11);
    % %     hold off;
    %
    % % disp('plot spectre')
    % [~,indZLo] = min(abs(tLo*ones(1,length(handles.TCycle))-handles.TCycle));
    % [~,indZHi] = min(abs(tHi*ones(1,length(handles.TCycle))-handles.TCycle));
    %
    % axes(handles.Spectre);
    % if get(handles.DisplayRawData, 'Value')==1
    %     plot(handles.Spectre, freqZplot,AmpPlot-MeanAmpPlot, 'k', 'linewidth', 1);
    %     hold(handles.Spectre,'on');
    % end
    % if get(handles.DisplayFilteredData, 'Value')==1
    %     plot(handles.Spectre, freqZplot,medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,25),5), 'b', 'linewidth', 4 );
    %     hold(handles.Spectre,'on');
    % end
    % if get(handles.DisplayAllCurves, 'Value')==1
    %     %display('test ??')
    %     Z_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
    %             repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
    %     plot(handles.Spectre, freqZplot, Z_AllCurves - repmat(mean(Z_AllCurves,2),1, size(Z_AllCurves,2)), 'linewidth', 0.25     )
    %     hold(handles.Spectre,'on');
    % end
    % % if get(handles.DisplayMean, 'Value') ==1
    % %     AbsZ_Mean = 20*log10(mean(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
    % %         repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)),2));
    % %     plot(freqZplot, AbsZ_Mean - mean(AbsZ_Mean),'color',[204 85 0]/255,'linewidth', 3 );
    % % end
    % xlabel('f (Hz)')
    % ylabel('|S(f)|')
    % % axis([handles.FreqLo handles.FreqHi min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)])
    % xlim(handles.Spectre,[xminZ xmaxZ]);
    % ylim(handles.Spectre, [min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)])
    % legend({'20log(|Z/Z_{ref}|)', 'filtred 20log(|Z/Z_{ref}|)' },'FontSize', 11);
    % hold(handles.Spectre,'off');
    %
    %
    % axes(handles.Phase);
    % plot(handles.Phase, freqZplot,PhasePlot, 'k');
    % hold(handles.Phase, 'on');
    % plot(handles.Phase, freqZplot,medfilt1(sgolayfilt(PhasePlot,3,25),5), 'b');
    % %     plot(freqZplot,PhaseTot, 'b');
    % %     axis([handles.FreqLo handles.FreqHi -180 180])
    % xlim(handles.Phase,[xminZ xmaxZ]);
    % legend({'phase(|Z/Z_{ref}|)', 'filtred phase(|Z/Z_{ref}|)' },'FontSize', 11);
    % hold(handles.Phase, 'off');
    %
    %
    %
    % [pks,locs,w,p] = findpeaks(medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,25),5),freqZplot,...
    %         'MinPeakHeight',0.10*max(AmpPlot-MeanAmpPlot), 'WidthReference','halfheight');
    % % [pks,locs,w,p] = findpeaks(Zplot-MeanZplot,freqZ,...
    % %         'MinPeakHeight',(1-0.25)*max(Zplot)); %, 'SortStr', 'descend'
    % name_pks = cat(2,'pks', num2str(i));
    % name_locs = cat(2,'locs', num2str(i));
    % %name_w = cat(2,'w', num2str(i));
    % %name_p = cat(2,'p', num2str(i));
    % findH.name_pks = pks;
    % findH.name_locs = locs;
    % findH.name_w = w;
    % findH.name_p = p;
    % % [~,indH1] = max(pks);
    % % findH.indH = indH1;
    % indH1 = 1;
    % findH.freqH1 = locs(indH1);
    % findH.widthH1 = w(indH1);
    % [Eps, indEps] = min(abs(2*findH.freqH1*ones(1,length(findH.name_locs))-...
    % findH.name_locs));
    % findH.freqH2 = findH.name_locs(indEps);
    % findH.widthH2 = w(indEps);
    % findH
    %
    % axes(handles.Analyse);
    %     plot([0 10], [0 0], 'k'); hold on;
    %     plot([0 10], [2 2], 'k');
    %     plot([0 10], [4 4], 'k');
    %     plot([0 10], [6 6], '-k');
    %     plot([0 10], [8 8], '-k');
    %     plot([0 10], [14 14], 'k');
    %     plot([0 10], [16 16], 'k');
    %     plot([0 10], [18 18], 'k');
    %     plot([0 10], [20 20], 'k');
    %     plot([0 10], [22 22], 'k');
    %     axis([ 0 10 -3 25])
    % %     set(handles.ValH1,'String',round(mean(handles.H(1,indLo:indLo+NbAvg-1)),0));
    % %     set(handles.ValH2,'String',round(mean(handles.H(2,indLo:indLo+NbAvg-1)),0));
    % %     frequence2positionAcuz(mean(handles.H(1,indLo:indLo+NbAvg-1)), handles.Analyse,'.r');
    % %     frequence2positionAcuz(mean(handles.H(2,indLo:indLo+NbAvg-1)),handles.Analyse,'.g');
    %     grid off
    %     axis off
    %     hold(handles.Analyse, 'off');
    % else
    %     set(handles.PannelPlayAndSave, 'Visible', 'off');
    %
    %     axes(handles.Spectre)
    %     plot(handles.Spectre, [xminZ xmaxZ], [0 0], 'w');
    %     hold(handles.Spectre, 'off');
    %
    %
    %     axes(handles.Phase)
    %     plot(handles.Phase, [xminZ xmaxZ], [0 0], 'w');
    %     hold(handles.Phase, 'off');
    % end
    
    ValMin = handles.AUDIOleft+handles.PCleft-13;
    width = handles.AUDIOwidth+2*13;
    ValMax = ValMin+width;
    NbAvg = ValHi-ValLo;
    if NbAvg >=1 & ValLo>2 & ValHi<20
        set(handles.text_ValNbAverage_Browse, 'String', num2str(NbAvg))
        maxValSlider = getMaximum(hjRangeSlider);
        minValSlider = getMinimum(hjRangeSlider);
        pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13;
        set(handles.PannelPlayAndSave, 'Units', 'pixels');
        posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
        if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
            posPlayAndSave(1) = pos;
        else
            posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
        end
        set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
        %     set(handles.PannelPlayAndSave, 'Position', [pos 755 85 47]);
        set(handles.PlaySelection, 'Visible', 'on')
        set(handles.SaveSelection, 'Visible', 'on')
    else
        set(handles.text_ValNbAverage_Browse, 'String', num2str(NbAvg))
        maxValSlider = getMaximum(hjRangeSlider);
        minValSlider = getMinimum(hjRangeSlider);
        pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13;
        set(handles.PannelPlayAndSave, 'Units', 'pixels');
        posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
        if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
            posPlayAndSave(1) = pos;
        else
            posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
        end
        set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
        set(handles.PlaySelection, 'Visible', 'off')
        set(handles.SaveSelection, 'Visible', 'off')
    end
    
    
    
    set(handles.Audio,'Tag','Audio');
    set(handles.Spectre,'Tag','Spectre');
    set(handles.Phase,'Tag','Phase');
    
    h = zoom();
    setAxesZoomMotion(h,handles.Audio,'horizontal');
    set(h,'ActionPostCallback',{@ZoomCallbackAcuz, handles});
    
end

function EggSliderCallback(hObject,eventdata, handles)

global hjSlider

valueAdjusting = getValueIsAdjusting(hjSlider);
if valueAdjusting ==0
    
    %on recupere le numero du curseur
    Val = get(hjSlider,'Value');
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%% NEW TIMERCALLBACK %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function DoubleCursorCallbackRealTimeNEW(hObject,eventdata, handles)

global hjRangeSlider h


% hObject
% get(hObject, 'enable')
% get(hObject, 'action')
valueAdjusting = getValueIsAdjusting(hjRangeSlider);
if valueAdjusting ==0
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg))
    
    
    maxValSlider = handles.MaxValSlider
    minValSlider = handles.MinValSlider
    
    tLo = handles.TCycle(ValLo+1)
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1)
    handles.tHi = tHi;
    
    
    axes(handles.Audio);
    plot(handles.Audio, handles.t,handles.s,'color', [0.3 0.3 0.3]);
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    hold on;
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold off;
    
    
    ax = handles.Audio;
    h = zoom(ax);
    setAxesZoomMotion(h,handles.Audio,'horizontal');
    set(h,'ActionPostCallback',{@ZoomCallbackRealTimeNEW, handles}) ;
    [~,indZLo] = min(abs(tLo*ones(1,length(handles.TCycle))-handles.TCycle));
    [~,indZHi] = min(abs(tHi*ones(1,length(handles.TCycle))-handles.TCycle));
    set(handles.Audio, 'Tag', 'Audio')
    
    XLimZ = double(get(handles.Spectre, 'XLim'));
    xminZ = XLimZ(1);
    xmaxZ = XLimZ(2);
    
    % if NbAvg>=1
    % disp('calcul')
    %
    % AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
    %         handles.Zref(handles.harmLo+1:handles.harmHi+1)));
    % PhasePlot = 180/pi*angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
    %        handles.Zref(handles.harmLo+1:handles.harmHi+1));
    % AmpTot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,:),2)./...
    %         handles.Zref(handles.harmLo+1:handles.harmHi+1)));
    % PhaseTot = 180/pi*angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,:),2)./...
    %        handles.Zref(handles.harmLo+1:handles.harmHi+1));
    % freqZplot = handles.freqZ(handles.harmLo+1:handles.harmHi+1);
    % MeanAmpPlot = mean(AmpPlot);
    %
    % disp('plot spectre')
    %
    % axes(handles.Spectre);
    % if get(handles.DisplayRawData, 'Value')==1
    %     plot(handles.Spectre, freqZplot,AmpPlot-MeanAmpPlot, 'k', 'linewidth', 1);
    %     hold on;
    % end
    % if get(handles.DisplayFilteredData, 'Value')==1
    %     plot(handles.Spectre, freqZplot,medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,25),5), 'b', 'linewidth', 4 );
    %     hold on;
    % end
    % if get(handles.DisplayAllCurves, 'Value')==1
    %     %display('test ??')
    %     Z_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
    %         repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
    %     plot(handles.Spectre, freqZplot, Z_AllCurves - repmat(mean(Z_AllCurves,2),1, size(Z_AllCurves,2)), 'linewidth', 0.25     )
    %     hold on;
    % end
    % % if get(handles.DisplayMean, 'Value') ==1
    % %     AbsZ_Mean = 20*log10(mean(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
    % %         repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)),2));
    % %     plot(freqZplot, AbsZ_Mean - mean(AbsZ_Mean),'color',[204 85 0]/255,'linewidth', 3 );
    % % end
    %
    % %     plot(freqZplot,AmpTot, 'b');
    % xlabel('f (Hz)')
    % ylabel('|S(f)|')
    % % axis([handles.FreqLo handles.FreqHi min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)])
    % % axis([0 handles.FreqHi min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)])
    % xlim(handles.Spectre, [xminZ xmaxZ]);
    % ylim(handles.Spectre, [min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)]);
    % legend({'20log(|Z/Z_{ref}|)', 'filtred 20log(|Z/Z_{ref}|)' },'FontSize', 11);
    % hold off;
    %
    % disp('plot phase')
    %
    % axes(handles.Phase);
    % DerivPhasePlot = diff(unwrap(pi/180*PhasePlot))/(freqZplot(2)-freqZplot(1));
    % plot(handles.Phase, freqZplot(1:end-1),DerivPhasePlot, 'k');
    % hold on;
    % plot(handles.Phase, freqZplot(1:end-1),medfilt1(sgolayfilt(DerivPhasePlot,3,25),5), 'b');
    % %     plot(freqZplot,PhaseTot, 'b');
    % %     axis([handles.FreqLo handles.FreqHi min(DerivPhasePlot) max(DerivPhasePlot)])
    % % axis([0 handles.FreqHi min(DerivPhasePlot) max(DerivPhasePlot)])
    % xlim(handles.Phase, [xminZ xmaxZ]);
    % ylim(handles.Phase, [min(DerivPhasePlot) max(DerivPhasePlot)]);
    % legend({'dPhase(|Z/Z_{ref}| / df', 'filtred dPhase(|Z/Z_{ref}| / df' },'FontSize', 11);
    % hold off;
    %
    %
    % disp('analyse')
    %
    % [pks,locs,w,p] = findpeaks(medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,25),5),freqZplot,...
    %         'MinPeakHeight',0.10*max(AmpPlot-MeanAmpPlot), 'WidthReference','halfheight');
    % name_pks = cat(2,'pks', num2str(1i));
    % name_locs = cat(2,'locs', num2str(i));
    % %name_w = cat(2,'w', num2str(i));
    % %name_p = cat(2,'p', num2str(i));
    % findH.name_pks = pks;
    % findH.name_locs = locs;
    % findH.name_w = w;
    % findH.name_p = p;
    % % [~,indH1] = max(pks);
    % % findH.indH = indH1;
    % indH1 = 1;
    % findH.freqH1 = locs(indH1);
    % findH.widthH1 = w(indH1);
    % [Eps, indEps] = min(abs(2*findH.freqH1*ones(1,length(findH.name_locs))-...
    % findH.name_locs));
    % findH.freqH2 = findH.name_locs(indEps);
    % findH.widthH2 = w(indEps);
    %
    % disp('plot analyse')
    %
    % disp('')
    % disp('')
    % disp('')
    % axes(handles.Analyse);
    %     plot([0 10], [0 0], 'k'); hold on;
    %     plot([0 10], [2 2], 'k');
    %     plot([0 10], [4 4], 'k');
    %     plot([0 10], [6 6], '-k');
    %     plot([0 10], [8 8], '-k');
    %     plot([0 10], [14 14], 'k');
    %     plot([0 10], [16 16], 'k');
    %     plot([0 10], [18 18], 'k');
    %     plot([0 10], [20 20], 'k');
    %     plot([0 10], [22 22], 'k');
    %     axis([ 0 10 -3 25])
    %     set(handles.ValH1,'String',round(locs(1),0));
    %     set(handles.ValH2,'String',round(locs(2),0));
    %     frequence2position(locs,handles.Analyse);
    %     grid off
    %     axis off
    %     hold(handles.Analyse, 'off');
    % else
    %
    %     axes(handles.Spectre)
    %     plot(handles.Spectre, [xminZ xmaxZ], [0 0], 'w');
    %     hold(handles.Spectre, 'off');
    %
    %
    %     axes(handles.Phase)
    %     plot(handles.Phase, [xminZ xmaxZ], [0 0], 'w');
    %     hold(handles.Phase, 'off');
    %
    % end
    
    
    % !!!!!!!!!!!!!!!!!!!
    DisplayChosenCurves(handles)
    % !!!!!!!!!!!!!!!!!!!
    
    
    ValMin = handles.AUDIOleft+handles.PCleft-13;
    width = handles.AUDIOwidth+2*13;
    ValMax = ValMin+width;
    
    pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13
    set(handles.PannelPlayAndSave, 'Units', 'pixels');
    posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
    if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
        posPlayAndSave(1) = pos;
    else
        posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
    end
    set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
    % set(handles.PannelPlayAndSave, 'Position', [pos 755 85 47]);
    set(handles.PannelPlayAndSave, 'Visible', 'on')
else
    set(handles.PannelPlayAndSave, 'Visible', 'off')
end
set(handles.Audio,'Tag','Audio');
set(handles.Spectre,'Tag','Spectre');
set(handles.Phase,'Tag','Phase');

function ZoomCallbackRealTimeNEW(obj,evd, handles)

global XLimSpectrum StopRecordPushed PushedZoomSpectre...
    h hjRangeSlider Is_SavedCurve_Checked

ax = evd.Axes;
tagNEW = get(ax, 'Tag')
display('ZoomCallback')
XLimSpectrum = get(ax, 'XLim');
PushedZoomSpectre=0;

XLim = get(handles.Spectre, 'XLim')
set(handles.AxesClefs, 'Units', 'Pixels');
posFreq = get(handles.AxesClefs, 'Position');
axes(handles.AxesBassClef)
set(handles.AxesBassClef, 'Units', 'Pixels');
pos = get(handles.AxesBassClef, 'Position');
pos(3) = 25;
pos(4) = 27;
pos(1) =posFreq(1) + posFreq(3)/(XLim(2)-XLim(1))*((98+220)/2-XLim(1))-pos(3)/2;
if pos(1)>= posFreq(1) + posFreq(3) -pos(3)/2
    set(handles.AxesBassClef, 'Visible', 'off')
else
    set(handles.AxesBassClef, 'Visible', 'on')
end
set(handles.AxesBassClef, 'Position', pos)
imshow(get(handles.pictureBassClef, 'CData'));

axes(handles.AxesTrebbleClefs)
set(handles.AxesTrebbleClefs, 'Units', 'Pixels');
pos = get(handles.AxesTrebbleClefs, 'Position');
pos(3) = 16;
pos(4) = 39;
pos(1) =posFreq(1) + posFreq(3)/(XLim(2)-XLim(1))*((330+698.5)/2-XLim(1))-pos(3);
if pos(1)>= posFreq(1) + posFreq(3) -pos(3)/2
    set(handles.AxesTrebbleClefs, 'Visible', 'off')
else
    set(handles.AxesTrebbleClefs, 'Visible', 'on')
end
set(handles.AxesTrebbleClefs, 'Position', pos)
imshow(get(handles.pictureTrebbleClef, 'CData'))

axes(handles.AxesTwoTrebbleClefs)
set(handles.AxesTwoTrebbleClefs, 'Units', 'Pixels');
pos = get(handles.AxesTwoTrebbleClefs, 'Position');
pos(3) = 31;
pos(4) = 38;
pos(1) =posFreq(1) + posFreq(3)/(XLim(2)-XLim(1))*((1318.5 +2794)/2-XLim(1))-pos(3)/2;
if pos(1)>= posFreq(1) + posFreq(3) -pos(3)/2
    set(handles.AxesTwoTrebbleClefs, 'Visible', 'off')
else
    set(handles.AxesTwoTrebbleClefs, 'Visible', 'on')
end
set(handles.AxesTwoTrebbleClefs, 'Position', pos)
imshow(get(handles.pictureTwoTrebbleClefs, 'CData'))

% XLim = get(handles.Spectre, 'XLim')
% set(handles.AxesClefs, 'Units', 'Pixels');
% posFreq = get(handles.AxesClefs, 'Position')
% axes(handles.AxesTrebbleClef_1);
% set(handles.AxesTrebbleClef_1, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_1, 'Position');
% Data = get(handles.TrebbleClefPictureHOR_1, 'CData');
% pos(3) = posFreq(3)*(262-247)/(XLim(2)-XLim(1));
% % pos(3) = size(Data,2);
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% % NewData
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% pos(1) = posFreq(1) + posFreq(3)*(247-XLim(1))/(XLim(2)-XLim(1));
% pos
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_1, 'Position', pos);
% % imshow(Data)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTrebbleClef_2)
% set(handles.AxesTrebbleClef_2, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_2, 'Position');
% Data = get(handles.TrebbleClefPictureHOR_2, 'CData');
% pos(3) = posFreq(3)*(330-262)/(XLim(2)-XLim(1));
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% % NewData
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(262);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_2, 'Position', pos)
% % imshow(Data)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTrebbleClef_3)
% set(handles.AxesTrebbleClef_3, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_3, 'Position');
% Data = get(handles.TrebbleClefPictureHOR_3, 'CData');
% pos(3) = posFreq(3)*(330-262)/(XLim(2)-XLim(1));
% [sx,sy,sz] = size(Data)
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% % NewData
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(330);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_3, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
%
% axes(handles.AxesTrebbleClef_4)
% set(handles.AxesTrebbleClef_4, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_4, 'Position');
% Data = get(handles.TrebbleClefPictureHOR_4, 'CData');
% pos(3) = posFreq(3)*(494-392)/(XLim(2)-XLim(1));
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(392);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_4, 'Position', pos);
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTrebbleClef_5)
% set(handles.AxesTrebbleClef_5, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_5, 'Position');
% Data = get(handles.TrebbleClefPictureHOR_5, 'CData');
% pos(3) = posFreq(3)*(587-494)/(XLim(2)-XLim(1));
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(494);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_5, 'Position', pos);
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTrebbleClef_6)
% set(handles.AxesTrebbleClef_6, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_6, 'Position');
% Data = get(handles.TrebbleClefPictureHOR_6, 'CData');
% pos(3) = posFreq(3)*(698.5-587)/(XLim(2)-XLim(1));
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(587);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_6, 'Position', pos);
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTrebbleClef_7)
% set(handles.AxesTrebbleClef_7, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_7, 'Position');
% Data = get(handles.TrebbleClefPictureHOR_7, 'CData');
% pos(3) = posFreq(3)*(880-698.5)/(XLim(2)-XLim(1));
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(698.5);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_7, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTrebbleClef_8)
% set(handles.AxesTrebbleClef_8, 'Units', 'Pixels');
% pos = get(handles.AxesTrebbleClef_8, 'Position');
% Data = get(handles.TrebbleClefPictureHOR_8, 'CData');
% pos(3) = posFreq(3)*(988-880)/(XLim(2)-XLim(1));
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(880);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTrebbleClef_8, 'Position', pos);
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% %%%%%%%%%%%%%%%%%%%%%%%%%
% %%%%%%%%%%%%%%%%%%%%%%%%%
% %%%%%%%%%%%%%%%%%%%%%%%%%
% %%%%%%%%%%%%%%%%%%%%%%%%%
%
% axes(handles.AxesTwoTrebbleClef_1)
% set(handles.AxesTwoTrebbleClef_1, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_1, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_1, 'CData');
% pos(3) = posFreq(3)*(1046.5-988)/(XLim(2)-XLim(1));
% % pos(3) = size(Data,2);
% [sx,sy,sz] = size(Data)
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% NewData
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% pos(1) = posFreq(1) + posFreq(3)*(988-XLim(1))/(XLim(2)-XLim(1));
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_1, 'Position', pos)
% % imshow(Data)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
% % posFreq(1) + posFreq(3)*(247-XLim(1))/(XLim(2)-XLim(1));
% axes(handles.AxesTwoTrebbleClef_2)
% set(handles.AxesTwoTrebbleClef_2, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_2, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_2, 'CData');
% pos(3) = posFreq(3)*(1318.5-1046.5)/(XLim(2)-XLim(1));
% [sx,sy,sz] = size(Data)
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% NewData
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(262);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_2, 'Position', pos)
% % imshow(Data)
% imagesc(NewData, [0 255]);
% colormap gray
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_3)
% set(handles.AxesTwoTrebbleClef_3, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_3, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_3, 'CData');
% pos(3) = posFreq(3)*(1568-1318.5)/(XLim(2)-XLim(1))
% [sx,sy,sz] = size(Data)
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
% %             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% NewData
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(330);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_3, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
%
% axes(handles.AxesTwoTrebbleClef_4)
% set(handles.AxesTwoTrebbleClef_4, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_4, 'Position');
% Data = get(handles.TwoTrebbleClefPictureHOR_4, 'CData')
% pos(3) = posFreq(3)*(1975-1568)/(XLim(2)-XLim(1))
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             display('****')
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(392);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_4, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_5)
% set(handles.AxesTwoTrebbleClef_5, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_5, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_5, 'CData');
% pos(3) = posFreq(3)*(2349-1975)/(XLim(2)-XLim(1))
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(494);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_5, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_6)
% set(handles.AxesTwoTrebbleClef_6, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_6, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_6, 'CData');
% pos(3) = posFreq(3)*(2794-2349)/(XLim(2)-XLim(1))
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(587);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_6, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_7)
% set(handles.AxesTwoTrebbleClef_7, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_7, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_7, 'CData');
% pos(3) = posFreq(3)*(3520-2794)/(XLim(2)-XLim(1))
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(698.5);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% set(handles.AxesTwoTrebbleClef_7, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off
%
% axes(handles.AxesTwoTrebbleClef_8)
% set(handles.AxesTwoTrebbleClef_8, 'Units', 'Pixels');
% pos = get(handles.AxesTwoTrebbleClef_8, 'Position')
% Data = get(handles.TwoTrebbleClefPictureHOR_8, 'CData');
% pos(3) = posFreq(3)*(3951-3520)/(XLim(2)-XLim(1))
% [sx,sy,sz] = size(Data);
% yq2 = linspace(1,sy,pos(3));
% xq2 = linspace(1,sx,sx);
% [Xq,Yq] = meshgrid(yq2,xq2);
% NewData = interp2(single(rgb2gray(Data)),Xq,Yq);
% for i=1:size(NewData,1)
%     for j=1:size(NewData,2)
%         if NewData(i,j)<150
%             NewData(i,j)=0;
%         end
%     end
% end
% % pos(3) = size(Data,2);
% pos(3) = size(NewData,2);
% pos(4) = size(NewData,1);
% % pos(1) = posFreq(1) + posFreq(3)/3000*(880);
% pos(1)=posAnteX;
% posAnteX = pos(1)+pos(3);
% pos
% sizeNewData  = size(NewData)
% set(handles.AxesTwoTrebbleClef_8, 'Position', pos)
% % imagesc(NewData, [0 255]);
% % colormap gray
% imshow(imresize(Data,[pos(4),pos(3)]), [0 255])
% axis image
% axis off

if StopRecordPushed==1
    strcmp(tagNEW, 'Audio')
    strcmp(tagNEW, 'EGG')
    if strcmp(tagNEW, 'Audio')==0 & strcmp(tagNEW, 'EGG')==0
        
        display('Zoom sur un des spectres')
        PushedZoomSpectre =1
        %         if length(find(Is_SavedCurve_Checked))
        
        %         set(handles.Audio,'Tag','Audio');
        %         set(handles.Spectre,'Tag','Spectre');
        %         set(handles.Phase,'Tag','Phase');
        [PlottedCurves]= DisplayChosenCurvesNEW(handles);
        PushedZoomSpectre =0
        %         hSpectre = zoom(handles.Spectre);
        %         set(hSpectre,'ActionPostCallback',{@ZoomCallbackSpectre, handles}) ;
        YLim = get(handles.Spectre, 'YLim');
        set(handles.Audio,'Tag','Audio');
        set(handles.Spectre,'Tag','Spectre');
        set(handles.Phase,'Tag','Phase');
        
    elseif strcmp(tagNEW, 'Audio')==1
        
        Is_SavedCurve_Checked;
        % if strcmp(tagNEW, 'Audio') ==1
        dir = get(h, 'Direction');
        isDirOut = strcmp(dir, 'out')
        
        if isDirOut ==1
            ValLo = get(hjRangeSlider,'LowValue')
            ValHi = get(hjRangeSlider,'HighValue')
            
            %         plot(handles.Audio, handles.t,handles.s,'color', [0.3 0.3 0.3]);
            %         xlabel('Time (sec)'); ylabel('Amplitude');
            %         xlim(handles.Audio, [handles.TCycle(1) handles.TCycle(end)]);
            %         ylim(handles.Audio, [min(handles.s) max(handles.s)]);
            %         hold on;
            %         plot(handles.Audio, [handles.TCycle(ValLo+1) handles.TCycle(ValLo+1)],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
            %         plot(handles.Audio, [handles.TCycle(ValHi+1) handles.TCycle(ValHi+1)],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
            %         hold off;
            plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
            hold(handles.Audio, 'on')
            
            if size(handles.IndStartStopNoise,2)~=0
                
                for ii = 1:size(handles.IndStartStopNoise,2)
                    % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                    % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                    t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                    
                    if handles.IndStartStopNoise(1,1)==0
                        if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                            t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            plot(handles.Audio, t_Noise, s_Noise , 'b');
                            
                            t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                        else
                            plot(handles.Audio, handles.t, handles.s, 'b');
                        end
                    end
                    if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                        
                        t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    else
                        t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                    end
                    
                    % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
                    % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
                end
                
            end
            
            
            YLimAudio = [-max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))...
                max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))];
            xlim(handles.Audio, [handles.TCycle(1) handles.TCycle(end)]);
            ylim(handles.Audio, YLimAudio);
            plot(handles.Audio, [handles.tLo handles.tLo],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
            plot(handles.Audio, [handles.tHi handles.tHi],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
            hold(handles.Audio, 'off')
            
            
            
            handles.MinValSlider = 0;
            handles.MaxValSlider = handles.NbCycle;
            jRangeSlider2 = com.jidesoft.swing.RangeSlider(handles.MinValSlider,handles.MaxValSlider,ValLo,ValHi);
            jRangeSlider2 = javacomponent(jRangeSlider2, [handles.AUDIOleft+handles.PCleft-13,...
                handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf)
            %         [colorR, colorG, colorB] = getRGBcolorSlider(handles);
            set(jRangeSlider2,'PaintTicks',false, 'PaintLabels',false);%, 'Background', java.awt.Color(colorR, colorG, colorB))
            hjRangeSlider = handle(jRangeSlider2, 'CallbackProperties');
            set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackRealTimeNEW2, handles});
            set(ax, 'Tag', 'Audio')
            %         guidata(hObject,handles);
            
        else
            %         XLim = evd.Axes.XLim
            ValLo = get(hjRangeSlider,'LowValue');
            ValHi = get(hjRangeSlider,'HighValue');
            XLim = double(get(handles.Audio, 'XLim'));
            xmin = XLim(1);
            xmax = XLim(2);
            [~,indmin] = min(abs(handles.TCycle-xmin));
            xmin = handles.TCycle(indmin);
            [~,indmax] = min(abs(handles.TCycle-xmax));
            xmax = handles.TCycle(indmax);
            if xmin <0
                xmin =0;
            end
            if xmax>= max(handles.t)
                xmax = max(handles.t);
            end
            if xmin>handles.TCycle(ValLo+1)
                xmin = handles.TCycle(ValLo+1);
            end
            if xmax<handles.TCycle(ValHi+1)
                xmax = handles.TCycle(ValHi+1);
            end
            [~,indmin] = min(abs(handles.TCycle-xmin));
            [~,indmax] = min(abs(handles.TCycle-xmax));
            
            indmin-1;
            indmax-1;
            handles.MinValSlider = indmin-1;
            handles.MaxValSlider = indmax-1;
            ValLo = get(hjRangeSlider,'LowValue');
            ValHi = get(hjRangeSlider,'HighValue');
            jRangeSlider2 = com.jidesoft.swing.RangeSlider(handles.MinValSlider,handles.MaxValSlider,ValLo,ValHi);
            jRangeSlider2 = javacomponent(jRangeSlider2, [handles.AUDIOleft+handles.PCleft-13,...
                handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf)
            %         [colorR, colorG, colorB] = getRGBcolorSlider(handles);
            set(jRangeSlider2,'PaintTicks',false, 'PaintLabels',false);%, 'Background', java.awt.Color(colorR, colorG, colorB))
            hjRangeSlider = handle(jRangeSlider2, 'CallbackProperties');
            set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackRealTimeNEW2, handles});
            %         guidata(hObject, handles);
            
            %         plot(handles.Audio, handles.t,handles.s,'color', [0.3 0.3 0.3]);
            %         xlabel('Time (sec)'); ylabel('Amplitude');
            %         hold on;
            %         plot(handles.Audio, [handles.TCycle(ValLo+1) handles.TCycle(ValLo+1)],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
            %         plot(handles.Audio, [handles.TCycle(ValHi+1) handles.TCycle(ValHi+1)],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
            
            plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
            hold(handles.Audio, 'on');
            
            if size(handles.IndStartStopNoise,2)~=0
                
                for ii = 1:size(handles.IndStartStopNoise,2)
                    % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                    % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                    t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                    
                    if handles.IndStartStopNoise(1,1)==0
                        if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                            t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            plot(handles.Audio, t_Noise, s_Noise , 'b');
                            
                            t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                        else
                            plot(handles.Audio, handles.t, handles.s, 'b');
                        end
                    end
                    if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                        
                        t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    else
                        t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                    end
                    
                    % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
                    % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
                end
                
            end
            
            YLimAudio = [-max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))...
                max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))];
            xlim(handles.Audio, [xmin xmax]);
            ylim(handles.Audio, YLimAudio);
            plot(handles.Audio, [handles.tLo handles.tLo],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
            plot(handles.Audio, [handles.tHi handles.tHi],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
            hold(handles.Audio, 'off')
            
            set(ax, 'Tag', 'Audio')
        end
        
        ValMin = handles.AUDIOleft+handles.PCleft-13;
        width = handles.AUDIOwidth+2*13;
        ValMax = ValMin+width;
        NbAvg = ValHi-ValLo;
        if NbAvg >=1
            
            maxValSlider = handles.MaxValSlider;
            minValSlider = handles.MinValSlider;
            pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13;
            set(handles.PannelPlayAndSave, 'Units', 'pixels');
            posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
            if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
                posPlayAndSave(1) = pos;
            else
                posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
            end
            set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
            %     set(handles.PannelPlayAndSave, 'Position', [pos 755 85 47]);
            set(handles.PannelPlayAndSave, 'Visible', 'on')
        else
            set(handles.PannelPlayAndSave, 'Visible', 'off')
        end
        
        
        
        set(handles.Audio,'Tag','Audio');
        set(handles.Spectre,'Tag','Spectre');
        set(handles.Phase,'Tag','Phase');
        
        [PlottedCurves]= DisplayChosenCurvesNEW(handles);
    end
    
    h = zoom();
    setAxesZoomMotion(h,handles.Audio,'horizontal');
    set(h,'ActionPostCallback',{@ZoomCallbackRealTimeNEW, handles})
end

set(handles.Audio,'Tag','Audio');
set(handles.EGG,'Tag','EGG');
set(handles.Spectre,'Tag','Spectre');
set(handles.Phase,'Tag','Phase');
set(handles.AxesAnalyse,'Tag','AxesAnalyse');

function NEWfunction_plot(handles)

axes(handles.Audio);
% modf=2;
% nDebut = (modf+1)*handles.nCalib;
% nFin = length(handles.s)-handles.nCalib;
% plot(handles.t(1:nDebut),handles.s(1:nDebut),'color', [192 192 192]/255);
% hold on;
% plot(handles.t(nDebut+1:nFin-1),handles.s(nDebut+1:nFin-1),'color', [0.3 0.3 0.3]);
% plot(handles.t(nFin:end),handles.s(nFin:end),'color', [192 192 192]/255);
plot(handles.Audio, handles.t,handles.s,'color', [0.3 0.3 0.3]);
axis([0 handles.TCycle(end) min(handles.s) max(handles.s)]);

axes(handles.Calibration)
plot(handles.Calibration, handles.freqZ, 20*log10(abs(handles.Zref)),'r');
xlabel('frequency [Hz]'); ylabel('[dB]')
xlim([handles.FreqLo handles.FreqHi])

function [Z, freqZ] = calculate_Z(handles)

if strcmp(handles.LoadFileType, 'OLDAcuz') ==1
    modf = 2;
    start = modf +1;
    StartSample = (start)*handles.nCalib+1;
    StopSample = StartSample+(handles.NbCycle*handles.nCalib)-1;
else
    StartSample = 1;
    StopSample = length(handles.s);
end


%s doit absolument etre en Pascal !!! attention aux unites !!!
s = handles.s(StartSample: StopSample);
handles.nCalib
handles.NbCycle
matrix_s = reshape(s, handles.nCalib, handles.NbCycle);
size_s = size(matrix_s); ls = max(size_s);
Nfft = 2^nextpow2(ls);
Z = fft(matrix_s, Nfft,1);
harmHi = floor(Nfft/2);
Z = Z(1:harmHi + 1,:);
Z = Z*2/Nfft;
Z(1,:) = Z(1,:)/2;
freqZ = handles.Fs*(0:(Nfft/2))/Nfft;
freqZ = freqZ(1:harmHi + 1);

function [LogScaleImpFilt PhaseFilt] = filtrage(handles)
LogScaleImpFilt = [];
PhaseFilt = [];
for i=1:min(size(handles.Z))
    %finds Median values
    %     x = log(20*log10(abs(handles.Z(:,i))...
    %         /max(abs(handles.Z(:,i)))));
    %     x = log(20*log10(abs(handles.Z(:,i)./handles.Zref)));
    %     y = log(180/pi*(angle(handles.Z(:,i)./handles.Zref)));
    %     xMedian = ApplyFctWindow(x,@median,10)';
    %     %identify Spikes, those median greater than "spike" (1.0 typical)
    %     xTra = find(x - xMedian>0.8);
    %     %replace Spikes with Median values
    %     x(xTra) = xMedian(xTra) ;
    %     %unlog Z
    %     x = exp(x);
    %     y = exp(y);
    x=  20*log10(abs(handles.Z(:,i)./handles.Zref));
    y = 180/pi*angle(handles.Z(:,i)./handles.Zref);
    %smooth curve w interpolation + savitsky-golay
    %     x = sgolayfilt(smoothts(x, 'b', 25),3,41);
    x = sgolayfilt(x,3,25);
    y = sgolayfilt(y,1,25);
    LogScaleImpFilt = cat(2,LogScaleImpFilt,x);
    PhaseFilt = cat(2,PhaseFilt,y);
    
end
%x = sgolayfilt(smoothts(x, 'b', 15),3,25);

function y = ApplyFctWindow(x, f, w)
% x: vector
% f: function
% w: radius of window
%
% ex:  ApplyFctWindow(x, @mean, 10)

x=x(:);
l=length(x);


y=zeros(1,l);

for i=1:w
    y(i) = f(x(1:i+w));
end
for i = (w+1):(l-w)
    y(i) = f(x((i-w):(i+w)));
end
for i = (l-w):l
    y(i) = f(x((i-w):l));
end

function H = find_H(handles)
% % % % on cherche l indice de la frequence la plus proche de 4500Hz
% % % ind4500 = find(abs(handles.freqZ - 4500)<handles.freqZ(2));
% % % ind4500 = min(ind4500)
% % % %on calcule la moyenne des NbCycle-1 Z(t)
% % % meanZ = [];
% % % H = [];
% % % WH = [];
% % % %attention ici on travaille sur la courbe 20*log10(Z/Zmx) directement
% % % for i = 1: min(size(handles.Z))
% % %     meanZi = mean(20*log10(abs(handles.Z(1:ind4500,i))...
% % %         /max(abs(handles.Z(1:ind4500,i)))));
% % %     [pks,locs,w,p] = findpeaks(20*log10(abs(handles.Z(1:ind4500,i))...
% % %         /max(abs(handles.Z(1:ind4500,i)))),handles.freqZ(1:ind4500),...
% % %         'MinPeakHeight',(1-0.3)*meanZi); %, 'SortStr', 'descend'
% % %     name_pks = cat(2,'pks', num2str(i));
% % %     name_locs = cat(2,'locs', num2str(i));
% % %     %name_w = cat(2,'w', num2str(i));
% % %     %name_p = cat(2,'p', num2str(i));
% % %     findH.name_pks = pks
% % %     findH.name_locs = locs
% % %     %findH.name_w = w
% % %     %findH.name_p = p
% % %     [~,indH1] = max(pks);
% % %     findH.indH = indH1;
% % %     findH.freqH1 = locs(indH1);
% % %     %findH.W1 = w(indH1);
% % %     [Eps, indEps] = min(abs(2*findH.freqH1*ones(1,length(findH.name_locs))-...
% % %         findH.name_locs));
% % %     findH.freqH2 = findH.name_locs(indEps);
% % %     %findH.W2 = findH.name_w(indEps);
% % %     H = cat(2,H,[findH.freqH1 findH.freqH2]');
% % %     %WH = cat(2, WH, [findH.W1 findH.W2]');
% % %     meanZ = cat(2,meanZ,meanZi);
% % % end
% % % meanZ;
% % % H;
% % % WH;

%on cherche l indice de la frequence la plus proche de la frequence max
indFmax= find(abs(handles.freqZ - handles.freqZ(end))<handles.freqZ(2));
indFmax = min(indFmax);
%on calcule la moyenne des NbCycle-1 Z(t)
for i = 1: min(size(handles.Z))
    meanZi = mean(20*log10(abs(handles.Z(1:indFmax,i))...
        /max(abs(handles.Z(1:indFmax,i)))));
    [pks,locs,w,p] = findpeaks(20*log10(abs(handles.Z(1:indFmax,i))...
        /max(abs(handles.Z(1:ind4500,i)))),handles.freqZ(1:indFmax),...
        'MinPeakHeight',(1-0.3)*meanZi); %, 'SortStr', 'descend'
    name_pks = cat(2,'pks', num2str(i));
    name_locs = cat(2,'locs', num2str(i));
    %name_w = cat(2,'w', num2str(i));
    %name_p = cat(2,'p', num2str(i));
    findH.name_pks = pks;
    findH.name_locs = locs;
    %findH.name_w = w
    %findH.name_p = p
    [~,indH1] = max(pks);
    findH.indH = indH1;
    findH.freqH1 = locs(indH1);
    %findH.W1 = w(indH1);
    [Eps, indEps] = min(abs(2*findH.freqH1*ones(1,length(findH.name_locs))-...
        findH.name_locs));
    findH.freqH2 = findH.name_locs(indEps);
    %findH.W2 = findH.name_w(indEps);
    H = cat(2,H,[findH.freqH1 findH.freqH2]');
    %WH = cat(2, WH, [findH.W1 findH.W2]');
    meanZ = cat(2,meanZ,meanZi);
end
[pks,locs,w,p] = findpeaks(medfilt1(sgolayfilt(handles.Z-MeanZplot,3,25),5),freqZ,...
    'MinPeakHeight',0.10*max(Zplot-MeanZplot), 'WidthReference','halfheight');
% [pks,locs,w,p] = findpeaks(Zplot-MeanZplot,freqZ,...
%         'MinPeakHeight',(1-0.25)*max(Zplot)); %, 'SortStr', 'descend'
name_pks = cat(2,'pks', num2str(i));
name_locs = cat(2,'locs', num2str(i));
%name_w = cat(2,'w', num2str(i));
%name_p = cat(2,'p', num2str(i));
findH.name_pks = pks;
findH.name_locs = locs;
findH.name_w = w;
findH.name_p = p;
% [~,indH1] = max(pks);
% findH.indH = indH1;
indH1 = 1;
findH.freqH1 = locs(indH1);
findH.widthH1 = w(indH1);
[Eps, indEps] = min(abs(2*findH.freqH1*ones(1,length(findH.name_locs))-...
    findH.name_locs));
findH.freqH2 = findH.name_locs(indEps);
findH.widthH2 = w(indEps);
findH;

function pos = frequence2positionAcuz(f,ax, marker)

FreqNote4 = [261.6 277.18 293.67 311.13 329.63 349.23 369.99 392.00 415.30 440.0 ...
    466.16 493.88];
FreqNote5 = 2*FreqNote4;
FreqNote6 = 2*FreqNote5;
freq = cat(2,FreqNote4, FreqNote5,FreqNote6);
Position4 =[-2 -2 -1 -1 0 1 1 2 2 3 3 4];
Position5 =[5 5 6 6 7 8 8 9 9 10 10 11 ];
Position6 =[12 12 13 13 14 15 15 16 16 17 17 18];
position = cat(2,Position4, Position5, Position6);

[~, ind_min] = min(abs(f*ones(1, length(freq)) - freq));
pos = position(ind_min);
hold(ax, 'on')
plot(ax, 6,pos,marker, 'markersize', 30)

var = mod(ind_min,12);
if max(var==[2 4 7 9 11])==1
    plot(ax, [2.8 4.2],[pos-0.5 pos-0.5],marker(end), 'LineWidth', 1.2);
    plot(ax,[2.8 4.2],[pos+0.5 pos+0.5],marker(end),'LineWidth', 1.2);
    plot(ax,[3.2 3.2],[pos-1.2 pos+1.2],marker(end),'LineWidth', 1.2);
    plot(ax,[3.8 3.8],[pos-1.2 pos+1.2],marker(end),'LineWidth', 1.2);
end
if max(ind_min==[1 2 22 23 25 26])==1
    plot(ax,[5 7],[pos pos],marker(end));
end
if ind_min==24
    plot(ax,[5 7],[pos-1 pos-1],marker(end));
end

%_________________________________________________________________________
%_____________________________ REAL TIME _________________________________
%_________________________ Calculate & Display ___________________________
%_________________________________________________________________________


% --- Executes on button press in pushbutton_StartBBSignal.
% function pushbutton_StartBBSignal_Callback(hObject, eventdata, handles)
% % hObject    handle to pushbutton_StartBBSignal (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% handles.DataAquired = 1;
% handles.StopRecordPushed =0;
% handles.StartBBSignalPushed = 1;
% set(handles.pushbutton_StartBBSignal,'Enable','off');
% set(handles.pushbutton_BeginRecord,'Enable','on');
% set(handles.pushbutton_StopRecord,'Enable','on');
% set(handles.PannelPlayAndSave, 'Visible', 'off');
% handles.CAT = 0;
% handles.ExistRecord = 0;
% handles.totalDATA = [];
%
%
%
% DureeBruit = 50 ; %[s]
% waveformTot = [];
% for i=1:floor(DureeBruit*handles.Fs/handles.nCalib)%handles.NbCyclePerSecond*DureeBruit
%     waveformTot = cat(1, waveformTot, handles.CalibSource);
% end
% % soundsc(waveformTot, handles.Fs)
% length(waveformTot);
%
% % !!!!!!!!!!!!!           !!!!!!!!!!!!
% %              !!!!!!!!!!!
% % % test = cat(2,waveformTot,waveformTot)/max(abs(waveformTot));
% test = cat(2,waveformTot,waveformTot);
% % !!!!!!!!!!!!!           !!!!!!!!!!!!
% %              !!!!!!!!!!!
%
% % maxtest = max(test)
% % mintest = min(test)
% % size(test)
% % figure(12)
% % plot(waveformTot)
% % soundsc(waveformTot, handles.Fs)
% if get(handles.radiobuttonLoudSpeaker, 'Value') ==1
%     handles.plBBSignal = audioplayer(test, handles.Fs, 16, handles.DevIDoutputiMicUSB);
% elseif get(handles.radiobuttonPipe, 'Value') ==1
%     handles.plBBSignal = audioplayer(test, handles.Fs, 16, handles.DevIDoutputMOTU);
% end
% if get(handles.radiobuttonCalculationNoBBSignal, 'Value')==0
%     play(handles.plBBSignal);
% end
%
%
% guidata(hObject, handles);

function edit_ValNbAverage_Calculate_Callback(hObject, eventdata, handles)
% hObject    handle to edit_ValNbAverage_Calculate (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% Hints: get(hObject,'String') returns contents of edit_ValNbAverage_Calculate as text
%        str2double(get(hObject,'String')) returns contents of edit_ValNbAverage_Calculate as a double
handles.NbAverageCalculate = str2double(get(hObject,'String'));
guidata(hObject, handles);

% --- Executes on button press in pushbutton_BeginRecord.
function pushbutton_BeginRecord_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_BeginRecord (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


global iStartNoise iEndNoise IsPlaying IndStartNoise IndStopNoise Is_SavedCurve_Checked...
    SavedCurvesNumber ColorNumber SavedplotRawDataNumber SavedplotFilteredDataNumber SavedCurves...
    Fs Tacq i indRecord position freqNote L_samples R1rate R2rate indrate...
    ValRAmp ValHarmonicWidth iStartNewRecord StopRecordPushed totalDATA XLimSpectrum h...
    IsAcquiring PlayStopBBSignal


% check input
devinfo = audiodevinfo;
input = devinfo.input;
DevID_Mic=cell2mat({input(handles.audioInputMenu.Value).ID});
% check output
devinfo = audiodevinfo;
output = devinfo.output;
DevID_Out=cell2mat({output(handles.audioOutputMenu.Value).ID});

for aa=1:SavedCurvesNumber
    if aa<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(aa)]);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(aa)]);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(aa)]);
        set(check_obj, 'Visible', 'off');
        set(check_obj, 'Value', []);
        set(check_obj, 'UserData', {});
        set(delete_obj, 'Visible', 'off');
        set(legend_obj, 'Visible', 'off');
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(aa)]);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(aa)]);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(aa)]);
        set(check_obj, 'Visible', 'off');
        set(check_obj, 'Value', []);
        set(check_obj, 'UserData', {});
        set(delete_obj, 'Visible', 'off');
        set(legend_obj, 'Visible', 'off');
    end
end

handles.Is_SavedCurve_Checked = zeros(1, 20);
Is_SavedCurve_Checked = zeros(1, 20);
SavedCurvesNumber = 0;
ColorNumber = 0;
SavedplotRawDataNumber =0;
SavedplotFilteredDataNumber = 0;
SavedCurves = struct;
SavedCurves.plotRawData={};
SavedCurves.plotFilteredData={};
assignin('base', 'SavedCurves', SavedCurves);
assignin('base', 'SavedplotRawDataNumber', SavedplotRawDataNumber);
assignin('base', 'SavedplotFilteredDataNumber', SavedplotFilteredDataNumber);

if get(handles.radiobuttonCalculationAcuz, 'Value')==1
    StopRecordPushed = 0;
    IsAcquiring = 1;
    set(handles.DisplayAllCurves, 'Enable', 'on');
    set(handles.pushbutton_BeginRecord, 'Enable', 'off');
    guidata(hObject, handles);
    pause(0.1)
    
    handles.LoadFile = 0;
    handles.LoadFileType = 'NEWAcuz';
    handles.RecordType = 'Acuz';
    handles.DataAquired = 1;
    handles.ExistRecord = 1;
    handles.StopRecordPushed = 0;
    noise=[];
    for n= 1:20
        noise=[noise handles.CalibSource'];
    end
    
    %                 % >> output and input wav <<
    %                 uiwait(msgbox('start recording', ' ','modal'));
    %             inputbufferOri = pawavplayrecordmodified([noise' noise'],...
    %             PARAMS.device_number,PARAMS.samplingFreq, 0,...
    %             PARAMS.nChannelFirst, PARAMS.nChannelLast,...
    %             PARAMS.device_number, PARAMS.device_type);
    %     inputbufferOri = pawavplayrecordmodifiedMARIE([noise' noise'],handles.DevIDoutputMOTU,handles.Fs,0,1,handles.nChannels,handles.DevIDoutputMOTU,'core');
    inputbufferOri = pawavplayrecordmodifiedMARIE([noise' noise'],DevID_MIC,handles.Fs,0,1,handles.nChannels,DevID_Mic,'core');
    % -------------------
    % >> correct phase
    Correlation = xcorr(inputbufferOri(:,2),noise');
    [~,lag] = max(Correlation);
    %     Offset = mod(lag,PARAMS.numPoints);
    Offset = mod(lag,handles.numPoints);
    
    %   Correction only
    inputbufferE=inputbufferOri(Offset:end,2);
    inputbufferAC=inputbufferOri(Offset:end,1);
    inputbufferEmpty=inputbufferOri(Offset:end,3);
    % -------------------
    % >> Double check correction, OffsetDoubleCheck should be 1! <<
    CorrelationDoubleCheck=xcorr(inputbufferE,noise');
    [~,lagDoubleCheck]=max(CorrelationDoubleCheck);
    OffsetDoubleCheck = mod(lagDoubleCheck,handles.numPoints);
    %     disp(['OffsetOfSampleForDoubleCheckShouldBeOne:', num2str(OffsetDoubleCheck)]);
    % -------------------
    % % % %     StartSample = (modf+1)*length(CalibSource)+1;
    % % % %     totalWaveformA = inputbufferA(StartSample: StartSample+16*handles.nCalib-1);
    % % % %     totalWaveformA = totalWaveformA * sqrt(2) / PARAMS.transduct; % Units P
    % % % %     retotalWaveformA = reshape(totalWaveformA, PARAMS.numPoints, PARAMS.numCycles);
    % % % %     allSeparateSpectrumA = waveformToSpectrum(retotalWaveformA, PARAMS.numPoints);
    % % % %
    
    %%%%%%%%%%%%%
    modf = 2;
    StartSample = (modf+1)*handles.nCalib+1;
    %     size(inputbufferAC)
    totalWaveformA = inputbufferAC(StartSample: StartSample+16*handles.nCalib-1);
    totalWaveformA = totalWaveformA * sqrt(2) / handles.transduc; % Units P
    WavFile = totalWaveformA ;
    totalWaveformA = reshape(totalWaveformA, handles.numPoints, 16);
    allSeparateSpectrumA = waveformToSpectrum(totalWaveformA, handles.numPoints);
    handles.Z = allSeparateSpectrumA;
    Nfft = str2num(get(handles.Nfft_Val, 'String'));
    freqZ = handles.Fs*(0:(Nfft/2))/Nfft;
    handles.freqZ = freqZ(1:floor(Nfft/2)+ 1);
    handles.absc = handles.freqZ(handles.harmLo+1:handles.harmHi+1);
    
    % >> display wav signal
    % %     TW=length(WavFile)/handles.Fs
    % %     TWVec= 1/handles.Fs:1/handles.Fs:TW;
    %     handles.totalDATA = [inputbufferAC, inputbufferE, inputbufferEmpty]; % NH edit
    handles.totalDATA = [inputbufferE, inputbufferEmpty]; % NH edit
    handles.s = inputbufferAC* sqrt(2) / handles.transduc; % Units P
    handles.t = linspace(0, (length(handles.s)-1)/handles.Fs, length(handles.s));
    handles.TCycle = (0:(handles.nCalib-1)/handles.Fs:20*(handles.nCalib-1)/handles.Fs);
    handles.NbCycle = 16;
    axes(handles.Audio);
    % %     plot(handles.Audio, TWVec,WavFile,'b','linewidth',1); hold(handles.Audio, 'on')
    % %     set(handles.Audio, 'Fontsize', 16, 'Fontweight', 'bold');
    % %     xlabel('Time (sec)'); ylabel('Amplitude');
    % %     xleft = 0;
    % %     xright =TW;
    % %     ybottom = -max(max(abs(totalWaveformA)));
    % %     ytop = max(max(abs(totalWaveformA)));
    % %     set(handles.Audio, 'XLim', [xleft xright]);
    % %     set(handles.Audio, 'YLim', [ybottom ytop]);
    
    %     plot(handles.Audio, handles.t,handles.s,'color', [0.3 0.3 0.3],'linewidth',1);
    plot(handles.Audio, handles.t,handles.s,'b','linewidth',1);
    xleft = 0;
    xright =max(handles.TCycle);
    ybottom = -max(max(abs(totalWaveformA)));
    ytop = max(max(abs(totalWaveformA)));
    set(handles.Audio, 'XLim', [xleft xright]);
    set(handles.Audio, 'YLim', [ybottom ytop]);
    
    %     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %     axes(handles.Spectre);
    %     plot(handles.Spectre,handles.absc, db(mean(handles.Z(handles.harmLo+1:handles.harmHi+1, :),2)));
    %     hold(handles.Spectre, 'on');
    %     plot(handles.Spectre,handles.absc, db(handles.Zref(handles.harmLo+1:handles.harmHi+1)));
    %     hold(handles.Spectre, 'off');
    %
    %     %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    %     pause(2)
    StopRecordPushed = 1;
    IsAcquiring = 0;
    global jRangeSlider hjRangeSlider
    jRangeSlider = com.jidesoft.swing.RangeSlider(0,20, 3, 19);
    jRangeSlider = javacomponent(jRangeSlider, [handles.AUDIOleft+handles.PCleft-13,...
        handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf);
    set(jRangeSlider,'PaintTicks',false, 'PaintLabels',false);
    hjRangeSlider = handle(jRangeSlider);
    set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackAcuz, handles});
    
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    indLo = ValLo-2;
    indHi = ValHi-2;
    NbAvg = indHi-indLo;
    
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    
    XLimZ = double(get(handles.Spectre, 'XLim'));
    xminZ = XLimZ(1); xmaxZ = XLimZ(2);
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    
    
    plot(handles.Audio, handles.t,handles.s,'b');
    %     ax = handles.Audio;
    h = zoom();
    setAxesZoomMotion(h,handles.Audio,'horizontal');
    set(h,'ActionPostCallback',{@ZoomCallbackAcuz, handles})
    h.Enable = 'off';
    
    axis([xmin xmax min(handles.s) max(handles.s)]);
    hold on;
    if ValLo<=2 || ValLo>handles.NbCycle+3
        plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'r','linewidth',2);
    else
        plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    end
    hold on;
    if ValHi<=2|| ValHi>handles.NbCycle+3
        plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'r','linewidth',2);
    else
        plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    end
    hold off;
    guidata(hObject, handles);
    %     DisplayChosenCurves(handles);
    handles.IndStartStopNoise = [0;19];
    guidata(hObject, handles);
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
    set(handles.pushbutton_BeginRecord, 'Enable', 'on');
    handles.StopRecordPushed = 1; %comme si on avait appuye sur le bouton arrete enregistrement
    guidata(hObject, handles);
    %     test = handles.DataAquired
    
    ValMin = handles.AUDIOleft+handles.PCleft-13;
    width = handles.AUDIOwidth+2*13;
    ValMax = ValMin+width;
    
    if NbAvg >=1 & ValLo>2 & ValHi<20
        set(handles.text_ValNbAverage_Browse, 'String', num2str(NbAvg))
        maxValSlider = getMaximum(hjRangeSlider);
        minValSlider = getMinimum(hjRangeSlider);
        pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13;
        set(handles.PannelPlayAndSave, 'Units', 'pixels');
        posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
        if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
            posPlayAndSave(1) = pos;
        else
            posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
        end
        set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
        set(handles.PannelPlayAndSave, 'Visible', 'on')
        %     set(handles.PannelPlayAndSave, 'Position', [pos 755 85 47]);
        set(handles.PlaySelection, 'Visible', 'on')
        set(handles.SaveSelection, 'Visible', 'on')
    else
        set(handles.text_ValNbAverage_Browse, 'String', num2str(NbAvg))
        maxValSlider = getMaximum(hjRangeSlider);
        minValSlider = getMinimum(hjRangeSlider);
        pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13;
        set(handles.PannelPlayAndSave, 'Units', 'pixels');
        posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
        if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
            posPlayAndSave(1) = pos;
        else
            posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
        end
        set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
        set(handles.PlaySelection, 'Visible', 'off')
        set(handles.SaveSelection, 'Visible', 'off')
    end
    
    guidata(hObject, handles)
    
elseif get(handles.radiobuttonCalculationRealTime, 'Value')==1
    
    
    if get(handles.CalculationPlayStopBBSignal, 'Value') ==1
        iStartNoise = [1];
        IndStartNoise = [0];
        IsPlaying =1;
        set(handles.DisplayDeleteHarmonics,'Enable','on');
    else
        iStartNoise = [];
        IndStartNoise = [];
        IsPlaying =0;
        set(handles.DisplayDeleteHarmonics,'Enable','off');
    end
    iEndNoise = [];
    IndStopNoise = [];
    R1rate = 0;
    R2rate = 0;
    indrate =0;
    ValRAmp = str2num(get(handles.ValRAmplitude, 'String'));
    ValHarmonicWidth = str2num(get(handles.ValHarmonicWidth, 'String'));
    set(handles.DisplayDeleteHarmonics, 'Enable','on');
    XLimSpectrum = get(handles.Spectre, 'XLim');
    
    h = zoom();
    setAxesZoomMotion(h,handles.Audio,'horizontal');
    set(h,'ActionPostCallback',{@ZoomCallbackRealTimeNEW, handles})
    h.Enable = 'off';
    
    handles.PAUSE = 0;
    handles.ExistRecord = 1;
    handles.DataAquired = 1;
    handles.StopRecordPushed = 0;
    StopRecordPushed = 0;
    IsAcquiring = 1;
    handles.LoadFileType = 'NEWAcuz';
    handles.LoadFile = 0;
    indRecord = 0;
    iStartNewRecord = 0;
    L_samples = [0];
    set(handles.pushbutton_BeginRecord,'Enable','off');
    set(handles.DisplayAllCurves,'Enable','off');
    set(handles.DisplayMean,'Enable','on');
    
    % Total Recording duration length set here
    Tacq = 60; %[s] Total Acquisition Duration
    Fs = handles.Fs;
    % NbCyclePerSecond = handles.NbCyclePerSecond;
    % NbAverage = handles.NbAverageCalculate;
    
    FreqNote4 = [261.6 277.18 293.67 311.13 329.63 349.23 369.99 392.00 415.30 440.0 ...
        466.16 493.88];
    FreqNote5 = 2*FreqNote4;
    FreqNote6 = 2*FreqNote5;
    freqNote = cat(2,FreqNote4, FreqNote5,FreqNote6);
    Position4 =[-2 -2 -1 -1 0 1 1 2 2 3 3 4];
    Position5 =[5 5 6 6 7 8 8 9 9 10 10 11 ];
    Position6 =[12 12 13 13 14 15 15 16 16 17 17 18];
    position = cat(2,Position4, Position5, Position6);
    
    %Total Length of broadband probe signal
    DureeBruit = 60 ; %[s]
    waveformTot = [];
    for kk=1:floor(DureeBruit*handles.Fs/handles.nCalib)
        waveformTot = cat(1, waveformTot, handles.CalibSource);
    end
    test = cat(2,waveformTot,waveformTot);
    
    if get(handles.CalculationPlayStopBBSignal, 'Value')==0
        %         if get(handles.radiobuttonPipe, 'Value')==1 %DevIDoutputMOTU
        %             handles.recorder = audiorecorder(Fs,handles.NbBits,handles.nChannels,handles.DevIDoutputMOTU);
        %             handles.plBBSignal = audioplayer(test, handles.Fs, 16, handles.DevIDoutputMOTU);
        %         elseif get(handles.radiobuttonLoudSpeaker, 'Value')==1
        %             %             handles.recorder = audiorecorder(Fs,handles.NbBits,handles.nChannels,handles.DevIDoutputiMicUSB);
        %             handles.recorder = audiorecorder(Fs,handles.NbBits,handles.nChannels,handles.DevIDmic);
        %
        %             handles.plBBSignal = audioplayer(test, handles.Fs, 16, handles.DevIDoutputiMicUSB);
        %         end
        
        
        
        
        handles.recorder = audiorecorder(Fs,handles.NbBits,handles.nChannels,DevID_Mic);
        handles.plBBSignal = audioplayer(test, handles.Fs, 16, DevID_Out);
        
        PlayStopBBSignal = handles.plBBSignal;
    end
    format long
    %     Time = handles.nCalib/handles.Fs;
    Time = (handles.nCalib-1)/handles.Fs;
    % set(handles.recorder,'TimerPeriod',1/NbCyclePerSecond,'TimerFcn',{@mafonctionaffichage_v3, handles});
    set(handles.recorder,'TimerPeriod',Time,'TimerFcn',{@mafonctionaffichage_v3_NEW, handles});
    %     handles.totalDATA = [[],[], []]; % NH edit
    handles.totalDATA = [[], []]; % NH edit
    %     totalDATA = [[],[],[]]; % NH edit
    totalDATA = [[],[]]; % NH edit
    guidata(hObject, handles);
    
    record(handles.recorder,Tacq);
    guidata(hObject, handles);
    pause(Tacq-1);
    
    IndLoopWhileRecord = 1;
    while  IndLoopWhileRecord<=4
        StopRecordPushed;
        
        if StopRecordPushed ==0
            test1 = isplaying(PlayStopBBSignal);
            test2 = IsPlaying;
            %             if test1~=test2;
            %             if IsPlaying==1
            if isplaying(PlayStopBBSignal)==1
                stop(PlayStopBBSignal);
                play(PlayStopBBSignal);
            end
            IndLoopWhileRecord = IndLoopWhileRecord+1;
            %             display('new record');
            
            
            newDATA = getaudiodata(handles.recorder);
            %             s = newDATA(1:(indRecord - iStartNewRecord -1)*handles.nCalib,1)* sqrt(2) / handles.transduc;
            %             egg = newDATA(1:(indRecord - iStartNewRecord -1)*handles.nCalib,2);
            N = floor(size(newDATA,1)/handles.nCalib);
            indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib);
            if IsPlaying==1
                %                 get(handles.
                %                 IndStopNoise = [IndStopNoise, indRecord];
                %                 IndStartNoise = [IndStartNoise, indRecord+1];
                IndStopNoise = [IndStopNoise, indN-1];
                IndStartNoise = [IndStartNoise, indN];
            else
                %                 IndStopNoise = [IndStopNoise, indRecord+1];
                %                 IndStartNoise = [IndStartNoise, indRecord];
                IndStopNoise = [IndStopNoise, indN];
                IndStartNoise = [IndStartNoise, indN-1];
            end
            s = newDATA(1:N*handles.nCalib,1)* sqrt(2) / handles.transduc;
            egg = newDATA(1:N*handles.nCalib,2);
            acc = newDATA(1:N*handles.nCalib,3);
            % NH edit to add accelerometer
            handles.totalDATA = cat(1,handles.totalDATA, [s, audio]);
            SizeTotalDATA = size(handles.totalDATA);
            guidata(hObject, handles);
            %             totalDATA = cat(1,totalDATA, [s, egg, acc]); % NH edit
            iStartNewRecord = indRecord;
            %             if get(handles.radiobuttonPipe, 'Value')==1 %DevIDoutputMOTU
            %                 handles.recorder = audiorecorder(Fs,handles.NbBits,handles.nChannels,handles.DevIDoutputMOTU);
            %             elseif get(handles.radiobuttonLoudSpeaker, 'Value')==1
            %                 handles.recorder = audiorecorder(Fs,handles.NbBits,handles.nChannels,handles.DevIDoutputiMicUSB);
            %             end
            
            % check input
            devinfo = audiodevinfo;
            input = devinfo.input;
            DevID_Mic=cell2mat({input(handles.audioInputMenu.Value).ID});
            % check output
            devinfo = audiodevinfo;
            output = devinfo.output;
            DevID_Out=cell2mat({output(handles.audioOutputMenu.Value).ID});
            handles.recorder = audiorecorder(Fs,handles.NbBits,handles.nChannels,DevID_Mic);
            
            set(handles.recorder,'TimerPeriod',Time,'TimerFcn',{@mafonctionaffichage_v3_NEW, handles});
            guidata(hObject, handles)
            record(handles.recorder,Tacq);
            guidata(hObject, handles)
            pause(Tacq-1)
        else
            IndLoopWhileRecord=5;
            %             display('no new record');
            %             SizeTotalDATA = size(handles.totalDATA)
            SizeTotalDATA = size(totalDATA);
        end
    end
end


function mafonctionaffichageNoBBSignal(hObject,eventdata, handles)

global Fs k Nfft Lsamples Stop hjSlider %NbAverage NbCyclePerSecond

k = k+1;
samples  = getaudiodata(hObject);
assignin('base', 'samples', samples);
handles.egg = samples(:,2);
if get(handles.radiobuttonPipe, 'Value')==1
    handles.audio = samples(:,1) * sqrt(2) / handles.transduc; %Units [Pa]
else
    handles.audio = samples(:,1);
end
size(handles.audio);
L = length(handles.audio);
Lsamples=[Lsamples, L];
% % if mod((L_samples(i+1)-L_samples(i)),handles.nCalib)~=0
% %     indStartSound = L+1
% % else
% %     %display('indice ok ************************')
% % end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%graph Audio
EggSliderVal = get(hjSlider,'Value');
plot(handles.Audio, handles.egg(end-(handles.nCalib-EggSliderVal):end),'r'); %'color', [0.3 0.3 0.3]);
hold(handles.Audio, 'off');
xlim(handles.Audio, [1 handles.nCalib]);
%graph Audio
plot(handles.Audio, (EggSliderVal+1:1:handles.nCalib), handles.audio(end-handles.nCalib +EggSliderVal +1:end),'r'); %'color', [0.3 0.3 0.3]);
hold(handles.Audio, 'on');
plot(handles.Audio, (1:1:EggSliderVal), handles.audio(end-handles.nCalib:end-handles.nCalib+EggSliderVal-1), 'color', [0.3 0.3 0.3]);
plot(handles.Audio, [EggSliderVal EggSliderVal], get(handles.Audio, 'YLim') ,'r');
hold(handles.Audio, 'off');
xlim(handles.Audio, [1 handles.nCalib]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

NbAverage = str2double(get(handles.edit_ValNbAverage_Calculate,'String'));

if (L- NbAverage*Nfft+1)<2
    var = handles.audio(L-(k*handles.nCalib)+1:L,1);
    handles.NEWsamples = reshape(var, [], k);
else
    var = handles.audio(L- (NbAverage)*handles.nCalib+1:L,1);
    handles.NEWsamples = reshape(var, [], NbAverage);
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % % Nfft = 2^nextpow2(Fs/NbCyclePerSecond);
%Nfft = floor(Fs/NbCyclePerSecond);
% harmHi = floor(Nfft/2);
% handles.NEWsamples(:,1) = 100*handles.NEWsamples(:,1);

Z = fft(handles.NEWsamples, Nfft);
Z = Z(handles.harmLo +1 :handles.harmHi + 1,:);
Z(1,:) = Z(1,:)/2;
handles.Z = Z*2/Nfft;
% size(handles.Z);
freqZ = handles.Fs*(0:(Nfft/2))/Nfft;
freqZplot = freqZ(handles.harmLo +1 :handles.harmHi + 1);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Zplot = 20*log(abs(mean(handles.Z,2)));
MeanZplot =mean(Zplot);
%     MeanZplot(:,:) = 0;




% % % % % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % % % % % [pks,locs,w,p] = findpeaks(sgolayfilt(Zplot-MeanZplot,3,25),freqZ,...
% % % % % %         'MinPeakHeight',0.20*max(Zplot-MeanZplot));
% % % % % [pks,locs,w,p] = findpeaks(medfilt1(sgolayfilt(Zplot-MeanZplot,3,25),5),freqZ,...
% % % % %         'MinPeakHeight',0.10*max(Zplot-MeanZplot), 'WidthReference','halfheight');
% % % % % % [pks,locs,w,p] = findpeaks(Zplot-MeanZplot,freqZ,...
% % % % % %         'MinPeakHeight',(1-0.25)*max(Zplot)); %, 'SortStr', 'descend'
% % % % % name_pks = cat(2,'pks', num2str(i));
% % % % % name_locs = cat(2,'locs', num2str(i));
% % % % % %name_w = cat(2,'w', num2str(i));
% % % % % %name_p = cat(2,'p', num2str(i));
% % % % % findH.name_pks = pks;
% % % % % findH.name_locs = locs;
% % % % % findH.name_w = w;
% % % % % findH.name_p = p;
% % % % % % [~,indH1] = max(pks);
% % % % % % findH.indH = indH1;
% % % % % indH1 = 1;
% % % % % Zfilt = medfilt1(sgolayfilt(Zplot-MeanZplot,3,25),5);
% % % % % if length(locs)>0
% % % % % findH.freqH1 = locs(indH1);
% % % % % findH.widthH1 = w(indH1);
% % % % % [Eps, indEps] = min(abs(2*findH.freqH1*ones(1,length(findH.name_locs))-...
% % % % % findH.name_locs));
% % % % % findH.freqH2 = findH.name_locs(indEps);
% % % % % findH.widthH2 = w(indEps);
% % % % % findH;
% % % % %
% % % % % %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % % % % graphAnalyse = handles.Analyse;
% % % % % % frequence2position(findH.freqH1,ax, '.r');
% % % % % %frequence2position([findH.freqH1 findH.freqH2] ,graphAnalyse);
% % % % % frequence2position(locs ,graphAnalyse);
% % % % %
% % % % %
% % % % % Xmin1 = floor((findH.freqH1-findH.widthH1/2 - handles.FreqLo)*(length(freqZ)-1)/(handles.FreqHi-handles.FreqLo))+1-10;
% % % % % if Xmin1<=0;
% % % % %     Xmin1=1;
% % % % % end
% % % % % Xmax1 = floor((findH.freqH1+findH.widthH1/2 - handles.FreqLo)*(length(freqZ)-1)/(handles.FreqHi-handles.FreqLo))+1+10;
% % % % % Xmin2 = floor((findH.freqH2-findH.widthH2/2 - handles.FreqLo)*(length(freqZ)-1)/(handles.FreqHi-handles.FreqLo))+1-10;
% % % % % if Xmin2<=0;
% % % % %     Xmin2=1;
% % % % % end
% % % % % Xmax2 = floor((findH.freqH2+findH.widthH2/2 - handles.FreqLo)*(length(freqZ)-1)/(handles.FreqHi-handles.FreqLo))+1+10;
% % % % %
% % % % % Zfilt(Xmin1:Xmax1)= mean([Zfilt(Xmin1) Zfilt(Xmax1)]);
% % % % % Zfilt(Xmin2:Xmax2)= mean([Zfilt(Xmin2) Zfilt(Xmax2)]);
% % % % %
% % % % % end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
graph2 = handles.Spectre;
% plot(graph2, freqZ,
% 20*log(abs(mean(handles.Z,2)./handles.Zref(handles.harmLo +1 :handles.harmHi + 1))), 'b'); % hold all;
%plot(graph2, freqZ, sgolayfilt(Zplot-MeanZplot,3,25) , 'r');
% plot(freqZ, 20*log(abs((handles.Z(:,1)./angle(handles.Z(:,2)))./(handles.Zref./angle(handles.TotSpectrumE)))),'b');
% plot(freqZ, 20*log(abs((handles.Z(:,1)./imag(handles.Z(:,2))))),'b');
% % plot(freqZ, 20*log(abs(handles.Z(:,1))),'b');
% plot(freqZ, 20*log(abs((handles.Z(:,1))./(handles.Zref))),'b');  hold on;
% % % % % plot(freqZ, 20*log(abs(mean(handles.Z,2)./handles.Zref)),'b'); % hold all;
if get(handles.DisplayRawData, 'Value') ==1
    plot(graph2, freqZplot, Zplot - MeanZplot , 'k');
    hold(graph2,'on');
end
if get(handles.DisplayFilteredData, 'Value') ==1
    plot(graph2, freqZplot, medfilt1(sgolayfilt(Zplot-MeanZplot,3,25),5), 'b', 'linewidth', 4);
    hold(graph2,'on');
end

Val = get(handles.PannelChooseDisplay, 'UserData');
for ii=1:37
    if Val(ii)~=0
        plot(handles.Spectre, [Val(ii),Val(ii)], [-50 150], '-y','linewidth', 3);
        hold on;
    end
end


% if get(handles.DisplayDeleteHarmonics, 'Value') ==1
%     plot(graph2, freqZ, Zfilt, 'r');
%     hold(graph2,'on');
% end
% derZ = diff(Zplot-MeanZplot,5)./(freqZ(2)-freqZ(1));
% derZ = diff(medfilt1(sgolayfilt(Zplot-MeanZplot,3,25),5),5)./(freqZ(2)-freqZ(1));
% derZ = diff(Zfilt,5)./(freqZ(2)-freqZ(1));
% % plot(graph2, freqZ(1:length(derZ)), medfilt1(sgolayfilt(derZ,3,25),6) ,'g');
% if get(handles.DisplayDerivUnwrapPhase, 'Value') ==1
%     plot(graph2, freqZ(1:length(derZ)), derZ ,'g');
%     hold(graph2,'on');
% end
% plot( freqZ, 20*log10(abs(sgolayfilt(handles.Z(:,1)./handles.Zref,3,25))), 'r');
% plot( freqZ, medfilt1(20*log(abs(mean(handles.Z,2)./handles.Zref)),4), 'r');
% ylim(graph2,[-50 50])
% xlim(graph2, [handles.FreqLo handles.FreqHi]);
xlim(graph2, [0 handles.FreqHi]);
% ylim(graph2, [min(sgolayfilt(derZ,3,25)) max(sgolayfilt(derZ,3,25))]);
ylim(graph2, [min(Zplot - MeanZplot) max(Zplot - MeanZplot)]);
ylim(graph2, [-50 150]);
hold(graph2,'off');



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
graph3 = handles.Phase;
Y = unwrap(angle(mean(handles.Z,2)));
derY = diff(Y)./(freqZ(2)-freqZ(1));
plot(graph3, freqZ(1:length(derY)), sgolayfilt(derY,3,41) ,'r');
hold(graph3,'on');
plot(graph3, freqZ(1:length(derY)), medfilt1(sgolayfilt(derY,3,41),6) ,'k');
xlim(graph3,[0 handles.FreqHi]);
hold(graph3,'off');



function mafonctionaffichage_v3(hObject,eventdata, handles)

global Fs i L_samples hjSlider %NbAverage NbCyclePerSecond

i = i+1;
samples  = getaudiodata(hObject);
assignin('base', 'samples', samples);
handles.egg = samples(:,2);
if get(handles.radiobuttonPipe, 'Value')==1
    handles.audio = samples(:,1) * sqrt(2) / handles.transduc; %Units [Pa]
else
    handles.audio = samples(:,1);
end
size(handles.audio);
L = length(handles.audio);
L_samples=[L_samples, L];
% % if mod((L_samples(i+1)-L_samples(i)),handles.nCalib)~=0
% %     indStartSound = L+1
% % else
% %     %display('indice ok ************************')
% % end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%graph Audio
EggSliderVal = get(hjSlider,'Value');
plot(handles.Audio, handles.egg(end-(handles.nCalib-EggSliderVal):end),'r'); %'color', [0.3 0.3 0.3]);
hold(handles.Audio, 'off');
%graph Audio

plot(handles.Audio, (EggSliderVal+1:1:handles.nCalib), handles.audio(end-handles.nCalib +EggSliderVal +1:end),'r'); %'color', [0.3 0.3 0.3]);
hold(handles.Audio, 'on');
plot(handles.Audio, (1:1:EggSliderVal), handles.audio(end-handles.nCalib:end-handles.nCalib+EggSliderVal-1), 'color', [0.3 0.3 0.3]);
plot(handles.Audio, [EggSliderVal EggSliderVal], get(handles.Audio, 'YLim') ,'r');
hold(handles.Audio, 'off');
xlim(handles.Audio, [1 handles.nCalib]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
NbAverage = str2double(get(handles.edit_ValNbAverage_Calculate,'String'));

if (L- NbAverage*handles.nCalib+1)<2
    var = handles.audio(L- i*handles.nCalib+1:L,1);
    handles.NEWsamples = reshape(var, [], i);
else
    var = handles.audio(L- NbAverage*handles.nCalib+1:L,1);
    handles.NEWsamples = reshape(var, [], NbAverage);
end

% figure(2)
% for k=1:NbAverage
% subplot(NbAverage,1,k)
% plot(handles.NEWsamples(:,k))
% end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% % % Nfft = 2^nextpow2(Fs/NbCyclePerSecond);
%Nfft = floor(Fs/NbCyclePerSecond);
Nfft = handles.numPoints;
% harmHi = floor(Nfft/2);
% handles.NEWsamples(:,1) = 100*handles.NEWsamples(:,1);
Z = fft(handles.NEWsamples, Nfft);
Z = Z(handles.harmLo +1 :handles.harmHi + 1,:);
Z(1,:) = Z(1,:)/2;
handles.Z = Z*2/Nfft;
% size(handles.Z);
freqZ = Fs*(0:(Nfft/2))/Nfft;
freqZ = freqZ(handles.harmLo +1 :handles.harmHi + 1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if get(handles.radiobuttonCalculationRealTime, 'Value')==1
    Zplot = 20*log(abs(mean(handles.Z,2)./handles.Zref(handles.harmLo +1 :handles.harmHi + 1)));
    MeanZplot = mean(Zplot);
    %     MeanZplot(:,:) = 0;
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% [pks,locs,w,p] = findpeaks(sgolayfilt(Zplot-MeanZplot,3,25),freqZ,...
%         'MinPeakHeight',0.20*max(Zplot-MeanZplot));
[pks,locs,w,p] = findpeaks(medfilt1(sgolayfilt(Zplot-MeanZplot,3,25),5),freqZ,...
    'MinPeakHeight',0.10*max(Zplot-MeanZplot), 'WidthReference','halfheight');
% [pks,locs,w,p] = findpeaks(Zplot-MeanZplot,freqZ,...
%         'MinPeakHeight',(1-0.25)*max(Zplot)); %, 'SortStr', 'descend'
name_pks = cat(2,'pks', num2str(i));
name_locs = cat(2,'locs', num2str(i));
%name_w = cat(2,'w', num2str(i));
%name_p = cat(2,'p', num2str(i));
findH.name_pks = pks;
findH.name_locs = locs;
findH.name_w = w;
findH.name_p = p;
% [~,indH1] = max(pks);
% findH.indH = indH1;
indH1 = 1;
Zfilt = medfilt1(sgolayfilt(Zplot-MeanZplot,3,25),5);
% if length(locs)>0
% findH.freqH1 = locs(indH1);
% findH.widthH1 = w(indH1);
% [Eps, indEps] = min(abs(2*findH.freqH1*ones(1,length(findH.name_locs))-...
% findH.name_locs));
% findH.freqH2 = findH.name_locs(indEps);
% findH.widthH2 = w(indEps);
% findH;
%
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% graphAnalyse = handles.Analyse;
% % frequence2position(findH.freqH1,ax, '.r');
% %frequence2position([findH.freqH1 findH.freqH2] ,graphAnalyse);

%
%
% Xmin1 = floor((findH.freqH1-findH.widthH1/2 - handles.FreqLo)*(length(freqZ)-1)/(handles.FreqHi-handles.FreqLo))+1-10;
% if Xmin1<=0;
%     Xmin1=1;
% end
% Xmax1 = floor((findH.freqH1+findH.widthH1/2 - handles.FreqLo)*(length(freqZ)-1)/(handles.FreqHi-handles.FreqLo))+1+10;
% Xmin2 = floor((findH.freqH2-findH.widthH2/2 - handles.FreqLo)*(length(freqZ)-1)/(handles.FreqHi-handles.FreqLo))+1-10;
% if Xmin2<=0;
%     Xmin2=1;
% end
% Xmax2 = floor((findH.freqH2+findH.widthH2/2 - handles.FreqLo)*(length(freqZ)-1)/(handles.FreqHi-handles.FreqLo))+1+10;
%
% Zfilt(Xmin1:Xmax1)= mean([Zfilt(Xmin1) Zfilt(Xmax1)]);
% Zfilt(Xmin2:Xmax2)= mean([Zfilt(Xmin2) Zfilt(Xmax2)]);
%
% end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
graph2 = handles.Spectre;
% plot(graph2, freqZ,
% 20*log(abs(mean(handles.Z,2)./handles.Zref(handles.harmLo +1 :handles.harmHi + 1))), 'b'); % hold all;
%plot(graph2, freqZ, sgolayfilt(Zplot-MeanZplot,3,25) , 'r');
% plot(freqZ, 20*log(abs((handles.Z(:,1)./angle(handles.Z(:,2)))./(handles.Zref./angle(handles.TotSpectrumE)))),'b');
% plot(freqZ, 20*log(abs((handles.Z(:,1)./imag(handles.Z(:,2))))),'b');
% % plot(freqZ, 20*log(abs(handles.Z(:,1))),'b');
% plot(freqZ, 20*log(abs((handles.Z(:,1))./(handles.Zref))),'b');  hold on;
% % % % % plot(freqZ, 20*log(abs(mean(handles.Z,2)./handles.Zref)),'b'); % hold all;
if get(handles.DisplayRawData, 'Value') ==1
    plot(graph2, freqZ, Zplot - MeanZplot , 'k');
    hold(graph2,'on');
end
if get(handles.DisplayFilteredData, 'Value') ==1
    plot(graph2, freqZ, medfilt1(sgolayfilt(Zplot-MeanZplot,3,25),5), 'b', 'linewidth', 4);
    hold(graph2,'on');
end
if get(handles.DisplayDeleteHarmonics, 'Value') ==1
    plot(graph2, freqZ, Zfilt, 'r');
    hold(graph2,'on');
end
% derZ = diff(Zplot-MeanZplot,5)./(freqZ(2)-freqZ(1));
% derZ = diff(medfilt1(sgolayfilt(Zplot-MeanZplot,3,25),5),5)./(freqZ(2)-freqZ(1));
derZ = diff(Zfilt,5)./(freqZ(2)-freqZ(1));
% plot(graph2, freqZ(1:length(derZ)), medfilt1(sgolayfilt(derZ,3,25),6) ,'g');
if get(handles.DisplayDerivUnwrapPhase, 'Value') ==1
    plot(graph2, freqZ(1:length(derZ)), derZ ,'g');
    hold(graph2,'on');
end

Val = get(handles.PannelChooseDisplay, 'UserData');
for ii=1:length(handles.KeyBoardFreq)
    if Val(ii)~=0
        plot(handles.Spectre, [Val(ii),Val(ii)], get(handles.Spectre, 'YLim'), '-y', 'linewidth', 3);
        hold(handles.Spectre, 'on');
        plot(handles.Phase, [Val(ii),Val(ii)], get(handles.Phase, 'YLim'), '-y', 'linewidth', 3);
        hold(handles.Phase, 'on');
    end
end




% plot( freqZ, 20*log10(abs(sgolayfilt(handles.Z(:,1)./handles.Zref,3,25))), 'r');
% plot( freqZ, medfilt1(20*log(abs(mean(handles.Z,2)./handles.Zref)),4), 'r');
% ylim(graph2,[-50 50])
% xlim(graph2, [handles.FreqLo handles.FreqHi]);
% xlim(graph2, [0 handles.FreqHi]);
xlim(graph2, [0 2000]);
% ylim(graph2, [min(sgolayfilt(derZ,3,25)) max(sgolayfilt(derZ,3,25))]);
% ylim(graph2, [min(Zplot - MeanZplot) max(Zplot - MeanZplot)]);
% ylim(graph2, [-50 50]);
ylim(graph2, [-20 20]);
hold(graph2,'off');



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
graph3 = handles.Phase;
Y = unwrap(angle(mean(handles.Z,2)./handles.Zref(handles.harmLo +1 :handles.harmHi + 1)));
derY = diff(Y)./(freqZ(2)-freqZ(1));
plot(graph3, freqZ(1:length(derY)), sgolayfilt(derY,3,41) ,'r');
hold(graph3,'on');
plot(graph3, freqZ(1:length(derY)), medfilt1(sgolayfilt(derY,3,41),6) ,'k');
xlim(graph3,[0 handles.FreqHi]);
hold(graph3,'off');




% function pos = frequence2position(f, ax, marker)


% --- Executes on button press in pushbutton_PauseRecord.
% function pushbutton_PauseRecord_Callback(hObject, eventdata, handles)
% % hObject    handle to pushbutton_PauseRecord (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% global i k
% % i
% % handles.nCalib
% % (i-1)*handles.nCalib
% handles.PAUSE = 1;
% set(handles.pushbutton_PauseRecord,'Enable','off')
% set(handles.pushbutton_BeginRecord,'Enable','on')
% stop(handles.recorder)
% handles.newDATA = getaudiodata(handles.recorder);
% if get(handles.radiobuttonCalculationNoBBSignal, 'Value')==0
%     handles.newDATA = handles.newDATA(1:(i-1)*handles.nCalib,:)* sqrt(2) / handles.transduc;
% else
%     handles.newDATA = handles.newDATA(1:(k-1)*handles.nCalib,:)* sqrt(2) / handles.transduc;
% end
% handles.totalDATA = cat(1, handles.totalDATA, handles.newDATA);
% guidata(hObject, handles)

% --- Executes on button press in pushbutton_StopRecord.
% function pushbutton_StopRecord_Callback(hObject, eventdata, handles)
% % hObject    handle to pushbutton_StopRecord (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
% % --- Executes on button press in pushbutton_PlayRecord.
%
%
%
% existe = handles.ExistRecord;
% handles.StopRecordPushed = 1;
% if handles.ExistRecord == 1 || handles.StartBBSignalPushed == 1
%     handles.ExistRecord = 0;
%     handles.StartBBSignalPushed = 1;
%     global i k
%     stop(handles.recorder)
%     handles.newDATA = getaudiodata(handles.recorder);
%     if get(handles.radiobuttonCalculationNoBBSignal, 'Value')==0
%         handles.RecordType = 'RealTime';
%         handles.newDATA = handles.newDATA(1:(i-1)*handles.nCalib,:)* sqrt(2) / handles.transduc;
%     else
%         handles.newDATA = handles.newDATA(1:(k-1)*handles.nCalib,:)* sqrt(2) / handles.transduc;
%         handles.RecordType = 'NoBBSignal';
%     end
%
%     if handles.PAUSE == 0;
%     handles.totalDATA = cat(1,handles.totalDATA, handles.newDATA);
%     end
%
% if get(handles.radiobuttonCalculationNoBBSignal, 'Value')==0
%     stop(handles.plBBSignal)
%     set(handles.pushbutton_BeginRecord,'Enable','off')
% else
%     set(handles.pushbutton_BeginRecord,'Enable','on')
% end
% set(handles.DisplayAllCurves,'Enable','on')
% set(handles.DisplayMean,'Enable','on');
%
% set(handles.PannelPlayAndSave, 'Visible', 'on');
% posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
% posPlayAndSave(1) = handles.AUDIOleft+handles.PCleft;
% set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
% % set(handles.PannelPlayAndSave, 'Position', [handles.AUDIOleft+handles.PCleft 755 85 47]);
% set(handles.PlaySelection, 'Visible', 'on');
% set(handles.PlaySelection, 'Enable', 'on');
% set(handles.SaveSelection, 'Visible', 'on');
% set(handles.SaveSelection, 'Enable', 'on');
%
% disp('End of Recording.');
%
% graph1 = handles.Audio;
% handles.t = linspace(0, (length(handles.totalDATA)-1)/handles.Fs, length(handles.totalDATA));
%
% % % s_normalised = handles.totalDATA(:,1)/max(abs(handles.totalDATA(:,1)));
% % % plot(graph1, linspace(0, (length(handles.totalDATA)-1)/handles.Fs, length(handles.totalDATA)),...
% % %     s_normalised , 'color', [0.3 0.3 0.3]);
% % % xlim(graph1, [0 (length(handles.totalDATA)-1)/handles.Fs])
% % % ylim(graph1, [min(s_normalised) max(s_normalised)])
%
% s = handles.totalDATA(:,1);
% plot(graph1, linspace(0, (length(handles.totalDATA)-1)/handles.Fs, length(handles.totalDATA)),...
%     s, 'color', [0.3 0.3 0.3]);
% xlim(graph1, [0 (length(handles.totalDATA)-1)/handles.Fs])
% ylim(graph1, [min(s) max(s)])
% hold(graph1, 'off');
%
% ax = handles.Audio;
% h = zoom(ax)
% setAxesZoomMotion(h,handles.Audio,'horizontal');
% set(h,'ActionPostCallback',{@ZoomCallbackRealTimeNEW, handles})
% axes(ax)
% guidata(hObject,handles);
%
% global jRangeSlider hjRangeSlider
% handles.MinValSlider = 0;
% handles.NbCycle = floor(length(handles.totalDATA)/handles.nCalib);
% handles.MaxValSlider = handles.NbCycle;
% handles.TCycle = linspace(0, (length(handles.totalDATA)-1)/handles.Fs, handles.NbCycle+1)
% % % handles.s = s_normalised;
% handles.s = s; %ici handles.s est donc en [Pa]
% handles.LoadFileType = 'NEWAcuz';
% guidata(hObject, handles)
% [handles.Z, handles.freqZ] = calculate_Z(handles);
% guidata(hObject, handles);
%
% jRangeSlider = com.jidesoft.swing.RangeSlider(handles.MinValSlider,handles.MaxValSlider,handles.MinValSlider,handles.MaxValSlider);
% jRangeSlider = javacomponent(jRangeSlider, [handles.AUDIOleft+handles.PCleft-13,...
%     handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf);
% % [colorR, colorG, colorB] = getRGBcolorSlider(handles)
% set(jRangeSlider,'PaintTicks',false, 'PaintLabels',false);%, 'Background', java.awt.Color(colorR, colorG, colorB))
% hjRangeSlider = handle(jRangeSlider);
% %         set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackRealTime, handles});
% set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackRealTimeNEW, handles})
%
% DisplayChosenCurves(handles)
% end
%
% handles.ExistRecord = 0;
% guidata(hObject, handles);

% --- Executes on button press in PlaySelection.
function PlaySelection_Callback(hObject, eventdata, handles)
% hObject    handle to PlaySelection (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% handles.ValLo, handles.ValHi
val = get(hObject, 'Value')


set(handles.Audio,'Tag','Audio');
set(handles.Spectre,'Tag','Spectre');
set(handles.Phase,'Tag','Phase');
guidata(hObject, handles)

%display('*-+-*-+-*-+-*')
get(handles.Audio, 'XLim')
XLim = double(get(handles.Audio, 'XLim'))
if strcmp(handles.RecordType, 'Acuz') ==1
    YLimAudio = [min(handles.s) max(handles.s)];
else
    YLimAudio = [-max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))...
        max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))];
end
%display('*-+-*-+-*-+-*')


global hjRangeSlider h plSelection KeyBoardFreq

dataac = handles.DataAquired
recordtype = handles.RecordType
OLDNEWacuz = handles.LoadFileType
KeyBoardFreq = get(handles.PannelChooseDisplay, 'UserData')

%if val==1
ValLo = get(hjRangeSlider,'LowValue');
ValHi = get(hjRangeSlider,'HighValue');

if  strcmp(handles.LoadFileType,'OLDAcuz')==1 & (ValLo<=2 || ValHi<=2 || ValHi== 20 || ValLo== 20 || ValHi==ValLo)
    %         %display('^^')
    set(hObject, 'Value',0);
    set(handles.PlaySelection, 'CData', imresize(imread('PlayPause.png'),0.051));
elseif strcmp(handles.LoadFileType,'NEWAcuz')==1 & handles.DataAquired == 1 &  strcmp(handles.RecordType, 'Acuz')==1 & (ValLo<=2 || ValHi<=2 || ValHi== 20 || ValLo== 20 || ValHi==ValLo)
    %         %display('$$')
    set(hObject, 'Value',0);
    set(handles.PlaySelection, 'CData', imresize(imread('PlayPause.png'),0.051));
elseif ValHi>ValLo
    %         ValLo
    %         ValHi
    %         %display('**')
    XLim = double(get(handles.Audio, 'XLim'));
    xmin= XLim(1); xmax=XLim(2);
    
    devinfo = audiodevinfo;
    output = devinfo.output; LOutput = max(size(output));
    OutputName={output(linspace(1,LOutput,LOutput)).Name};
    input = devinfo.input; LInput = max(size(input));
    InputName={output(linspace(1,LInput,LInput)).Name};
    [~, DevIndexBuiltInOutput] = max(strcmp(OutputName, 'Built-in Output (Core Audio)'));
    handles.DevIndexBuiltInOutput=cell2mat({output(DevIndexBuiltInOutput).ID});
    [~, DevIndexBuiltInInput] = max(strcmp(InputName, 'Built-in Microph (Core Audio)'));
    handles.DevIndexBuiltInInput=cell2mat({output(DevIndexBuiltInInput).ID});
    
    %         set(handles.PlaySelection, 'CData', imresize(imread('PlayPauseShadow.png'),0.051));
    OldPicture = get(hObject, 'CData');
    NewPicture=zeros(size(OldPicture));
    
    MaxOldPicture = max(OldPicture(:,1,1));
    if MaxOldPicture>1
        for i=1:size(OldPicture,1)
            for j =1:size(OldPicture,2)
                if OldPicture(i,j,1)==255 & OldPicture(i,j,2)==255 & OldPicture(i,j,3)==255
                    NewPicture(i,j,1)= 202;
                    NewPicture(i,j,2)= 202;
                    NewPicture(i,j,3)= 202;
                else
                    NewPicture(i,j,1) = OldPicture(i,j,1);
                    NewPicture(i,j,2) = OldPicture(i,j,2);
                    NewPicture(i,j,3) = OldPicture(i,j,3);
                end
            end
        end
        NewPicture=NewPicture/255
    else
        for i=1:size(OldPicture,1)
            for j =1:size(OldPicture,2)
                if OldPicture(i,j,1)==255/255 & OldPicture(i,j,2)==255/255 & OldPicture(i,j,3)==255/255
                    NewPicture(i,j,1)= 202/255;
                    NewPicture(i,j,2)= 202/255;
                    NewPicture(i,j,3)= 202/255;
                else
                    NewPicture(i,j,1) = OldPicture(i,j,1);
                    NewPicture(i,j,2) = OldPicture(i,j,2);
                    NewPicture(i,j,3) = OldPicture(i,j,3);
                end
            end
        end
    end
    set(hObject, 'CData',NewPicture)
    set(handles.SaveSelection, 'BackgroundColor', [1 1 1]);
    plSelection = audioplayer(handles.s(ValLo*handles.nCalib+1:ValHi*handles.nCalib)/...
        max(abs(handles.s(ValLo*handles.nCalib+1:ValHi*handles.nCalib))), handles.Fs, handles.NbBits, handles.DevIndexBuiltInOutput);
    
    
    
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    [~,indZLo] = min(abs(tLo*ones(1,length(handles.TCycle))-handles.TCycle));
    [~,indZHi] = min(abs(tHi*ones(1,length(handles.TCycle))-handles.TCycle));
    
    i=0;
    pasOut = 1000;
    pasIn = 100;
    XLimZ = double(get(handles.Spectre, 'XLim'));
    xminZ = XLimZ(1); xmaxZ=XLimZ(2);
    
    freqZplot = handles.freqZ(handles.harmLo+1:handles.harmHi+1);
    
    if  strcmp(handles.LoadFileType, 'NEWAcuz')==1
        if strcmp(handles.RecordType, 'RealTime') ==1 || (strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 0)
            meanZ = mean(20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg))));
            yminZ = min(min(20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg))))-meanZ);
            ymaxZ = max(max(20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg))))-meanZ);
        elseif (strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 1)
            meanZ = mean(20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo-3+NbAvg-1)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg))));
            yminZ = min(min(20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo-3+NbAvg-1)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg))))-meanZ);
            ymaxZ = max(max(20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo-3+NbAvg-1)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg))))-meanZ);
        end
    else
        meanZ = mean(20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo-3+NbAvg-1)./...
            repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg))));
        yminZ = min(min(20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo-3+NbAvg-1)./...
            repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg))))-meanZ);
        ymaxZ = max(max(20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo-3+NbAvg-1)./...
            repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg))))-meanZ);
    end
    
    
    
    uu = 1;
    step = 1+floor(NbAvg*handles.nCalib/(3*handles.Fs)); %3second limitation
    if strcmp(handles.LoadFileType, 'NEWAcuz')==1
        if strcmp(handles.RecordType, 'RealTime') ==1
            if isempty(handles.IndStartStopNoise)
                %                         %display('No BBSignal');
                ExistAmpPlot =1;
                uu = size(handles.IndStartStopNoise,2) +1 ;
                AmpPlot = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)));
                MeanAmpPlot = mean(AmpPlot);
                PhasePlot = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)));
                DerivPhasePlot = diff(PhasePlot)/(handles.freqZ(2)-handles.freqZ(1));
                MeanDerivPhasePlot = mean(DerivPhasePlot);
                freqDerivPhasePlot = handles.freqZ(handles.harmLo+1:handles.harmLo+size(DerivPhasePlot,1));
                %                 %display('********** AmpPlot calcule 1 *********')
            else
                if handles.IndStartStopNoise(1,1)==0 & handles.IndStartStopNoise(2,1)*handles.nCalib < length(handles.s) ...
                        & (ValHi*handles.nCalib<handles.IndStartStopNoise(2,1)*handles.nCalib)
                    %                     %display('%%%%%%% BBSignal avant chant ')
                    AmpPlot = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZHi-1)./...
                        repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,indZHi-indZLo)));
                    SizeAmpPlot = size(AmpPlot);
                    MeanAmpPlot = mean(AmpPlot);
                    SizeMeanAmpPlot = size(MeanAmpPlot);
                    PhasePlot = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZHi-1)./...
                        repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,indZHi-indZLo)));
                    DerivPhasePlot = diff(PhasePlot)/(handles.freqZ(2)-handles.freqZ(1));
                    MeanDerivPhasePlot = mean(DerivPhasePlot);
                    freqDerivPhasePlot = handles.freqZ(handles.harmLo+1:handles.harmLo+size(DerivPhasePlot,1));
                    %                     %display('********** AmpPlot calcule 2 *********')
                elseif handles.IndStartStopNoise(1,1)==0 & handles.IndStartStopNoise(2,1)*handles.nCalib >= length(handles.s)
                    %                     %display('%%%%%%% case que du BBSignal')
                    AmpPlot = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZHi-1)./...
                        repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,indZHi-indZLo)));
                    SizeAmpPlot = size(AmpPlot);
                    MeanAmpPlot = mean(AmpPlot);
                    SizeMeanAmpPlot = size(MeanAmpPlot);
                    PhasePlot = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZHi-1)./...
                        repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,indZHi-indZLo)));
                    DerivPhasePlot = diff(PhasePlot)/(handles.freqZ(2)-handles.freqZ(1));
                    MeanDerivPhasePlot = mean(DerivPhasePlot);
                    freqDerivPhasePlot = handles.freqZ(handles.harmLo+1:handles.harmLo+size(DerivPhasePlot,1));
                    %                     %display('********** AmpPlot calcule 3 *********')
                elseif ValLo*handles.nCalib>handles.IndStartStopNoise(2,end)*handles.nCalib & ValHi>ValLo
                    AmpPlot = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZHi-1)));
                    SizeAmpPlot = size(AmpPlot);
                    MeanAmpPlot = mean(AmpPlot);
                    SizeMeanAmpPlot = size(MeanAmpPlot);
                    PhasePlot = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZHi-1)));
                    DerivPhasePlot = diff(PhasePlot)/(handles.freqZ(2)-handles.freqZ(1));
                    MeanDerivPhasePlot = mean(DerivPhasePlot);
                    freqDerivPhasePlot = handles.freqZ(handles.harmLo+1:handles.harmLo+size(DerivPhasePlot,1));
                    %                     %display('********** AmpPlot calcule 4 *********')
                    %                     %display('%%%%%%% chant apres BBS')
                elseif ValHi*handles.nCalib<(handles.IndStartStopNoise(1,1)+1)*handles.nCalib
                    %                     %display('%%%%%%% chant avant BBSignal')
                    AmpPlot = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZHi-1)));
                    SizeAmpPlot = size(AmpPlot);
                    MeanAmpPlot = mean(AmpPlot);
                    SizeMeanAmpPlot = size(MeanAmpPlot);
                    PhasePlot = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZHi-1)));
                    DerivPhasePlot = diff(PhasePlot)/(handles.freqZ(2)-handles.freqZ(1));
                    MeanDerivPhasePlot = mean(DerivPhasePlot);
                    freqDerivPhasePlot = handles.freqZ(handles.harmLo+1:handles.harmLo+size(DerivPhasePlot,1));
                    %                     %display('********** AmpPlot calcule 6 *********')
                else
                    t = handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib);
                    s = handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib);
                    IndStartStopNoiseNEW = [];
                    %on construit IndStartStopNoiseNEW
                    for kk=1:size(handles.IndStartStopNoise,2)
                        if ismember(handles.IndStartStopNoise(1,kk)+1, (ValLo:1:ValHi))==1
                            IndStartStopNoiseNEW = [IndStartStopNoiseNEW, [handles.IndStartStopNoise(1,kk)+1;ValHi]];
                            if ismember(handles.IndStartStopNoise(2,kk), (ValLo:1:ValHi))==1
                                IndStartStopNoiseNEW(2, end) = handles.IndStartStopNoise(2,kk);
                            end
                        else %if ismember(handles.IndStartStopNoise(1,kk), (ValLo:1:ValHi))==0
                            if ismember(handles.IndStartStopNoise(2,kk), (ValLo:1:ValHi))==1
                                IndStartStopNoiseNEW = [IndStartStopNoiseNEW, [ValLo;handles.IndStartStopNoise(2,kk)]];
                            end
                        end
                        if ValLo>handles.IndStartStopNoise(1,kk)+1 & ValHi<handles.IndStartStopNoise(2,kk)
                            IndStartStopNoiseNEW = [ValLo;ValHi];
                        end
                    end
                    ValLo;
                    ValHi;
                    HANDLESIndStartStopNoise = handles.IndStartStopNoise;
                    IndStartStopNoiseNEW;
                    AmpPlot = [];
                    PhasePlot = [];
                    DerivPhasePlot = [];
                    
                    if length(IndStartStopNoiseNEW)==0
                        AmpPlot = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,ValLo+1:ValLo+NbAvg)));
                        PhasePlot = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,ValLo+1:ValLo+NbAvg)));
                        DerivPhasePlot = diff(PhasePlot)/(handles.freqZ(2)-handles.freqZ(1));
                        MeanDerivPhasePlot = mean(DerivPhasePlot);
                        freqDerivPhasePlot = handles.freqZ(handles.harmLo+1:handles.harmLo+length(DerivPhasePlot));
                        t_NoBBSignal{1} = handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib);
                        s_NoBBSignal{1} = handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib);
                    else
                        for kk=ValLo:ValLo+NbAvg-1 %indZLo:indZHi-1
                            %                             for ii=1:size(IndStartStopNoiseNEW,2)
                            testIsmember = 0;
                            ii = 1;
                            while testIsmember == 0 & ii<=size(IndStartStopNoiseNEW,2)
                                testIsmember = 0;
                                if ismember(kk, (IndStartStopNoiseNEW(1,ii):1:IndStartStopNoiseNEW(2,ii)-1))==1
                                    %display('**********************')
                                    NewColumn = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,kk+1)./...
                                        handles.Zref(handles.harmLo+1:handles.harmHi+1)));
                                    AmpPlot = [AmpPlot, NewColumn];
                                    NewColumnPhase = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,kk+1)./...
                                        handles.Zref(handles.harmLo+1:handles.harmHi+1)));
                                    NewColumnDerivPhase = diff(NewColumnPhase)/(handles.freqZ(2)-handles.freqZ(1));
                                    PhasePlot = [PhasePlot, NewColumnPhase];
                                    DerivPhasePlot = [DerivPhasePlot, NewColumnDerivPhase];
                                    %                             elseif ismember(kk, (IndStartStopNoiseNEW(1:ii):1:IndStartStopNoiseNEW(1:ii)))
                                    %                                 NewColumn = zeros(handles.harmHi-handles.harmLo+1,1);
                                    %                                 AmpPlot = [AmpPlot, NewColumn];
                                    testIsmember = 1;
                                    ii = size(IndStartStopNoiseNEW,2)+1;
                                end
                                ii = ii +1;
                            end
                            if testIsmember ==0
                                %display('&&&&&&&&&&&&&&&&&&&&&&&&')
                                NewColumn = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,kk+1)));
                                AmpPlot = [AmpPlot, NewColumn];
                                NewColumnPhase = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,kk+1)));
                                NewColumnDerivPhase = diff(NewColumnPhase)/(handles.freqZ(2)-handles.freqZ(1));
                                PhasePlot = [PhasePlot, NewColumnPhase];
                                DerivPhasePlot = [DerivPhasePlot, NewColumnDerivPhase];
                            end
                        end
                    end
                    AmpPlot;
                    %display('taille du vecteur Amplot : [function PlaySelection]')
                    SizeAmpPlot = size(AmpPlot);
                    MeanAmpPlot = mean(AmpPlot);
                    SizeMeanAmplot = size(MeanAmpPlot);
                    SizePhasePlot = size(PhasePlot);
                    SizeDerivPhasePlot = size(DerivPhasePlot);
                    MeanDerivPhasePlot = mean(DerivPhasePlot);
                    SizeMeanDerivPhasePlot = size(MeanDerivPhasePlot);
                    %                     DerivPhasePlot = diff(PhasePlot)/(handles.freqZ(2)-handles.freqZ(1));
                    freqDerivPhasePlot = handles.freqZ(handles.harmLo+1:handles.harmLo+length(DerivPhasePlot));
                    %on construit le vecteur temps pour plot avec couleurs
                    if length(IndStartStopNoiseNEW)==0
                        t_BBSignal = {};
                        s_BBSignal = {};
                        t_trans = {};
                        s_trans = {};
                    else
                        t_NoBBSignal = {};
                        t_BBSignal = {};
                        t_trans = {};
                        s_NoBBSignal = {};
                        s_BBSignal = {};
                        s_trans = {};
                        if ValLo<=IndStartStopNoiseNEW(1,1)-1
                            %                             %display('++++++++++++++++++++++++++')
                            t_trans{length(t_trans)+1} = handles.t(1+(IndStartStopNoiseNEW(1,1)-1)*handles.nCalib:step:IndStartStopNoiseNEW(1,1)*handles.nCalib);
                            s_trans{length(s_trans)+1} = handles.s(1+(IndStartStopNoiseNEW(1,1)-1)*handles.nCalib:step:IndStartStopNoiseNEW(1,1)*handles.nCalib);
                            if ValLo<= IndStartStopNoiseNEW(1,1)-2
                                %                                 %display('++++++++++++++++++++++++++')
                                t_NoBBSignal{length(t_NoBBSignal)+1} = handles.t(1+ValLo*handles.nCalib:step:(IndStartStopNoiseNEW(1,1)-1)*handles.nCalib);
                                s_NoBBSignal{length(s_NoBBSignal)+1} = handles.s(1+ValLo*handles.nCalib:step:(IndStartStopNoiseNEW(1,1)-1)*handles.nCalib);
                            end
                        end
                        for ii=1:size(IndStartStopNoiseNEW,2)
                            if ValHi==IndStartStopNoiseNEW(2,ii)
                                %                                 %display('::::::::::::::::::::::::::')
                                t_BBSignal{length(t_BBSignal)+1} = handles.t(1+IndStartStopNoiseNEW(1,ii)*handles.nCalib:step:IndStartStopNoiseNEW(2,ii)*handles.nCalib);
                                s_BBSignal{length(s_BBSignal)+1} = handles.s(1+IndStartStopNoiseNEW(1,ii)*handles.nCalib:step:IndStartStopNoiseNEW(2,ii)*handles.nCalib);
                            else
                                %                                 %display('~~~~~~~~~~~~~~~~~~~~~~')
                                t_BBSignal{length(t_BBSignal)+1} = handles.t(1+IndStartStopNoiseNEW(1,ii)*handles.nCalib:step:IndStartStopNoiseNEW(2,ii)*handles.nCalib);
                                s_BBSignal{length(s_BBSignal)+1} = handles.s(1+IndStartStopNoiseNEW(1,ii)*handles.nCalib:step:IndStartStopNoiseNEW(2,ii)*handles.nCalib);
                                if ValHi> IndStartStopNoiseNEW(2,ii)
                                    %                                     %display('?????????????????????????')
                                    t_trans{length(t_trans)+1} = handles.t(1+IndStartStopNoiseNEW(2,ii)*handles.nCalib:step:(IndStartStopNoiseNEW(2,ii)+1)*handles.nCalib);
                                    s_trans{length(s_trans)+1} = handles.s(1+IndStartStopNoiseNEW(2,ii)*handles.nCalib:step:(IndStartStopNoiseNEW(2,ii)+1)*handles.nCalib);
                                    %                                 if ValHi~= IndStartStopNoiseNEW(2,end)+1
                                    if ValHi > IndStartStopNoiseNEW(2,ii)+1
                                        if ii+1<=size(IndStartStopNoiseNEW,2)
                                            %                                                 %display('&&&&&&&&&&&&&&&&&&&&&&&&&&&&&')
                                            t_NoBBSignal{length(t_NoBBSignal)+1} = handles.t(1+(IndStartStopNoiseNEW(2,ii)+1)*handles.nCalib:step:(IndStartStopNoiseNEW(1,ii+1)-1)*handles.nCalib);
                                            s_NoBBSignal{length(s_NoBBSignal)+1} = handles.s(1+(IndStartStopNoiseNEW(2,ii)+1)*handles.nCalib:step:(IndStartStopNoiseNEW(1,ii+1)-1)*handles.nCalib);
                                            if ValHi>= IndStartStopNoiseNEW(1,ii+1)
                                                %                                                     %display('&&&&&&&&&&&&&&&&&&&&&&&&&&&&&')
                                                t_trans{length(t_trans)+1} =handles.t(1+(IndStartStopNoiseNEW(1,ii+1)-1)*handles.nCalib:step:IndStartStopNoiseNEW(1,ii+1)*handles.nCalib);
                                                s_trans{length(s_trans)+1} =handles.s(1+(IndStartStopNoiseNEW(1,ii+1)-1)*handles.nCalib:step:IndStartStopNoiseNEW(1,ii+1)*handles.nCalib);
                                            end
                                        else
                                            %                                                 %display('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^')
                                            t_NoBBSignal{length(t_NoBBSignal)+1} = handles.t(1+(IndStartStopNoiseNEW(2,ii)+1)*handles.nCalib:step:ValHi*handles.nCalib);
                                            s_NoBBSignal{length(s_NoBBSignal)+1} = handles.s(1+(IndStartStopNoiseNEW(2,ii)+1)*handles.nCalib:step:ValHi*handles.nCalib);
                                        end
                                        %                                     end
                                    else
                                        %                                         %display('#############################')
                                    end
                                else
                                    %                                     %display('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')
                                end
                            end
                        end
                    end
                end
            end
        elseif strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 0
            ExistAmpPlot = 1;
            AmpPlot = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)));
            PhasePlot = angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg));
            DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
            freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
            yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
            yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
            yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
            MeanAmpPlot = mean(AmpPlot);
            MeanPhasePlot = mean(PhasePlot);
            MeanDerivPhasePlot = mean(DerivPhasePlot);
        elseif strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 1
            if ValLo>=3 & ValHi>ValLo & ValHi<20
                ExistAmpPlot = 1;
                AmpPlot = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
                    repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)));
                PhasePlot = angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
                    repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg));
                DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
                freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
                yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
                yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
                yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
                MeanAmpPlot = mean(AmpPlot);
                MeanPhasePlot = mean(PhasePlot);
                MeanDerivPhasePlot = mean(DerivPhasePlot);
                size(AmpPlot);
                size(MeanAmpPlot);
                size(freqZplot);
                
            else
                ExistAmpPlot = 0;
            end
        end
    else
        if ValLo>=3 & ValHi>ValLo & ValHi<20
            ExistAmpPlot = 1;
            AmpPlot = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)));
            PhasePlot = angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg));
            DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
            freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
            yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
            yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
            yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
            MeanAmpPlot = mean(AmpPlot);
            MeanPhasePlot = mean(PhasePlot);
            MeanDerivPhasePlot = mean(DerivPhasePlot);
        else
            ExistAmpPlot = 0;
        end
    end
    
    
    %
    %         %display('!!!!!!! rentr dans le boucle!!!!!!!!!')
    
    
    i=0;
    while i < NbAvg & get(hObject, 'Value')==1
        
        set(handles.Audio, 'Tag', 'Audio')
        hold(handles.Audio, 'off')
        clockStart = clock;
        
        % on donne le numero de la colonne de la matrice Z correspondante
        i = i+1;
        freqZplot = handles.freqZ(handles.harmLo+1:handles.harmHi+1);
        %                 %display('????????? plot time cuvres??????')
        if strcmp(handles.LoadFileType, 'NEWAcuz')==1 & strcmp(handles.RecordType, 'RealTime') ==1
            if size(handles.IndStartStopNoise,2)==0
                hold(handles.Audio, 'off')
                plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib), 'color', [0.3 0.3 0.3]);
                hold(handles.Audio, 'on')
                %                         %display('%%%%%%% que du chant')
            else
                hold(handles.Audio, 'off')
                if handles.IndStartStopNoise(1,1)==0 & handles.IndStartStopNoise(2,1)*handles.nCalib < length(handles.s) ...
                        & (ValHi*handles.nCalib<handles.IndStartStopNoise(2,1)*handles.nCalib)
                    %                             %display('%%%%%%% BBSignal avant chant')
                    hold(handles.Audio, 'off')
                    plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib), 'b');
                    hold(handles.Audio, 'on')
                elseif handles.IndStartStopNoise(1,1)==0 & handles.IndStartStopNoise(2,1)*handles.nCalib >= length(handles.s)
                    %                             %display('%%%%%%% case que du BBSignal')
                    hold(handles.Audio, 'off')
                    plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib), 'b');
                    hold(handles.Audio, 'on')
                elseif ValLo*handles.nCalib>handles.IndStartStopNoise(2,end)*handles.nCalib & ValHi>ValLo
                    hold(handles.Audio, 'off')
                    plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib), 'color', [0.3 0.3 0.3]);
                    hold(handles.Audio, 'on')
                    %                             %display('%%%%%%% chant apres BBS')
                    %                         elseif ValLo*handles.nCalib>(handles.IndStartStopNoise(1,end)-1)*handles.nCalib & (ValHi<=(handles.IndStartStopNoise(2,end)-1))
                    %                             hold(handles.Audio, 'off')
                    %                             plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:ValHi*handles.nCalib), 'b');
                    %                             hold(handles.Audio, 'on')
                    %                             %display('%%%%%%% BBSignal apres chant')
                elseif ValHi*handles.nCalib<(handles.IndStartStopNoise(1,1)+1)*handles.nCalib
                    %                                 %display('%%%%%%% chant avant BBSignal')
                    hold(handles.Audio, 'off')
                    plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),  'color', [0.3 0.3 0.3]);
                    hold(handles.Audio, 'on')
                else
                    %                             display('%%%%%%% toutes les autres possibilites')
                    hold(handles.Audio, 'off')
                    %                             plot(handles.Audio, t_NoBBSignal, s_NoBBSignal, 'color', [0.3 0.3 0.3]);
                    %                             hold(handles.Audio, 'all')
                    %                             plot(handles.Audio, t_trans, s_trans,  'color', [0.7 0.7 0.7]);
                    %                             plot(handles.Audio, t_BBSignal, s_BBSignal, 'b');
                    
                    for ee=1:max(size(t_NoBBSignal))
                        if min(size(t_NoBBSignal{ee}))~=0
                            plot(handles.Audio, t_NoBBSignal{ee}, s_NoBBSignal{ee},'color', [0.3 0.3 0.3]);
                            %                                 figure(3)
                            %                                 plot(t_NoBBSignal{i}, s_NoBBSignal{i},'color', [0.3 0.3 0.3]);
                            hold(handles.Audio, 'on')
                            %                                     display('1111111')
                        end
                    end
                    for ee=1:max(size(t_trans))
                        if min(size(t_trans{ee}))~=0
                            plot(handles.Audio, t_trans{ee}, s_trans{ee},'color', [0.7 0.7 0.7]);
                            hold(handles.Audio, 'on')
                            %                                     display('2222222')
                        end
                    end
                    for ee=1:max(size(t_BBSignal))
                        if min(size(t_BBSignal{ee}))~=0
                            plot(handles.Audio, t_BBSignal{ee}, s_BBSignal{ee},'b');
                            hold(handles.Audio, 'on')
                            %                                 display('3333333')
                        end
                    end
                    hold(handles.Audio, 'on')
                end
            end
        else
            hold(handles.Audio, 'off')
            plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib), 'b');
            hold(handles.Audio, 'on')
        end
        
        %
        
        %             set(handles.Audio, 'Xlim', [min(handles.t) max(handles.t)]);
        %                 hold(handles.Audio, 'on');
        hold(handles.Audio, 'on');
        plot(handles.Audio,[handles.tLo handles.tLo],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
        hold(handles.Audio, 'on');
        %                 display('test')
        plot(handles.Audio,[handles.TCycle(indZLo+i-1) handles.TCycle(indZLo+i-1)],YLimAudio,'r', 'linewidth',3);
        hold(handles.Audio, 'on');
        plot(handles.Audio,[handles.tHi handles.tHi],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
        
        
        
        %                 set(handles.Audio, 'Xlim', [xmin xmax]);
        %                 xlim(handles.Audio, [handles.TCycle(1) handles.TCycle(end)]);
        xlim(handles.Audio,XLim);
        ylim(handles.Audio,YLimAudio );
        
        
        %audio
        if strcmp(handles.RecordType, 'RealTime') ==1
            plot(handles.EGG, handles.egg(1+(ValLo+i-1)*handles.nCalib:(ValLo+i)*handles.nCalib),'r');
            xlim(handles.EGG, [1 handles.nCalib]);
        end
        %spectre amplitude et phase
        if get(handles.DisplayRawData, 'Value')==1
            plot(handles.Spectre, freqZplot,AmpPlot(:,i)-MeanAmpPlot(i), 'k', 'linewidth', 1);
            hold(handles.Spectre, 'on');
            
            plot(handles.Phase, freqDerivPhasePlot, (DerivPhasePlot(:,i)-MeanDerivPhasePlot(i)), 'k', 'linewidth', 1);
            hold(handles.Phase, 'on');
        end
        if get(handles.DisplayFilteredData, 'Value')==1
            plot(handles.Spectre, freqZplot,medfilt1(sgolayfilt(AmpPlot(:,i)-MeanAmpPlot(i),3,25),5), 'k', 'linewidth', 4 );
            hold(handles.Spectre, 'on');
            
            plot(handles.Phase, freqDerivPhasePlot,sgolayfilt((DerivPhasePlot(:,i)-MeanDerivPhasePlot(:,i)),3,41), 'k', 'linewidth', 4);
            hold(handles.Phase, 'on');
        end
        guidata(hObject, handles);
        %                 Val = get(handles.PannelChooseDisplay, 'UserData');
        %                 IndVal = find(Val)
        IndVal = find(KeyBoardFreq);
        if length(IndVal)~=0
            for ii=1:length(IndVal)
                hold(handles.Spectre, 'on');
                plot(handles.Spectre, [KeyBoardFreq(IndVal(ii)),KeyBoardFreq(IndVal(ii))], [yminZ ymaxZ], '-y', 'linewidth', 3);
                
                hold(handles.Spectre, 'on');
                plot(handles.Phase, [KeyBoardFreq(IndVal(ii)),KeyBoardFreq(IndVal(ii))], handles.Phase.YLim, '-y', 'linewidth', 3);
            end
        end
        xlim(handles.Spectre, [xminZ xmaxZ]);
        ylim(handles.Spectre, [yminZ ymaxZ]);
        %     testtest = get(handles.dt_Val, 'String')
        format long
        %     toc
        %     stop = handles.nCalib/handles.Fs;
        %     pause(handles.nCalib/handles.Fs-0.08)
        hold(handles.Spectre, 'off');
        hold(handles.Phase, 'off');
        
        if i==1
            plSelection.play();
        end
        
        clockEnd = clock;
        Varstop = handles.nCalib/handles.Fs;
        tps_calcul = abs(mod(abs(clockEnd(end)-clockStart(end)),60));
        %             stop-tps_calcul
        pause(round(Varstop-tps_calcul,2));
        hold(handles.Audio, 'off')
    end
    i
    if i==NbAvg
        %             set(handles.PlaySelection, 'CData', imresize(imread('PlayPause.png'),0.051));
        OldPicture = get(hObject, 'CData');
        NewPicture=zeros(size(OldPicture));
        
        MaxOldPicture = max(OldPicture(:,1,1));
        if MaxOldPicture>1
            for i=1:size(OldPicture,1)
                for j =1:size(OldPicture,2)
                    if OldPicture(i,j,1)==202 & OldPicture(i,j,2)==202 & OldPicture(i,j,3)==202
                        NewPicture(i,j,1)= 255;
                        NewPicture(i,j,2)= 255;
                        NewPicture(i,j,3)= 255;
                    else
                        NewPicture(i,j,1) = OldPicture(i,j,1);
                        NewPicture(i,j,2) = OldPicture(i,j,2);
                        NewPicture(i,j,3) = OldPicture(i,j,3);
                    end
                end
            end
            NewPicture=NewPicture/255
        else
            for i=1:size(OldPicture,1)
                for j =1:size(OldPicture,2)
                    if OldPicture(i,j,1)==202/255 & OldPicture(i,j,2)==202/255 & OldPicture(i,j,3)==202/255
                        NewPicture(i,j,1)= 255/255;
                        NewPicture(i,j,2)= 255/255;
                        NewPicture(i,j,3)= 255/255;
                    else
                        NewPicture(i,j,1) = OldPicture(i,j,1);
                        NewPicture(i,j,2) = OldPicture(i,j,2);
                        NewPicture(i,j,3) = OldPicture(i,j,3);
                    end
                end
            end
        end
        set(hObject, 'CData',NewPicture)
        
        plSelection.stop();
        set(handles.PlaySelection, 'Value',0);
        axes(handles.Audio);
        %         plot(handles.t,handles.s,'color', [0.3 0.3 0.3]);
        hold(handles.Audio, 'off')
        if strcmp(handles.LoadFileType, 'NEWAcuz')==1 & strcmp(handles.RecordType, 'RealTime') ==1
            if size(handles.IndStartStopNoise,2)==0
                hold(handles.Audio, 'off')
                plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib), 'color', [0.3 0.3 0.3]);
                hold(handles.Audio, 'on')
                %                         %display('%%%%%%% que du chant')
            else
                if handles.IndStartStopNoise(1,1)==0 & handles.IndStartStopNoise(2,1)*handles.nCalib < length(handles.s) ...
                        & (ValHi*handles.nCalib<handles.IndStartStopNoise(2,1)*handles.nCalib)
                    %                             %display('%%%%%%% BBSignal avant chant')
                    hold(handles.Audio, 'off')
                    plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib), 'b');
                    hold(handles.Audio, 'on')
                elseif handles.IndStartStopNoise(1,1)==0 & handles.IndStartStopNoise(2,1)*handles.nCalib >= length(handles.s)
                    %                             %display('%%%%%%% case que du BBSignal')
                    hold(handles.Audio, 'off')
                    plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib), 'b');
                    hold(handles.Audio, 'on')
                elseif ValLo*handles.nCalib>handles.IndStartStopNoise(2,end)*handles.nCalib & ValHi>ValLo
                    hold(handles.Audio, 'off')
                    plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib), 'color', [0.3 0.3 0.3]);
                    hold(handles.Audio, 'on')
                    %                             %display('%%%%%%% chant apres BBS')
                    %                         elseif ValLo*handles.nCalib>(handles.IndStartStopNoise(1,end)-1)*handles.nCalib & (ValHi<=(handles.IndStartStopNoise(2,end)-1))
                    %                             hold(handles.Audio, 'off')
                    %                             plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:ValHi*handles.nCalib), 'b');
                    %                             hold(handles.Audio, 'on')
                    %                             %display('%%%%%%% BBSignal apres chant')
                elseif ValHi*handles.nCalib<(handles.IndStartStopNoise(1,1)+1)*handles.nCalib
                    %                                 %display('%%%%%%% chant avant BBSignal')
                    hold(handles.Audio, 'off')
                    plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),  'color', [0.3 0.3 0.3]);
                    hold(handles.Audio, 'on')
                else
                    %                             %display('%%%%%%% toutes les autres possibilites')
                    hold(handles.Audio, 'off')
                    %                             plot(handles.Audio, t_NoBBSignal, s_NoBBSignal, 'color', [0.3 0.3 0.3]);
                    %                             hold(handles.Audio, 'all')
                    %                             plot(handles.Audio, t_trans, s_trans,  'color', [0.7 0.7 0.7]);
                    %                             plot(handles.Audio, t_BBSignal, s_BBSignal, 'b');
                    for ee=1:max(size(t_NoBBSignal))
                        if min(size(t_NoBBSignal{ee}))~=0
                            plot(handles.Audio, t_NoBBSignal{ee}, s_NoBBSignal{ee},'color', [0.3 0.3 0.3]);
                            %                                 figure(3)
                            %                                 plot(t_NoBBSignal{i}, s_NoBBSignal{i},'color', [0.3 0.3 0.3]);
                            hold(handles.Audio, 'on')
                            %                                 %display('1111111')
                        end
                    end
                    for ee=1:max(size(t_trans))
                        if min(size(t_trans{ee}))~=0
                            plot(handles.Audio, t_trans{ee}, s_trans{ee},'color', [0.7 0.7 0.7]);
                            hold(handles.Audio, 'on')
                            %                                 %display('2222222')
                        end
                    end
                    for ee=1:max(size(t_BBSignal))
                        if min(size(t_BBSignal{ee}))~=0
                            plot(handles.Audio, t_BBSignal{ee}, s_BBSignal{ee},'b');
                            hold(handles.Audio, 'on')
                            %                                 %display('3333333')
                        end
                    end
                    hold(handles.Audio, 'on')
                end
            end
        else
            hold(handles.Audio, 'off')
            plot(handles.Audio, handles.t(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib),handles.s(1+ValLo*handles.nCalib:step:ValHi*handles.nCalib), 'b');
            hold(handles.Audio, 'on')
        end
        
        
        
        %         set(handles.Audio, 'Xlim', [xmin xmax]);
        %             hold(handles.Audio, 'on');
        plot([handles.tLo handles.tLo],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
        hold(handles.Audio, 'on');
        plot([handles.tHi handles.tHi],YLimAudio,'r', 'linewidth',3);
        hold(handles.Audio, 'off');
        %         xlim(handles.Audio, [handles.TCycle(1) handles.TCycle(end)]);
        xlim(handles.Audio, XLim);
        ylim(handles.Audio,YLimAudio );
        pause(round(Varstop-tps_calcul,2));
        
        hold(handles.Audio, 'off');
        if strcmp(handles.LoadFileType, 'NEWAcuz')==1 && strcmp(handles.RecordType, 'RealTime') ==1
            %display('%%%%%%%%%%%')
            if size(handles.IndStartStopNoise,2)==0
                
                plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
                hold(handles.Audio, 'on')
                
                plot(handles.EGG, handles.t,handles.egg, 'color', [0.3 0.3 0.3]);
                hold(handles.EGG, 'on')
                
            elseif size(handles.IndStartStopNoise,2)~=0
                
                plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
                hold(handles.Audio, 'on')
                
                plot(handles.EGG, handles.t,handles.egg, 'color', [0.3 0.3 0.3]);
                hold(handles.EGG, 'on')
                
                for ii = 1:size(handles.IndStartStopNoise,2)
                    
                    if (handles.IndStartStopNoise(1,ii)+1)*handles.nCalib<=length(handles.t)
                        t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                        s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                        egg_Noise_Undefined1 = handles.egg(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                        plot(handles.EGG, t_Noise_Undefined1, egg_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                    end
                    
                    if handles.IndStartStopNoise(1,1)==0
                        if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                            t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            egg_Noise = handles.egg(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            plot(handles.Audio, t_Noise, s_Noise , 'b');
                            plot(handles.EGG, t_Noise, egg_Noise , 'b');
                            
                            t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            egg_Noise_Undefined2 = handles.egg(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                            plot(handles.EGG, t_Noise_Undefined2, egg_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                        else
                            plot(handles.Audio, handles.t,handles.s, 'b');
                            plot(handles.EGG, handles.t,handles.egg, 'b');
                        end
                    end
                    if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                        
                        t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        egg_Noise = handles.egg(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        plot(handles.EGG, t_Noise, egg_Noise , 'b');
                        
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        egg_Noise_Undefined2 = handles.egg(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                        plot(handles.EGG, t_Noise_Undefined2, egg_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    else
                        t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        egg_Noise = handles.egg(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        plot(handles.EGG, t_Noise, egg_Noise , 'b');
                    end
                end
            end
            
            xlim(handles.EGG, [handles.tLo handles.tHi]);
            ylim(handles.EGG, [min(handles.egg) max(handles.egg)]);
            hold(handles.EGG, 'off');
            
        else
            %display('^^^^^^^^^^^^^')
            plot(handles.Audio, handles.t,handles.s, 'b');
            hold(handles.Audio, 'on')
        end
        
        %display('=/*=/*=/*=/*=/*')
        hold(handles.Audio, 'on');
        plot([handles.tLo handles.tLo],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
        hold(handles.Audio, 'on');
        plot([handles.tHi handles.tHi],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
        %         xlim(handles.Audio, [handles.TCycle(1) handles.TCycle(end)]);
        xlim(handles.Audio,XLim);
        ylim(handles.Audio, YLimAudio);
        hold(handles.Audio, 'off');
        
        DisplayChosenCurvesNEW(handles);
        guidata(hObject, handles);
    elseif i~=0 & i~=NbAvg
        set(handles.Audio,'Tag','Audio');
        set(handles.Spectre,'Tag','Spectre');
        set(handles.Phase,'Tag','Phase');
        guidata(hObject, handles)
        
        if strcmp(handles.LoadFileType, 'NEWAcuz')==1 & strcmp(handles.RecordType, 'RealTime') ==1
            %display('%%%%%%%%%%%')
            if size(handles.IndStartStopNoise,2)==0
                
                plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
                hold(handles.Audio, 'on')
                
                plot(handles.EGG, handles.t,handles.egg, 'color', [0.3 0.3 0.3]);
                hold(handles.EGG, 'on')
                
            elseif size(handles.IndStartStopNoise,2)~=0;
                
                plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
                hold(handles.Audio, 'on')
                
                plot(handles.EGG, handles.t,handles.egg, 'color', [0.3 0.3 0.3]);
                hold(handles.EGG, 'on')
                
                for ii = 1:size(handles.IndStartStopNoise,2)
                    
                    
                    t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    egg_Noise_Undefined1 = handles.egg(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                    plot(handles.EGG, t_Noise_Undefined1, egg_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                    
                    if handles.IndStartStopNoise(1,1)==0
                        if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                            t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            egg_Noise = handles.egg(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                            plot(handles.Audio, t_Noise, s_Noise , 'b');
                            plot(handles.EGG, t_Noise, egg_Noise , 'b');
                            
                            t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            egg_Noise_Undefined2 = handles.egg(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                            plot(handles.EGG, t_Noise_Undefined2, egg_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                        else
                            plot(handles.Audio, handles.t,handles.s, 'b');
                            plot(handles.EGG, handles.t,handles.egg, 'b');
                        end
                    end
                    if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                        
                        t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        egg_Noise = handles.egg(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        plot(handles.EGG, t_Noise, egg_Noise , 'b');
                        
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        egg_Noise_Undefined2 = handles.egg(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                        plot(handles.EGG, t_Noise_Undefined2, egg_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    else
                        t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        egg_Noise = handles.egg(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        plot(handles.EGG, t_Noise, egg_Noise , 'b');
                    end
                end
            end
            
            xlim(handles.EGG, [handles.tLo handles.tHi]);
            ylim(handles.EGG, [min(handles.egg) max(handles.egg)]);
            hold(handles.EGG, 'off');
            
        else
            %display('^^^^^^^^^^^^^')
            plot(handles.Audio, handles.t,handles.s, 'b');
            hold(handles.Audio, 'on')
        end
        
        
        set(handles.Audio,'Tag','Audio');
        set(handles.Spectre,'Tag','Spectre');
        set(handles.Phase,'Tag','Phase');
        h = zoom(handles.Audio);
        setAxesZoomMotion(h,handles.Audio,'horizontal');
        guidata(hObject, handles);
        
        %display('=/*=/*=/*=/*=/*')
        hold(handles.Audio, 'on');
        plot([handles.tLo handles.tLo],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
        hold(handles.Audio, 'on');
        plot([handles.tHi handles.tHi],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
        %             xlim(handles.Audio, [handles.TCycle(1) handles.TCycle(end)]);
        xlim(handles.Audio, XLim);
        ylim(handles.Audio, YLimAudio);
        hold(handles.Audio, 'off');
        
        set(handles.Audio,'Tag','Audio');
        set(handles.Spectre,'Tag','Spectre');
        set(handles.Phase,'Tag','Phase');
        h = zoom(handles.Audio);
        setAxesZoomMotion(h,handles.Audio,'horizontal');
        guidata(hObject, handles);
        
        DisplayChosenCurvesNEW(handles);
        guidata(hObject, handles);
    end
    
end

set(handles.Audio,'Tag','Audio');
set(handles.Spectre,'Tag','Spectre');
set(handles.Phase,'Tag','Phase');
h = zoom();
setAxesZoomMotion(h,handles.Audio,'horizontal');
guidata(hObject, handles);
if strcmp(handles.LoadFileType, 'NEWAcuz')==1 & strcmp(handles.RecordType, 'Acuz') ==0
    set(h,'ActionPostCallback',{@ZoomCallbackRealTimeNEW, handles}) ;
else
    set(h,'ActionPostCallback',{@ZoomCallbackAcuz, handles}) ;
end

if val==0
    %     set(handles.PlaySelection, 'CData', imresize(imread('PlayPause.png'),0.051));
    OldPicture = get(hObject, 'CData');
    NewPicture=zeros(size(OldPicture));
    
    MaxOldPicture = max(OldPicture(:,1,1));
    if MaxOldPicture>1
        for i=1:size(OldPicture,1)
            for j =1:size(OldPicture,2)
                if OldPicture(i,j,1)==202 & OldPicture(i,j,2)==202 & OldPicture(i,j,3)==202
                    NewPicture(i,j,1)= 255;
                    NewPicture(i,j,2)= 255;
                    NewPicture(i,j,3)= 255;
                else
                    NewPicture(i,j,1) = OldPicture(i,j,1);
                    NewPicture(i,j,2) = OldPicture(i,j,2);
                    NewPicture(i,j,3) = OldPicture(i,j,3);
                end
            end
        end
        NewPicture=NewPicture/255
    else
        for i=1:size(OldPicture,1)
            for j =1:size(OldPicture,2)
                if OldPicture(i,j,1)==202/255 & OldPicture(i,j,2)==202/255 & OldPicture(i,j,3)==202/255
                    NewPicture(i,j,1)= 255/255;
                    NewPicture(i,j,2)= 255/255;
                    NewPicture(i,j,3)= 255/255;
                else
                    NewPicture(i,j,1) = OldPicture(i,j,1);
                    NewPicture(i,j,2) = OldPicture(i,j,2);
                    NewPicture(i,j,3) = OldPicture(i,j,3);
                end
            end
        end
    end
    set(hObject, 'CData',NewPicture)
    guidata(hObject, handles);
end


% --- Executes on button press in SaveSelection.
function SaveSelection_Callback(hObject, eventdata, handles)
% hObject    handle to SaveSelection (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global hjRangeSlider
ValLo = get(hjRangeSlider,'LowValue');
ValHi = get(hjRangeSlider,'HighValue');
if handles.DataAquired ==1
    if ValHi*handles.nCalib<=length(handles.totalDATA)
        SoundFile = handles.totalDATA(1+ValLo*handles.nCalib:ValHi*handles.nCalib, :);
    else
        SoundFile = handles.totalDATA(1+ValLo*handles.nCalib:end, :);
    end
else %quand on load un fichier et qu'on en reselectionne seulement une partie
    if ValHi*handles.nCalib<=length(handles.s)
        SoundFile = handles.s(1+ValLo*handles.nCalib:ValHi*handles.nCalib, :) * handles.transduc/ sqrt(2); %pas en Pa, mais V????
    else
        SoundFile = handles.s(1+ValLo*handles.nCalib:end, :) * handles.transduc/ sqrt(2); %pas en Pa, mais V????
    end
    
end

PARAMS.computer = 'mac';
PARAMS.device_type = 'core';
PARAMS.device_number = handles.DevIDmic;
PARAMS.nChannelFirst = 1;
PARAMS.nChannelLast = 3;
PARAMS.samplingFreq = handles.Fs;
PARAMS.bitDepth = handles.NbBits;
PARAMS.numPoints = handles.nCalib;
PARAMS.freqLo = handles.FreqLo;
PARAMS.freqHi = handles.FreqHi;
PARAMS.transduct = handles.transduc;
PARAMS.freqIncr = handles.df;% handles.absc(2)-handles.absc(1);
PARAMS.freqNyquist = handles.Fs/2;
PARAMS.harmLo = handles.harmLo;
PARAMS.harmHi = handles.harmHi;
PARAMS.absc = handles.df*...
    linspace(handles.harmLo + 1,handles.harmHi + 1, handles.harmHi-handles.harmLo+1);
% PARAMS.absc = handles.absc;
PARAMS.NameParamFile = handles.SaveName;
PARAMS.NameParamPath = handles.SavePath;
PARAMS.NameCalibFile = handles.NameCalib;
PARAMS.NameCalibPath = handles.PathCalib;
PARAMS.CalibType = handles.CalibType;
PARAMS.OutputType = handles.OutputType;
PARAMS.RecordType = handles.RecordType;


IndStartStopNoiseOLD = handles.IndStartStopNoise;
IndStartStopNoiseNEW = [];
%on construit IndStartStopNoiseNEW
for kk=1:size(handles.IndStartStopNoise,2)
    if ismember(handles.IndStartStopNoise(1,kk)+1, (ValLo:1:ValHi))==1
        IndStartStopNoiseNEW = [IndStartStopNoiseNEW, [handles.IndStartStopNoise(1,kk);ValHi]];
        if ismember(handles.IndStartStopNoise(2,kk), (ValLo:1:ValHi))==1
            IndStartStopNoiseNEW(2, end) = handles.IndStartStopNoise(2,kk);
        end
    else %if ismember(handles.IndStartStopNoise(1,kk), (ValLo:1:ValHi))==0
        if ismember(handles.IndStartStopNoise(2,kk), (ValLo:1:ValHi))==1
            IndStartStopNoiseNEW = [IndStartStopNoiseNEW, [ValLo;handles.IndStartStopNoise(2,kk)]];
        end
    end
    if ValLo>handles.IndStartStopNoise(1,kk)+1 & ValHi<handles.IndStartStopNoise(2,kk)
        IndStartStopNoiseNEW = [ValLo;ValHi];
    end
end
IndStartStopNoiseOLD = handles.IndStartStopNoise;
IndStartStopNoiseNEW;
IndStartStopNoise = IndStartStopNoiseNEW - ValLo*ones(size(IndStartStopNoiseNEW));
PARAMS.IndStartStopNoise=IndStartStopNoise;


% % PARAMS = handles.PARAMS ;
% % PARAMS.RecordType = handles.RecordType;
Zref = handles.Zref;
CalibSource = handles.CalibSource;
[filename, pathname] = uiputfile( [handles.SavePath, 'SoundFile-.mat'], 'Save the sound and its calibration parameters as');
if filename==0
    % user pressed cancel
    return
else
    save([pathname, filename],'SoundFile','Zref','CalibSource', 'PARAMS');
    
    [v,d] = version;
    Vind= strfind(v,'R');
    if str2num(v(Vind+3:Vind+4))>14
        audiowrite(strcat(pathname, [filename(1:end-4),'-AudioMIC.wav']),SoundFile(:,1).*PARAMS.transduct,handles.Fs);
        if strcmp(handles.RecordType, 'RealTime')==1
            audiowrite(strcat(pathname, [filename(1:end-4),'-AudioEGG.wav']),SoundFile(:,2),handles.Fs);
            %             audiowrite(strcat(pathname, [filename(1:end-4),'-AudioACC.wav']),SoundFile(:,3),handles.Fs); % added by NH
        end
    else
        audiowrite(strcat(pathname, [filename(1:end-4),'-AudioMIC.wav']), SoundFile(:,1).*PARAMS.transduct,handles.Fs,'BitsPerSample', handles.NbBits);
        if strcmp(handles.RecordType, 'RealTime')==1
            audiowrite(strcat(pathname, [filename(1:end-4),'-AudioEGG.wav']), SoundFile(:,2),handles.Fs,'BitsPerSample', handles.NbBits);
            %             audiowrite(strcat(pathname, [filename(1:end-4),'-AudioACC.wav']), SoundFile(:,3),handles.Fs,'BitsPerSample', handles.NbBits);
        end
        %audiowrite(inputbufferOri(:,1),44100,16,[pathname, regexprep(filename, '.mat', ''), '-Audio.wav']);
        %audiowrite(inputbufferOri(:,2),44100,16,[pathname, regexprep(filename, '.mat', ''), '-ref.wav']);
    end
    
    myicon = imread('GreenCheck2.png');
    msg = msgbox('Your selection has been saved!', 'Success','custom', myicon);
    pause(1)
    close(msg)
end
guidata(hObject, handles)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%-----------------------------
%           FONCTIONS
%-----------------------------
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%










% --- Outputs from this function are returned to the command line.
function varargout = GUI_RAVE_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in checkbox2.
function checkbox2_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox2


% --- Executes on button press in checkbox3.
function checkbox3_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox3



function NbCyclePerSecond_Callback(hObject, eventdata, handles)
% hObject    handle to edit_ValNbCyclePerSecond (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_ValNbCyclePerSecond as text
%        str2double(get(hObject,'String')) returns contents of edit_ValNbCyclePerSecond as a double


% --- Executes during object creation, after setting all properties.
function NbCyclePerSecond_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_ValNbCyclePerSecond (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in checkbox4.
function checkbox4_Callback(hObject, ~, handles)
% hObject    handle to checkbox4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox4


% --- Executes on button press in checkbox5.
function checkbox5_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox5


% --- Executes during object creation, after setting all properties.
function popupmenu_LoadFileParameters_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_LoadFileParameters (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

% --- Executes during object creation, after setting all properties.
function Audio_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Audio (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called
%zoom pour la figure Audio
% ax = handles.Audio;
h = zoom;
setAxesZoomMotion(h,hObject,'horizontal')
%h.RightClickAction('InverseZoom')
h.ActionPostCallback = @ZoomCallbackAcuz;
h.Enable = 'on';
% Hint: place code in OpeningFcn to populate Audio


% --- Executes during object deletion, before destroying properties.
function figure1_DeleteFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



% --- Executes on mouse press over figure background, over a disabled or
% --- inactive control, or over an axes background.
function figure1_WindowButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes when user attempts to close figure1.
function figure1_CloseRequestFcn(hObject, eventdata, handles)
% hObject    handle to figure1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: delete(hObject) closes the figure
delete(hObject);


% --------------------------------------------------------------------

%_________________________________________________________________________
%_____________________________ DISPLAY ___________________________________
%_________________________ Parametres d'affichage  _______________________
%_________________________________________________________________________

function DisplayChosenCurves(handles)
global hjRangeSlider
ValLo = get(hjRangeSlider,'LowValue')
ValHi = get(hjRangeSlider,'HighValue')

indLo = ValLo+1;
indHi = ValHi+1;
% on calcule et affiche le nombre de cycle sur lesquels on moyenne
NbAvg = indHi-indLo
tLo = handles.TCycle(ValLo+1);
% handles.tLo = tLo;
tHi = handles.TCycle(ValHi+1);
% handles.tHi = tHi;
[~,indZLo] = min(abs(tLo*ones(1,length(handles.TCycle))-handles.TCycle));
[~,indZHi] = min(abs(tHi*ones(1,length(handles.TCycle))-handles.TCycle));

freqZplot = handles.freqZ(handles.harmLo+1:handles.harmHi+1);
% if (get(handles.radiobuttonCalculationAcuz, 'Value') ~= 1 ) || (strcmp(handles.LoadFileType, 'RealTime')==1)
if strcmp(handles.LoadFileType, 'NEWAcuz')==1
    if strcmp(handles.RecordType, 'RealTime') ==1 || (strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 0)
        AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
            handles.Zref(handles.harmLo+1:handles.harmHi+1)));
    elseif strcmp(handles.RecordType, 'NoBBSignal') ==1
        AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)));
    elseif strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 1
        AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3),2)./...
            handles.Zref(handles.harmLo+1:handles.harmHi+1)));
    end
else
    AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3),2)./...
        handles.Zref(handles.harmLo+1:handles.harmHi+1)));
end
MeanAmpPlot = mean(AmpPlot);


XLim = get(handles.Spectre, 'XLim');
xmin = XLim(1); xmax = XLim(2);

cla(handles.Spectre)
% cla(handles.Phase)

axes(handles.Spectre);
varRawData = get(handles.DisplayRawData, 'Value');
if get(handles.DisplayRawData, 'Value')==1
    plot(handles.Spectre, freqZplot,AmpPlot-MeanAmpPlot, 'k', 'linewidth', 1);
    hold(handles.Spectre, 'on');
end
varFilteredData = get(handles.DisplayFilteredData, 'Value');
if get(handles.DisplayFilteredData, 'Value')==1
    plot(handles.Spectre, freqZplot,medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,25),5), 'b', 'linewidth', 4 );
    hold(handles.Spectre, 'on');
end
varAllCurves = get(handles.DisplayAllCurves, 'Value');
if get(handles.DisplayAllCurves, 'Value')==1
    if strcmp(handles.LoadFileType, 'NEWAcuz')==1
        if strcmp(handles.RecordType, 'RealTime') ==1 || (strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 0)
            Z_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
        elseif  strcmp(handles.RecordType, 'NoBBSignal') ==1
            Z_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)))';
        elseif strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 1
            Z_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
        end
    else
        Z_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
            repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
    end
    plot(handles.Spectre,freqZplot, Z_AllCurves - repmat(mean(Z_AllCurves,2),1, size(Z_AllCurves,2)), 'linewidth', 0.25     )
    hold(handles.Spectre, 'on');
end

Val = get(handles.PannelChooseDisplay, 'UserData');
for ii=1:37
    if Val(ii)~=0
        plot(handles.Spectre, [Val(ii),Val(ii)], [min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)], '-y', 'linewidth', 3);
        hold on;
    end
end



% if get(handles.DisplayMean, 'Value') ==1
%     AbsZ_Mean = 20*log10(mean(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
%         repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)),2));
%     plot(freqZplot, AbsZ_Mean - mean(AbsZ_Mean),'color',[204 85 0]/255,'linewidth', 3 );
% end

% xlabel('f (Hz)')
% ylabel('|S(f)|')

axis([xmin xmax min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)])
if isequal([varRawData varFilteredData varAllCurves],[1 1 1])==1
    legend({'20log(|mean(Z/Z_{ref})|)', 'filtred 20log(mean(|Z/Z_{ref}|))', '20log(|Z_i/Z_{ref}|)' },'FontSize', 11);
elseif isequal([varRawData varFilteredData varAllCurves],[1 1 0])==1
    legend({'20log(|mean(Z/Z_{ref})|)', 'filtred 20log(mean(|Z/Z_{ref}|))' },'FontSize', 11);
elseif isequal([varRawData varFilteredData varAllCurves],[1 0 0])==1
    legend({'20log(|mean(Z/Z_{ref})|)'},'FontSize', 11);
elseif isequal([varRawData varFilteredData varAllCurves],[1 0 1])==1
    legend({'20log(|mean(Z/Z_{ref})|)', '20log(|Z_i/Z_{ref}|)' },'FontSize', 11);
elseif isequal([varRawData varFilteredData varAllCurves],[0 0 1])==1
    legend({'20log(|Z_i/Z_{ref}|)' },'FontSize', 11);
elseif isequal([varRawData varFilteredData varAllCurves],[0 1 1])==1
    legend({ 'filtred 20log(mean(|Z/Z_{ref}|))', '20log(|Z_i/Z_{ref}|)' },'FontSize', 11);
elseif isequal([varRawData varFilteredData varAllCurves],[0 1 0])==1
    legend({'filtred 20log(mean(|Z/Z_{ref}|))' },'FontSize', 11);
end
hold(handles.Spectre, 'off');

% --- Executes on button press in checkbox6.
function DisplayAllCurves_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox6
% DisplayChosenCurves(handles)
global StopRecordPushed
aff1 = handles.ExistRecord
aff2 = handles.StopRecordPushed
if ((handles.ExistRecord ==1 & StopRecordPushed == 1) || handles.LoadFile ==1) %& get(handles.PlaySelection, 'Value')==0
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles);

% --- Executes on button press in DisplayOffset.
function DisplayOffset_Callback(hObject, eventdata, handles)
% hObject    handle to DisplayOffset (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of DisplayOffset
global StopRecordPushed
if ((handles.ExistRecord ==1 & StopRecordPushed == 1) || handles.LoadFile ==1) %& get(handles.PlaySelection, 'Value')==0
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles);

% --- Executes on button press in DisplayDerivPhaseOffset.
function DisplayDerivPhaseOffset_Callback(hObject, eventdata, handles)
% hObject    handle to DisplayDerivPhaseOffset (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of DisplayDerivPhaseOffset
global StopRecordPushed
if ((handles.ExistRecord ==1 & StopRecordPushed == 1) || handles.LoadFile ==1) %& get(handles.PlaySelection, 'Value')==0
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles);


% --- Executes on button press in DisplayMean.
function DisplayMean_Callback(hObject, eventdata, handles)
% hObject    handle to DisplayMean (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% DisplayChosenCurves(handles)
global StopRecordPushed
if ((handles.ExistRecord ==1 & StopRecordPushed == 1) || handles.LoadFile ==1) %& get(handles.PlaySelection, 'Value')==0
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles);
% Hint: get(hObject,'Value') returns toggle state of DisplayMean

% --- Executes on button press in DisplayRawData.
function DisplayRawData_Callback(hObject, eventdata, handles)
% hObject    handle to DisplayRawData (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% DisplayChosenCurves(handles)
global StopRecordPushed
if ((handles.ExistRecord ==1 & StopRecordPushed == 1) || handles.LoadFile ==1) %& get(handles.PlaySelection, 'Value')==0
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles);
% Hint: get(hObject,'Value') returns toggle state of DisplayRawData

% --- Executes on button press in DisplayFilteredData.
function DisplayFilteredData_Callback(hObject, eventdata, handles)
% hObject    handle to DisplayFilteredData (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% DisplayChosenCurves(handles)
global StopRecordPushed
if ((handles.ExistRecord ==1 & StopRecordPushed == 1) || handles.LoadFile ==1) %& get(handles.PlaySelection, 'Value')==0
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles);
% Hint: get(hObject,'Value') returns toggle state of DisplayFilteredData

% --- Executes on button press in DisplayDeleteHarmonics.
function DisplayDeleteHarmonics_Callback(hObject, eventdata, handles)
% hObject    handle to DisplayDeleteHarmonics (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% DisplayChosenCurves(handles)
global StopRecordPushed
if ((handles.ExistRecord ==1 & StopRecordPushed == 1) || handles.LoadFile ==1) %& get(handles.PlaySelection, 'Value')==0
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles);
% [PlottedCurves]= DisplayChosenCurvesNEW(handles);
% guidata(hObject, handles)

% Hint: get(hObject,'Value') returns toggle state of DisplayDeleteHarmonics

% --- Executes on button press in DisplayUnwrapPhase.
function DisplayUnwrapPhase_Callback(hObject, eventdata, handles)
% hObject    handle to DisplayUnwrapPhase (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global StopRecordPushed
if ((handles.ExistRecord ==1 & StopRecordPushed == 1) || handles.LoadFile ==1) %& get(handles.PlaySelection, 'Value')==0
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles);

% --- Executes on button press in DisplayDerivUnwrapPhase.
function DisplayDerivUnwrapPhase_Callback(hObject, eventdata, handles)
% hObject    handle to DisplayDerivUnwrapPhase (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% DisplayChosenCurves(handles)
global StopRecordPushed
if ((handles.ExistRecord ==1 & StopRecordPushed == 1) || handles.LoadFile ==1) %& get(handles.PlaySelection, 'Value')==0
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles);
% Hint: get(hObject,'Value') returns toggle state of DisplayDerivUnwrapPhase

function PannelCurves_ButtonDownFcn(hObject, eventdata, handles)

function TimeMax_CreateFcn(hObject, eventdata, handles)

function pushbutton_FlattenCalibration_CreateFcn(hObject, eventdata, handles)

function popupmenu_SaveFileNameParameters_CreateFcn(hObject, eventdata, handles)




% --------------------------------------------------------------------
function Untitled_1_Callback(hObject, eventdata, handles)
% hObject    handle to Untitled_1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
get(hObject, 'Value')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in radiobuttonPipe.
function radiobuttonPipe_Callback(hObject, eventdata, handles)
% hObject    handle to radiobuttonPipe (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobuttonPipe
%display('change output !')
%
% var = get(handles.radiobuttonCalibAcuz, 'Value');
% devinfo = audiodevinfo;
% output = devinfo.output; LOutput = max(size(output));
% OutputName={output(linspace(1,LOutput,LOutput)).Name};
% input = devinfo.input; LInput = max(size(input));
% InputName={output(linspace(1,LInput,LInput)).Name};
%
% if handles.StartNewCalib == 0 & (handles.CalibSaved==1 || handles.LoadCalib ==1 || handles.LoadFile ==1)
%     question = questdlg('Do you want to start a new calibration ?','User Input','Yes','No', 'No');
%     if isequal(question, 'Yes')
%         %display('step1')
%         handles.StartNewCalib =1;
%         set(handles.radiobuttonCalibRealTime, 'Value',1);
%         set(handles.radiobuttonCalibAcuz, 'Value',0);
%         set(handles.radiobuttonLoudSpeaker, 'Value', 0);
%         set(handles.radiobuttonPipe, 'Value', 1);
%         handles.NameCalib = '';
%         handles.PathCalib = '';
%         set(handles.text_PathCalib, 'String', handles.PathCalib);
%         set(handles.text_NameCalib, 'String', handles.NameCalib);
%         question2 = questdlg('Do you want to keep the current parameters ?','User Input','Keep Params','Load StandardParams', 'New Params', 'Keep Params');
%         if isequal(question2, 'Keep Params')
%             handles.CalibSaved =0;
%             handles.ParamSaved = 1;
%             handles.LoadFile = 0;
%             handles.LoadCalib =0;
%             handles.DataAquired = 0;
%             guidata(hObject, handles)
%
%         elseif isequal(question2, 'Load StandardParams')
%             handles.CalibSaved = 0;
%             handles.LoadCalib =0;
%             handles.ParamSaved = 1;
%             handles.LoadFile = 0;
%             LoadStandardParamAcuz(handles)
%             pause(0.1)
%             guidata(hObject, handles)
%             UpdateInfosCalibrationChoosingSpeed(handles)
%             myicon = imread('GreenCheck2.png');
%             msg = msgbox('Your parameters have been uploaded und saved !', 'Success','custom', myicon);
%             pause(1)
%             close(msg)
%             guidata(hObject, handles)
%
%         elseif isequal(question2, 'New Params')
%             handles.CalibSaved = 0;
%             handles.LoadCalib =0;
%             handles.ParamSaved = 0;
%             handles.LoadFile = 0;
%             handles.SavePath = '';
%             handles.SaveName = '';
%             set(handles.edit_SavePath,'String',handles.SavePath);
%             set(handles.edit_SaveName,'String',handles.SaveName);
%             set(handles.edit_LowestFrequency,'String','');
%             set(handles.edit_HighestFrequency,'String','');
%             set(handles.edit_ValTransducterSetUp,'String','');
%
%             set(handles.pushbutton_StartCalibration,'Enable','off')
%
%             guidata(hObject, handles)
%         end
%         axes(handles.Audio)
%         plot(handles.Audio, [0 1], [0 0], 'w');
%         hold(handles.Audio, 'off');
%
%         axes(handles.Spectre)
%         plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
%         hold(handles.Spectre, 'off');
%
%         axes(handles.Phase)
%         plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
%         hold(handles.Phase, 'off');
%
%         axes(handles.Calibration)
%         plot(handles.Calibration, [0 handles.FreqHi], [0 0], 'w');
%         hold(handles.Calibration, 'off');
%
%         axes(handles.InputCalibration)
%         plot(handles.InputCalibration, [0 handles.FreqHi], [0 0], 'w');
%         hold(handles.InputCalibration, 'off');
%         xlabel(handles.InputCalibration, 'frequency [Hz]'); ylabel(handles.InputCalibration,'[dB]')
%
%         % NH change
%         %         [~, DevIndex] = max(strcmp(OutputName, 'MOTU 828 (Core Audio)'));
%         %         DevID=cell2mat({output(DevIndex).ID});
%         %         handles.DevIDoutput = DevID;
%         %         handles.DevIDmic = DevID;
%         [~, DevIndexOut] = max(strcmp(OutputName, 'Built-in Output (Core Audio)'));
%         DevIDout=cell2mat({output(DevIndexOut).ID});
%         handles.DevIDoutput = DevIDout;
%         [~, DevIndex] = max(strcmp(InputName, 'Built-in Microph (Core Audio)'));
%         DevID=cell2mat({input(DevIndex).ID});
%         handles.DevIDmic = DevID;
%         %
%
%         set(handles.radiobuttonPipe, 'Value',1);
%         set(handles.radiobuttonLoudSpeaker, 'Value',0);
%         set(handles.PannelOutputType, 'UserData', 1);
%
%         set(handles.pushbutton_FlattenCalibration,'Enable','off')
%         set(handles.pushbutton_BeginRecord,'Enable','off')
%
%     else
%         if get(handles.PannelOutputType, 'UserData')==0
%             %display('step2')
%             %             [~, DevIndex] = max(strcmp(OutputName, 'iMic USB audio system (Core Audio)'));
%             %             DevID=cell2mat({output(DevIndex).ID});
%             %             handles.DevIDoutput = DevID;
%             %             handles.DevIDmic = DevID;
%
%             [~, DevIndexOut] = max(strcmp(OutputName, 'Built-in Output (Core Audio)'));
%             DevIDout=cell2mat({output(DevIndexOut).ID});
%             handles.DevIDoutput = DevIDout;
%             [~, DevIndex] = max(strcmp(InputName, 'Built-in Microph (Core Audio)'));
%             DevID=cell2mat({input(DevIndex).ID});
%             handles.DevIDmic = DevID;
%
%             set(handles.radiobuttonPipe, 'Value',0);
%             set(handles.radiobuttonLoudSpeaker, 'Value',1);
%             set(handles.PannelOutputType, 'UserData', 0);
%             set(handles.radiobuttonCalibRealTime, 'Value',1);
%             set(handles.radiobuttonCalibAcuz, 'Value',0);
%             set(handles.PannelCalibType, 'UserData', 1);
%         else
%             %display('step3')
%             [~, DevIndex] = max(strcmp(OutputName, 'MOTU 828 (Core Audio)'));
%             DevID=cell2mat({output(DevIndex).ID});
%             handles.DevIDoutput = DevID;
%             handles.DevIDmic = DevID;
%             set(handles.radiobuttonPipe, 'Value',1);
%             set(handles.radiobuttonLoudSpeaker, 'Value',0);
%             set(handles.PannelOutputType, 'UserData', 1);
%         end
%     end
% else
%     [~, DevIndex] = max(strcmp(OutputName, 'MOTU 828 (Core Audio)'));
%     DevIDout=cell2mat({output(DevIndex).ID});
%     handles.DevIDoutput = DevIDout;
%     DevID=cell2mat({input(DevIndex).ID});
%     handles.DevIDmic = DevID;
%     set(handles.radiobuttonPipe, 'Value', 1);
%     set(handles.PannelOutputType, 'UserData', 1);
%     set(handles.radiobuttonLoudSpeaker, 'Value', 0);
% end
% %display(['mic ID is: ', num2str(handles.DevIDmic)'])
% guidata(hObject, handles)

% --- Executes on button press in radiobuttonLoudSpeaker.
function radiobuttonLoudSpeaker_Callback(hObject, eventdata, handles)
% hObject    handle to radiobuttonLoudSpeaker (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobuttonLoudSpeaker
% get(hObject,'Value')

% %display('change output !')
%
% var = get(handles.radiobuttonCalibAcuz, 'Value');
% devinfo = audiodevinfo;
% output = devinfo.output; LOutput = max(size(output));
% OutputName={output(linspace(1,LOutput,LOutput)).Name};
% input = devinfo.input; LInput = max(size(input));
% InputName={output(linspace(1,LInput,LInput)).Name};
%
% %
% % [~, DevIndexOut] = max(strcmp(OutputName, 'Built-in Output (Core Audio)'));
% % DevIDout=cell2mat({output(DevIndexOut).ID});
% % handles.DevIDoutput = DevIDout;
% % [~, DevIndex] = max(strcmp(InputName, 'Built-in Microph (Core Audio)'));
% % DevID=cell2mat({input(DevIndex).ID});
% % handles.DevIDmic = DevID;
% % %
% %
% %             [~, DevIndex] = max(strcmp(OutputName, 'MOTU 828 (Core Audio)'));
% %             DevID=cell2mat({output(DevIndex).ID});
% %             handles.DevIDoutput = DevID;
% %             handles.DevIDmic = DevID;
%
%
%
% if handles.StartNewCalib == 0 & (handles.CalibSaved==1 || handles.LoadCalib ==1 || handles.LoadFile ==1)
%     question = questdlg('Do you want to start a new calibration ?','User Input','Yes','No', 'No');
%     if isequal(question, 'Yes')
%         %display('step1')
%         handles.StartNewCalib =1;
%         set(handles.radiobuttonCalibRealTime, 'Value',1);
%         set(handles.radiobuttonCalibAcuz, 'Value',0);
%         set(handles.radiobuttonLoudSpeaker, 'Value', 0);
%         set(handles.radiobuttonPipe, 'Value', 1);
%         handles.NameCalib = '';
%         handles.PathCalib = '';
%         set(handles.text_PathCalib, 'String', handles.PathCalib);
%         set(handles.text_NameCalib, 'String', handles.NameCalib);
%         question2 = questdlg('Do you want to keep the current parameters ?','User Input','Keep Params','Load StandardParams', 'New Params', 'Keep Params');
%         if isequal(question2, 'Keep Params')
%             handles.CalibSaved =0;
%             handles.ParamSaved = 1;
%             handles.LoadFile = 0;
%             handles.LoadCalib =0;
%             handles.DataAquired = 0;
%             guidata(hObject, handles)
%
%         elseif isequal(question2, 'Load StandardParams')
%             handles.CalibSaved = 0;
%             handles.LoadCalib =0;
%             handles.ParamSaved = 1;
%             handles.LoadFile = 0;
%             LoadStandardParamAcuz(handles)
%             pause(0.1)
%             guidata(hObject, handles)
%             UpdateInfosCalibrationChoosingSpeed(handles)
%             myicon = imread('GreenCheck2.png');
%             msg = msgbox('Your parameters have been updated and saved !', 'Success','custom', myicon);
%             pause(1)
%             close(msg)
%             guidata(hObject, handles)
%
%         elseif isequal(question2, 'New Params')
%             handles.CalibSaved = 0;
%             handles.LoadCalib =0;
%             handles.ParamSaved = 0;
%             handles.LoadFile = 0;
%             handles.SavePath = '';
%             handles.SaveName = '';
%             set(handles.edit_SavePath,'String',handles.SavePath);
%             set(handles.edit_SaveName,'String',handles.SaveName);
%             set(handles.edit_LowestFrequency,'String','');
%             set(handles.edit_HighestFrequency,'String','');
%             set(handles.edit_ValTransducterSetUp,'String','');
%
%             set(handles.pushbutton_StartCalibration,'Enable','off')
%
%             guidata(hObject, handles)
%         end
%         axes(handles.Audio)
%         plot(handles.Audio, [0 1], [0 0], 'w');
%         hold(handles.Audio, 'off');
%
%         axes(handles.Spectre)
%         plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
%         hold(handles.Spectre, 'off');
%
%         axes(handles.Phase)
%         plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
%         hold(handles.Phase, 'off');
%
%         axes(handles.Calibration)
%         plot(handles.Calibration, [0 handles.FreqHi], [0 0], 'w');
%         hold(handles.Calibration, 'off');
%         xlabel(handles.Calibration, 'frequency [Hz]'); ylabel(handles.Calibration,'[dB]')
%
%         axes(handles.InputCalibration)
%         plot(handles.InputCalibration, [0 handles.FreqHi], [0 0], 'w');
%         hold(handles.InputCalibration, 'off');
%         xlabel(handles.InputCalibration, 'frequency [Hz]'); ylabel(handles.InputCalibration,'[dB]')
%
%         %         [~, DevIndex] = max(strcmp(OutputName, 'iMic USB audio system (Core Audio)'));
%         %         DevID=cell2mat({output(DevIndex).ID});
%         %         handles.DevIDoutput = DevID;
%         %         handles.DevIDmic = DevID;
%         [~, DevIndexOut] = max(strcmp(OutputName, 'Built-in Output (Core Audio)'));
%         DevIDout=cell2mat({output(DevIndexOut).ID});
%         handles.DevIDoutput = DevIDout;
%         [~, DevIndex] = max(strcmp(InputName, 'Built-in Microph (Core Audio)'));
%         DevID=cell2mat({input(DevIndex).ID});
%         handles.DevIDmic = DevID;
%
%         set(handles.radiobuttonPipe, 'Value',0);
%         set(handles.radiobuttonLoudSpeaker, 'Value',1);
%         set(handles.PannelOutputType, 'UserData', 0);
%         set(handles.radiobuttonCalibRealTime, 'Value',1);
%         set(handles.radiobuttonCalibAcuz, 'Value',0);
%         set(handles.PannelCalibType, 'UserData', 1);
%
%         set(handles.pushbutton_FlattenCalibration,'Enable','off')
%         set(handles.pushbutton_BeginRecord,'Enable','off')
%
%     else
%         if get(handles.PannelOutputType, 'UserData')==0
%             %display('step2')
%             %             [~, DevIndex] = max(strcmp(OutputName, 'iMic USB audio system (Core Audio)'));
%             [~, DevIndexOut] = max(strcmp(OutputName, 'Built-in Output (Core Audio)'));
%             DevIDout=cell2mat({output(DevIndexOut).ID});
%             handles.DevIDoutput = DevIDout;
%             [~, DevIndex] = max(strcmp(InputName, 'Built-in Microph (Core Audio)'));
%             DevID=cell2mat({input(DevIndex).ID});
%             handles.DevIDmic = DevID;
%             set(handles.radiobuttonPipe, 'Value',0);
%             set(handles.radiobuttonLoudSpeaker, 'Value',1);
%             set(handles.PannelOutputType, 'UserData', 0);
%             set(handles.radiobuttonCalibRealTime, 'Value',1);
%             set(handles.radiobuttonCalibAcuz, 'Value',0);
%             set(handles.PannelCalibType, 'UserData', 1);
%         else
%             %display('step3')
%             [~, DevIndex] = max(strcmp(OutputName, 'MOTU 828 (Core Audio)'));
%             DevID=cell2mat({output(DevIndex).ID});
%             handles.DevIDoutput = DevID;
%             handles.DevIDmic = DevID;
%             set(handles.radiobuttonPipe, 'Value',1);
%             set(handles.radiobuttonLoudSpeaker, 'Value',0);
%             set(handles.PannelOutputType, 'UserData', 1);
%         end
%     end
% else
%     if isequal(1,get(handles.radiobuttonCalibAcuz, 'Value'))==1
%         [~, DevIndex] = max(strcmp(OutputName, 'MOTU 828 (Core Audio)'));
%         DevID=cell2mat({output(DevIndex).ID});
%         handles.DevIDoutput = DevID;
%         handles.DevIDmic = DevID;
%         set(handles.radiobuttonPipe, 'Value', 1);
%         set(handles.PannelOutputType, 'UserData', 1);
%         set(hObject, 'Value', 0);
%     else
%         %         [~, DevIndex] = max(strcmp(OutputName, 'iMic USB audio system (Core Audio)'));
%         %         DevID=cell2mat({output(DevIndex).ID});
%         %         handles.DevIDoutput = DevID;
%         %         handles.DevIDmic = DevID;
%
%         [~, DevIndexOut] = max(strcmp(OutputName, 'Built-in Output (Core Audio)'));
%         DevIDout=cell2mat({output(DevIndexOut).ID});
%         handles.DevIDoutput = DevIDout;
%         [~, DevIndex] = max(strcmp(InputName, 'Built-in Microph (Core Audio)'));
%         DevID=cell2mat({input(DevIndex).ID});
%         handles.DevIDmic = DevID;
%
%         set(handles.radiobuttonPipe, 'Value', 0);
%         set(handles.PannelOutputType, 'UserData', 0);
%         set(hObject, 'Value', 1);
%     end
% end
% %display(['mic ID is: ', num2str(handles.DevIDmic)'])
% guidata(hObject, handles)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in SaveSpectrum.
function SaveSpectrum_Callback(hObject, eventdata, handles)
% hObject    handle to SaveSpectrum (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
[filename, pathname] = uiputfile('Fig-.fig', 'Save graphs as');
Fig = figure; set(Fig, 'Visible', 'on');

subplot(4,1,1) = handles.Audio;
subplot(4,1,2) = handles.EGG;
subplot(4,1,3) = handles.Spectre;
subplot(4,1,4) = handles.Phase;
% plot(1:10);
axAudio = subplot(4,1,1);
axEGG = subplot(4,1,2);
axSpectre = subplot(4,1,3);
axPhase = subplot(4,1,4);
set(axAudio.Title, 'String', 'Audio', 'Visible', 'off');
set(axEGG.Title, 'String', 'EGG', 'Visible', 'off');
set(axSpectre.Title, 'String', 'Magnitude', 'Visible', 'off');
set(axPhase.Title, 'String', 'Phase', 'Visible', 'off');


newFig = copyobj([axAudio axEGG axSpectre axPhase], Fig);
set(newFig, 'Visible', 'on');
hgsave(newFig , [pathname,filename]);

% assignin('base','SavedFig', SavedFig)
% savefig(SavedFig, 'testFig_21fev_6pm38.fig');



% hgsave(NewFig, [pathname,filename]);
% close(figureTEST)
% openfig([pathname,filename],'visible')

% newFig = copyobj([subplot(4,1,1) subplot(4,1,2) subplot(4,1,3) subplot(4,1,4)] , Fig)
% class(newFig)
% set(newFig, 'Visible', 'on');
% newFig = copyobj([handles.Audio handles.Audio handles.Spectre handles.Phase handles.LGDSpectre handles.LGDPhase] , Fig)

% plot(1:10);
% axAudio = newFig(1)
% axEGG = newFig(2)
% axSpectre = newFig(3)
% axPhase = newFig(4)
% LGDspectre = newFig(5) %legend(axSpectre, lgdSpectre)
% LGDphase = newFig(6) %legend(axPhase, lgdPhase)
% set(axAudio.Title, 'String', 'Audio', 'Visible', 'on')
% set(axEGG.Title, 'String', 'Audio', 'Visible', 'on')
% set(axSpectre.Title, 'String', 'Magnitude', 'Visible', 'on')
% set(axPhase.Title, 'String', 'Phase', 'Visible', 'on')
% LGDspectre.Visible = 'on'
% LGDphase.Visible = 'on'
% LGDspectre.Location = 'northeastoutside'
% LGDphase.Location = 'northeastoutside'
% H.axAudio = axAudio;
% H.axEGG = axEGG;
% H.axSpectre = axSpectre;
% H.axPhase = axPhase;
% H.LGDspectre = LGDspectre;
% H.LGDphase = LGDphase;
% guidata(hObject, H)
% class(H)
% SavedFig = figure;
% SavedFig.Children = newFig
% set(SavedFig, 'Visible', 'on');
% saveas(H, [pathname,filename], 'fig');
% SavedFig = hggroup;
% plot(rand(5),'Parent',SavedFig)
% SavedFig
% class(SavedFig)
% set(newFig(1:end),'Parent',SavedFig)
% SavedFig




% LGDspectre.Visible = 'off'
% LGDphase.Visible = 'off'



% --- Executes on button press in SavePhase.
function SavePhase_Callback(hObject, eventdata, handles)
% hObject    handle to SavePhase (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
[filename, pathname] = uiputfile('Fig-.fig', 'Save graphs as');
Fig = figure; set(Fig, 'Visible', 'on');

subplot(4,1,1) = handles.Audio;
subplot(4,1,2) = handles.EGG;
subplot(4,1,3) = handles.Spectre;
subplot(4,1,4) = handles.Phase;
% plot(1:10);
axAudio = subplot(4,1,1);
axEGG = subplot(4,1,2);
axSpectre = subplot(4,1,3);
axPhase = subplot(4,1,4);
set(axAudio.Title, 'String', 'Audio', 'Visible', 'off');
set(axEGG.Title, 'String', 'EGG', 'Visible', 'off');
set(axSpectre.Title, 'String', 'Magnitude', 'Visible', 'off');
set(axPhase.Title, 'String', 'Phase', 'Visible', 'off');


newFig = copyobj([axAudio axEGG axSpectre axPhase], Fig);
set(newFig, 'Visible', 'on');
hgsave(newFig , [pathname,filename]);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in radiobuttonCalibRealTime.
function radiobuttonCalibRealTime_Callback(hObject, eventdata, handles)
% hObject    handle to radiobuttonCalibRealTime (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobuttonCalibAcuz
%display('calib realtime !')
if handles.StartNewCalib == 0 & (handles.CalibSaved==1 || handles.LoadCalib ==1 || handles.LoadFile ==1)
    question = questdlg('Do you want to start a new calibration ?','User Input','Yes','No', 'No');
    if isequal(question, 'Yes')
        %display('step1')
        handles.StartNewCalib =1;
        set(handles.radiobuttonCalibRealTime, 'Value',1);
        set(handles.radiobuttonCalibAcuz, 'Value',0);
        set(handles.radiobuttonLoudSpeaker, 'Value', 0);
        set(handles.radiobuttonPipe, 'Value', 1);
        handles.NameCalib = '';
        handles.PathCalib = '';
        set(handles.text_PathCalib, 'String', handles.PathCalib);
        set(handles.text_NameCalib, 'String', handles.NameCalib);
        question2 = questdlg('Do you want to keep the current parameters ?','User Input','Keep Params','Load StandardParams', 'New Params', 'Keep Params');
        if isequal(question2, 'Keep Params')
            handles.CalibSaved =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            handles.LoadCalib =0;
            handles.DataAquired = 0;
            guidata(hObject, handles)
            
        elseif isequal(question2, 'Load StandardParams')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            LoadStandardParamAcuz(handles)
            pause(0.1)
            guidata(hObject, handles)
            UpdateInfosCalibrationChoosingSpeed(handles)
            myicon = imread('GreenCheck2.png');
            msg = msgbox('Your parameters have been updated and saved !', 'Success','custom', myicon);
            pause(1)
            close(msg)
            guidata(hObject, handles)
            
        elseif isequal(question2, 'New Params')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 0;
            handles.LoadFile = 0;
            handles.SavePath = '';
            handles.SaveName = '';
            set(handles.edit_SavePath,'String',handles.SavePath);
            set(handles.edit_SaveName,'String',handles.SaveName);
            set(handles.edit_LowestFrequency,'String','');
            set(handles.edit_HighestFrequency,'String','');
            set(handles.edit_ValTransducterSetUp,'String','');
            
            set(handles.pushbutton_StartCalibration,'Enable','off')
            
            guidata(hObject, handles)
        end
        axes(handles.Audio)
        plot(handles.Audio, [0 1], [0 0], 'w');
        hold(handles.Audio, 'off');
        
        axes(handles.Spectre)
        plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Spectre, 'off');
        
        axes(handles.Phase)
        plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Phase, 'off');
        
        axes(handles.Calibration)
        plot(handles.Calibration, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Calibration, 'off');
        
        axes(handles.InputCalibration)
        plot(handles.InputCalibration, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.InputCalibration, 'off');
        xlabel(handles.InputCalibration, 'frequency [Hz]'); ylabel(handles.InputCalibration,'[dB]')
        
        %%%%%%%%%%%%%%%%%%%%
        set(handles.pushbutton_FlattenCalibration,'Enable','off')
        set(handles.pushbutton_BeginRecord,'Enable','off')
        
    else
        if get(handles.PannelCalibType, 'UserData')==0
            %display('step2')
            set(handles.radiobuttonCalibAcuz, 'Value',1);
            set(handles.radiobuttonPipe, 'Value',1);
            set(handles.radiobuttonLoudSpeaker, 'Value',0);
            set(handles.radiobuttonCalibRealTime, 'Value',0);
            set(handles.PannelCalibType, 'UserData', 0);
        else
            %display('step3')
            set(handles.radiobuttonCalibAcuz, 'Value',0);
            set(handles.radiobuttonCalibRealTime, 'Value',1);
            set(handles.PannelCalibType, 'UserData', 1);
        end
    end
    % elseif handles.StartNewCalib == 1
else
    %display('step4')
    set(handles.radiobuttonCalibAcuz, 'Value',0);
    set(handles.radiobuttonCalibRealTime, 'Value',1);
    set(handles.PannelCalibType, 'UserData', 1);
end
guidata(hObject, handles);

% --- Executes on button press in radiobuttonCalibAcuz.
function radiobuttonCalibAcuz_Callback(hObject, eventdata, handles)
% hObject    handle to radiobuttonCalibAcuz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobuttonCalibAcuz
%display('calib acuz')
get(handles.PannelCalibType, 'UserData')
get(handles.radiobuttonCalibRealTime, 'Tag')
if handles.StartNewCalib == 0 & (handles.CalibSaved==1 || handles.LoadCalib ==1 || handles.LoadFile ==1)
    question = questdlg('Do you want to start a new calibration ?','User Input','Yes','No', 'No');
    if isequal(question, 'Yes')
        handles.StartNewCalib =1;
        set(handles.radiobuttonCalibAcuz, 'Value',1);
        set(handles.radiobuttonCalibRealTime, 'Value',0);
        set(handles.radiobuttonLoudSpeaker, 'Value', 0);
        set(handles.radiobuttonPipe, 'Value', 1);
        handles.NameCalib = '';
        handles.PathCalib = '';
        set(handles.text_PathCalib, 'String', handles.PathCalib);
        set(handles.text_NameCalib, 'String', handles.NameCalib);
        question2 = questdlg('Do you want to keep the current parameters ?','User Input','Keep Params','Load StandardParams', 'New Params', 'Keep Params');
        if isequal(question2, 'Keep Params')
            handles.CalibSaved =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            handles.LoadCalib =0;
            handles.DataAquired = 0;
            guidata(hObject, handles)
            
        elseif isequal(question2, 'Load StandardParams')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            LoadStandardParamAcuz(handles)
            pause(0.1)
            guidata(hObject, handles)
            UpdateInfosCalibrationChoosingSpeed(handles)
            myicon = imread('GreenCheck2.png');
            msg = msgbox('Your parameters have been uploaded und saved !', 'Success','custom', myicon);
            pause(1)
            close(msg)
            guidata(hObject, handles)
            
        elseif isequal(question2, 'New Params')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 0;
            handles.LoadFile = 0;
            handles.SavePath = '';
            handles.SaveName = '';
            set(handles.edit_SavePath,'String',handles.SavePath);
            set(handles.edit_SaveName,'String',handles.SaveName);
            set(handles.edit_LowestFrequency,'String','');
            set(handles.edit_HighestFrequency,'String','');
            set(handles.edit_ValTransducterSetUp,'String','');
            
            set(handles.pushbutton_StartCalibration,'Enable','off')
            
            guidata(hObject, handles)
        end
        axes(handles.Audio)
        plot(handles.Audio, [0 1], [0 0], 'w');
        hold(handles.Audio, 'off');
        
        axes(handles.Spectre)
        plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Spectre, 'off');
        
        axes(handles.Phase)
        plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Phase, 'off');
        
        axes(handles.Calibration)
        plot(handles.Calibration, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Calibration, 'off');
        
        axes(handles.InputCalibration)
        plot(handles.InputCalibration, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.InputCalibration, 'off');
        xlabel(handles.InputCalibration, 'frequency [Hz]'); ylabel(handles.InputCalibration,'[dB]')
        
        %%%%%%%%%%%%%%%%%%%%
        set(handles.pushbutton_FlattenCalibration,'Enable','off')
        set(handles.pushbutton_BeginRecord,'Enable','off')
        
    else
        if get(handles.PannelCalibType, 'UserData')==0
            set(handles.radiobuttonCalibAcuz, 'Value',1);
            set(handles.radiobuttonLoudSpeaker, 'Value',0);
            set(handles.radiobuttonPipe, 'Value',1);
            set(handles.radiobuttonCalibRealTime, 'Value',0);
            set(handles.PannelCalibType, 'UserData', 0);
        else
            set(handles.radiobuttonCalibAcuz, 'Value',0);
            set(handles.radiobuttonCalibRealTime, 'Value',1);
            set(handles.PannelCalibType, 'UserData', 1);
        end
    end
    % elseif handles.StartNewCalib == 1
else
    set(handles.radiobuttonCalibAcuz, 'Value',1);
    set(handles.radiobuttonPipe, 'Value',1);
    set(handles.radiobuttonCalibRealTime, 'Value',0);
    set(handles.radiobuttonLoudSpeaker, 'Value',0);
    set(handles.PannelCalibType, 'UserData', 0);
end
guidata(hObject, handles);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in radiobuttonCalculationRealTime.
function radiobuttonCalculationRealTime_Callback(hObject, eventdata, handles)
% hObject    handle to radiobuttonCalculationRealTime (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobuttonCalculationRealTime
%legend
set(handles.DisplayDeleteHarmonics, 'Enable','on');
if handles.CalibSaved==1 || handles.LoadCalib ==1 || handles.LoadFile ==1
    %display('step1')
    set(handles.CalculationPlayStopBBSignal, 'Visible', 'on');
    set(handles.CalculationStop, 'Visible', 'on');
    set(handles.CalculationPlayStopBBSignal, 'Enable', 'on');
    set(handles.CalculationStop, 'Enable', 'on');
    set(handles.DisplayUnwrapPhase, 'String', 'Unwrap(Phase)');
    set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Unwrap(Phase)) / d(freq)');
    if handles.StopRecordPushed == 1 || handles.DataAquired ==0
        %display('step2')
        set(handles.pushbutton_BeginRecord, 'Enable', 'on')
    end
else
    %display('step3')
    set(handles.pushbutton_BeginRecord, 'Enable', 'off')
    set(handles.CalculationPlayStopBBSignal, 'Visible', 'on');
    set(handles.CalculationStop, 'Visible', 'on');
    set(handles.CalculationPlayStopBBSignal, 'Enable', 'on');
    set(handles.CalculationStop, 'Enable', 'on');
    set(handles.DisplayUnwrapPhase, 'String', 'Unwrap(Phase)');
    set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Unwrap(Phase)) / d(freq)');
end

% --- Executes on button press in radiobuttonCalculationAcuz.
function radiobuttonCalculationAcuz_Callback(hObject, eventdata, handles)
% hObject    handle to radiobuttonCalculationAcuz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobuttonCalculationAcuz
%legend


if handles.CalibSaved==1 || handles.LoadCalib ==1 || handles.LoadFile ==1
    %display('step1')
    set(handles.CalculationPlayStopBBSignal, 'Visible', 'off');
    set(handles.CalculationStop, 'Visible', 'off');
    set(handles.DisplayUnwrapPhase, 'String', 'Phase');
    set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Phase) / d(freq)');
    if handles.StopRecordPushed == 1 || handles.DataAquired ==0
        %display('step2')
        set(handles.pushbutton_BeginRecord, 'Enable', 'on');
    end
else
    %display('step3')
    set(handles.pushbutton_BeginRecord, 'Enable', 'off')
    set(handles.CalculationPlayStopBBSignal, 'Visible', 'off');
    set(handles.CalculationStop, 'Visible', 'off');
    set(handles.DisplayUnwrapPhase, 'String', 'Phase');
    set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Phase) / d(freq)');
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% --- Executes on button press in pushbutton_keyC5.
function pushbutton_keyC5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(37)=523; %Hz
    vect(37) = 523;
    KeyBoardFreq(37) = 523;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(37)=0; %Hz
    vect(37) = 0;
    KeyBoardFreq(37) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        get(hObject, 'BackgroundColor')
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            display('11111')
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(37)=523; %Hz
            vect(37) = 523;
            KeyBoardFreq(37) = 523;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            display('22222')
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(37)=0; %Hz
            vect(37) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
            KeyBoardFreq(37) = 0;
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyD5.
function pushbutton_keyD5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyD5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(39)=587; %Hz
    vect(39) = 587;
    KeyBoardFreq(39) = 587;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(39)=0; %Hz
    vect(39) = 0;
    KeyBoardFreq(39) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(39)=587; %Hz
            vect(39) = 587;
            KeyBoardFreq(39) = 587;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(39)=0; %Hz
            vect(39) = 0;
            KeyBoardFreq(39) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyF5.
function pushbutton_keyF5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyF5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(42)=698; %Hz
    vect(42)=698;
    KeyBoardFreq(42) = 698;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(42)=0; %Hz
    vect(42)=0;
    KeyBoardFreq(42) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(42)=698; %Hz
            vect(42)=698;
            KeyBoardFreq(42) = 698;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(42)=0; %Hz
            vect(42)=0;
            KeyBoardFreq(42) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyG5.
function pushbutton_keyG5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyG5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(44)=784; %Hz
    vect(44)=784;
    KeyBoardFreq(44) = 784;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(44)=0; %Hz
    vect(44)=0;
    KeyBoardFreq(44) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(44)=784; %Hz
            vect(44)=784;
            KeyBoardFreq(44) = 784;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(44)=0; %Hz
            vect(44)=0;
            KeyBoardFreq(44) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% --- Executes on button press in pushbutton_keyB5.
function pushbutton_keyB5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyB5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(48)=988; %Hz
    vect(48)=988;
    KeyBoardFreq(48) = 988;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(48)=0; %Hz
    vect(48)=0;
    KeyBoardFreq(48) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(48)=988; %Hz
            vect(48)=988;
            KeyBoardFreq(48) = 988;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(48)=0; %Hz
            vect(48)=0;
            KeyBoardFreq(48) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyA5.
function pushbutton_keyA5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(46)=880; %Hz
    vect(46) = 880;
    KeyBoardFreq(46) = 880;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(46)=0; %Hz
    vect(46) = 0;
    KeyBoardFreq(46) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(46)=880; %Hz
            vect(46) = 880;
            KeyBoardFreq(46) = 880;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(46)=0; %Hz
            vect(46) = 0;
            KeyBoardFreq(46) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyA5.
function pushbutton_keyE5_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(41)=659; %Hz
    vect(41)= 659;
    KeyBoardFreq(41) = 659;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(41)=0; %Hz
    vect(41)= 0;
    KeyBoardFreq(41) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(41)=659; %Hz
            vect(41)= 659;
            KeyBoardFreq(41) = 659;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(41)=0; %Hz
            vect(41)= 0;
            KeyBoardFreq(41) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyC6.
function pushbutton_keyC6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 0])==1
    set(hObject, 'BackgroundColor', [0 1 1])
    handles.KeyBoardFreq(49)=1046; %Hz
    vect(49)=1046;
    KeyBoardFreq(49) = 1046;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 0])
    handles.KeyBoardFreq(49)=0; %Hz
    vect(49)=0;
    KeyBoardFreq(49) = 0;
    set(handles.PannelChooseDisplay, 'UserData',vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 0])==1
            set(hObject, 'BackgroundColor', [0 1 1])
            handles.KeyBoardFreq(49)=1046; %Hz
            vect(49)=1046;
            KeyBoardFreq(49) = 1046;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 0])
            handles.KeyBoardFreq(49)=0; %Hz
            vect(49)=0;
            KeyBoardFreq(49) = 0;
            set(handles.PannelChooseDisplay, 'UserData',vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyG5sh.
function pushbutton_keyG5sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyG5sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(45)=831; %Hz
    vect(45) = 831;
    KeyBoardFreq(45) = 831;
    set(handles.PannelChooseDisplay, 'UserData',vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(45)=0; %Hz
    vect(45) = 0;
    KeyBoardFreq(45) = 0;
    set(handles.PannelChooseDisplay, 'UserData',vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif  IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(45)=831; %Hz
            vect(45) = 831;
            KeyBoardFreq(45) = 831;
            set(handles.PannelChooseDisplay, 'UserData',vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(45)=0; %Hz
            vect(45) = 0;
            KeyBoardFreq(45) = 0;
            set(handles.PannelChooseDisplay, 'UserData',vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyA5sh.
function pushbutton_keyA5sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA5sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(47)=932; %Hz
    vect(47) = 932;
    KeyBoardFreq(47) = 932;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(47)=0; %Hz
    vect(47) = 0;
    KeyBoardFreq(47) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(47)=932; %Hz
            vect(47) = 932;
            KeyBoardFreq(47) = 932;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(47)=0; %Hz
            vect(47) = 0;
            KeyBoardFreq(47) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyF5sh.
function pushbutton_keyF5sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyF5sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(43)=740; %Hz
    vect(43)=740;
    KeyBoardFreq(43) = 740;
    set(handles.PannelChooseDisplay, 'UserData',vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(43)=0; %Hz
    vect(43)=0;
    KeyBoardFreq(43) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(43)=740; %Hz
            vect(43)=740;
            KeyBoardFreq(43) = 740;
            set(handles.PannelChooseDisplay, 'UserData',vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(43)=0; %Hz
            vect(43)=0;
            KeyBoardFreq(43) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyD6.
function pushbutton_keyD6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyD6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(51)=1175; %Hz
    vect(51)=1175;
    KeyBoardFreq(51) = 1175;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(51)=0; %Hz
    vect(51)=0;
    KeyBoardFreq(51) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(51)=1175; %Hz
            vect(51)=1175;
            KeyBoardFreq(51) = 1175;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(51)=0; %Hz
            vect(51)=0;
            KeyBoardFreq(51) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyC6sh.
function pushbutton_keyC6sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC6sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(50)=1109; %Hz
    vect(50)=1109;
    KeyBoardFreq(50) = 1109;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(50)=0; %Hz
    vect(50)=0;
    KeyBoardFreq(50) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(50)=1109; %Hz
            vect(50)=1109;
            KeyBoardFreq(50) = 1109;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(50)=0; %Hz
            vect(50)=0;
            KeyBoardFreq(50) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyE6.
function pushbutton_keyE6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyE6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(53)=1318; %Hz
    vect(53)=1318;
    KeyBoardFreq(53) = 1318;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(53)=0; %Hz
    vect(53)=0;
    KeyBoardFreq(53) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(53)=1318; %Hz
            vect(53)=1318;
            KeyBoardFreq(53) = 1318;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(53)=0; %Hz
            vect(53)=0;
            KeyBoardFreq(53) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyF6.
function pushbutton_keyF6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyF6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(54)=1397; %Hz
    vect(54)=1397;
    KeyBoardFreq(54) = 1397;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(54)=0; %Hz
    vect(54)=0;
    KeyBoardFreq(54) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(54)=1397; %Hz
            vect(54)=1397;
            KeyBoardFreq(54) = 1397;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(54)=0; %Hz
            vect(54)=0;
            KeyBoardFreq(54) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyD6sh.
function pushbutton_keyD6sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyD6sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(52)=1244; %Hz
    vect(52) = 1244;
    KeyBoardFreq(52) = 1244;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(52)=0; %Hz
    vect(52) = 0;
    KeyBoardFreq(52) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(52)=1244; %Hz
            vect(52) = 1244;
            KeyBoardFreq(52) = 1244;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(52)=0; %Hz
            vect(52) = 0;
            KeyBoardFreq(52) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyC5sh.
function pushbutton_keyC5sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC5sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(38)=554; %Hz
    vect(38)=554;
    KeyBoardFreq(38) = 554;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(38)=0; %Hz
    vect(38)=0;
    KeyBoardFreq(38) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(38)=554; %Hz
            vect(38)=554;
            KeyBoardFreq(38) = 554;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(38)=0; %Hz
            vect(38)=0;
            KeyBoardFreq(38) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyD5sh.
function pushbutton_keyD5sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyD5sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(40)=622; %Hz
    vect(40) = 622;
    KeyBoardFreq(40) = 622;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(40)=0; %Hz
    vect(40)=0;
    KeyBoardFreq(40) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(40)=622; %Hz
            vect(40) = 622;
            KeyBoardFreq(40) = 622;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(40)=0; %Hz
            vect(40)=0;
            KeyBoardFreq(40) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyC4.
function pushbutton_keyC4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(25)=262; %Hz
    vect(25) = 262;
    KeyBoardFreq(25) = 262;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(25)=0; %Hz
    vect(25) = 0;
    KeyBoardFreq(25) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(25)=262; %Hz
            vect(25) = 262;
            KeyBoardFreq(25) = 262;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(25)=0; %Hz
            vect(25) = 0;
            KeyBoardFreq(25) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyD4.
function pushbutton_keyD4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyD4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(27)=294; %Hz
    vect(27)=294;
    KeyBoardFreq(27) = 294;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(27)=0; %Hz
    vect(27)=0;
    KeyBoardFreq(27) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(27)=294; %Hz
            vect(27)=294;
            KeyBoardFreq(27) = 294;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(27)=0; %Hz
            vect(27)=0;
            KeyBoardFreq(27) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% --- Executes on button press in pushbutton_keyE4.
function pushbutton_keyE4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyE4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(29)=330; %Hz
    vect(29) = 330;
    KeyBoardFreq(29) = 330;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(29)=0; %Hz
    vect(29) = 0;
    KeyBoardFreq(29) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(29)=330; %Hz
            vect(29) = 330;
            KeyBoardFreq(29) = 330;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(29)=0; %Hz
            vect(29) = 0;
            KeyBoardFreq(29) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyF4.
function pushbutton_keyF4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyF4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(30)=349; %Hz
    vect(30) = 349;
    KeyBoardFreq(30) = 349;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(30)=0; %Hz
    vect(30) = 0;
    KeyBoardFreq(30) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(30)=349; %Hz
            vect(30) = 349;
            KeyBoardFreq(30) = 349;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(30)=0; %Hz
            vect(30) = 0;
            KeyBoardFreq(30) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyG4.
function pushbutton_keyG4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyG4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(32)=392; %Hz
    vect(32) = 392;
    KeyBoardFreq(32) = 392;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(32)=0; %Hz
    vect(32) = 0;
    KeyBoardFreq(32) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(32)=392; %Hz
            vect(32) = 392;
            KeyBoardFreq(32) = 392;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(32)=0; %Hz
            vect(32) = 0;
            KeyBoardFreq(32) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyB4.
function pushbutton_keyB4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyB4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(36)=494; %Hz
    vect(36)=494;
    KeyBoardFreq(36) = 494;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(36)=0; %Hz
    vect(36)=0;
    KeyBoardFreq(36) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(36)=494; %Hz
            vect(36)=494;
            KeyBoardFreq(36) = 494;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(36)=0; %Hz
            vect(36)=0;
            KeyBoardFreq(36) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyA4.
function pushbutton_keyA4_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 0])==1
    set(hObject, 'BackgroundColor', [0 1 1])
    handles.KeyBoardFreq(34)=440; %Hz
    vect(34) = 440;
    KeyBoardFreq(34) = 440;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 0])
    handles.KeyBoardFreq(34)=0; %Hz
    vect(34) = 0;
    KeyBoardFreq(34) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 0])==1
            set(hObject, 'BackgroundColor', [0 1 1])
            handles.KeyBoardFreq(34)=440; %Hz
            vect(34) = 440;
            KeyBoardFreq(34) = 440;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 0])
            handles.KeyBoardFreq(34)=0; %Hz
            vect(34) = 0;
            KeyBoardFreq(34) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
            
        end
    end
    guidata(hObject, handles);
end



% --- Executes on button press in pushbutton_keyG4sh.
function pushbutton_keyG4sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyG4sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(33)=415; %Hz
    vect(33) = 415;
    KeyBoardFreq(33) = 415;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(33)=0; %Hz
    vect(33) = 0;
    KeyBoardFreq(33) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(33)=415; %Hz
            vect(33) = 415;
            KeyBoardFreq(33) = 415;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(33)=0; %Hz
            vect(33) = 0;
            KeyBoardFreq(33) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyA4sh.
function pushbutton_keyA4sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA4sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(35)=466; %Hz
    vect(35) = 466;
    KeyBoardFreq(35) = 466;
    set(handles.PannelChooseDisplay, 'UserData',vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(35)=0; %Hz
    vect(35) = 0;
    KeyBoardFreq(35) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
    
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(35)=466; %Hz
            vect(35) = 466;
            KeyBoardFreq(35) = 466;
            set(handles.PannelChooseDisplay, 'UserData',vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(35)=0; %Hz
            vect(35) = 0;
            KeyBoardFreq(35) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
            
        end
    end
    guidata(hObject, handles);
end
% --- Executes on button press in pushbutton_keyF4sh.
function pushbutton_keyF4sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyF4sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(31)=370; %Hz
    vect(31) = 370;
    KeyBoardFreq(31) = 370;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(31)=0; %Hz
    vect(31) = 0;
    KeyBoardFreq(31) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(31)=370; %Hz
            vect(31) = 370;
            KeyBoardFreq(31) = 370;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(31)=0; %Hz
            vect(31) = 0;
            KeyBoardFreq(31) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyC4sh.
function pushbutton_keyC4sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC4sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(26)=277; %Hz
    vect(26) = 277;
    KeyBoardFreq(26) = 277;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(26)=0; %Hz
    vect(26) = 0;
    KeyBoardFreq(26) = 0;
    set(handles.PannelChooseDisplay, 'UserData',vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(26)=277; %Hz
            vect(26) = 277;
            KeyBoardFreq(26) = 277;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(26)=0; %Hz
            vect(26) = 0;
            KeyBoardFreq(26) = 0;
            set(handles.PannelChooseDisplay, 'UserData',vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyD4sh.
function pushbutton_keyD4sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyD4sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(28)=311; %Hz
    vect(28) = 311;
    KeyBoardFreq(28) = 311;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(28)=0; %Hz
    vect(28) = 0;
    KeyBoardFreq(28) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(28)=311; %Hz
            vect(28) = 311;
            KeyBoardFreq(28) = 311;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(28)=0; %Hz
            vect(28) = 0;
            KeyBoardFreq(28) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyG6.
function pushbutton_keyG6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyG6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(56)=1568; %Hz
    vect(56) = 1568;
    KeyBoardFreq(56) = 1568;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(56)=0; %Hz
    vect(56) = 0;
    KeyBoardFreq(56) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(56)=1568; %Hz
            vect(56) = 1568;
            KeyBoardFreq(56) = 1568;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(56)=0; %Hz
            vect(56) = 0;
            KeyBoardFreq(56) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyB6.
function pushbutton_keyB6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyB6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(60)=1975; %Hz
    vect(60) = 1975;
    KeyBoardFreq(60) = 1975;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(60)=0; %Hz
    vect(60) = 0;
    KeyBoardFreq(60) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(60)=1975; %Hz
            vect(60) = 1975;
            KeyBoardFreq(60) = 1975;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(60)=0; %Hz
            vect(60) = 0;
            KeyBoardFreq(60) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyA6.
function pushbutton_keyA6_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(58)=1760; %Hz
    vect(58) = 1760;
    KeyBoardFreq(58) = 1760;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(58)=0; %Hz
    vect(58) = 0;
    KeyBoardFreq(58) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(58)=1760; %Hz
            vect(58) = 1760;
            KeyBoardFreq(58) = 1760;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(58)=0; %Hz
            vect(58) = 0;
            KeyBoardFreq(58) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyC7.
function pushbutton_keyC7_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(61)=2093; %Hz
    vect(61) = 2093;
    KeyBoardFreq(61) = 2093;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(61)=0; %Hz
    vect(61) = 0;
    KeyBoardFreq(61) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(61)=2093; %Hz
            vect(61) = 2093;
            KeyBoardFreq(61) = 2093;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(61)=0; %Hz
            vect(61) = 0;
            KeyBoardFreq(61) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyG6sh.
function pushbutton_keyG6sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyG6sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(57)=1661; %Hz
    vect(57) = 1661;
    KeyBoardFreq(57) = 1661;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(57)=0; %Hz
    vect(57) = 0;
    KeyBoardFreq(57) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(57)=1661; %Hz
            vect(57) = 1661;
            KeyBoardFreq(57) = 1661;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(57)=0; %Hz
            vect(57) = 0;
            KeyBoardFreq(57) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyA6sh.
function pushbutton_keyA6sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA6sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(59)=1865; %Hz
    vect(59) = 1865;
    KeyBoardFreq(59) = 1865;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(59)=0; %Hz
    vect(59) = 0;
    KeyBoardFreq(59) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(59)=1865; %Hz
            vect(59) = 1865;
            KeyBoardFreq(59) = 1865;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(59)=0; %Hz
            vect(59) = 0;
            KeyBoardFreq(59) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyF6sh.
function pushbutton_keyF6sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyF6sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(55)=1480; %Hz
    vect(55) = 1480;
    KeyBoardFreq(55) = 1480;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(55)=0; %Hz
    vect(55) = 0;
    KeyBoardFreq(55) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(55)=1480; %Hz
            vect(55) = 1480;
            KeyBoardFreq(55) = 1480;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(55)=0; %Hz
            vect(55) = 0;
            KeyBoardFreq(55) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end


% --- Executes on button press in pushbutton_keyF2.
function pushbutton_keyF2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyF2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(6)=87; %Hz
    vect(6) = 87;
    KeyBoardFreq(6) = 87;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(6)=0; %Hz
    vect(6) = 0;
    KeyBoardFreq(6) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(6)=87; %Hz
            vect(6) = 87;
            KeyBoardFreq(6) = 87;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(6)=0; %Hz
            vect(6) = 0;
            KeyBoardFreq(6) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyC3.
function pushbutton_keyC3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(13)=131; %Hz
    vect(13) = 131;
    KeyBoardFreq(13) = 131;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(13)=0; %Hz
    vect(13) = 0;
    KeyBoardFreq(13) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(13)=131; %Hz
            vect(13) = 131;
            KeyBoardFreq(13) = 131;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(13)=0; %Hz
            vect(13) = 0;
            KeyBoardFreq(13) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyD3.
function pushbutton_keyD3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyD3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(15)=147; %Hz
    vect(15) = 147;
    KeyBoardFreq(15) = 147;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(15)=0; %Hz
    vect(15) = 0;
    KeyBoardFreq(15) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(15)=147; %Hz
            vect(15) = 147;
            KeyBoardFreq(15) = 147;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(15)=0; %Hz
            vect(15) = 0;
            KeyBoardFreq(15) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyE3.
function pushbutton_keyE3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyE3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1 ])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(17)=165; %Hz
    vect(17) = 165;
    KeyBoardFreq(17) = 165;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(17)=0; %Hz
    vect(17) = 0;
    KeyBoardFreq(17) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(17)=165; %Hz
            vect(17) = 165;
            KeyBoardFreq(17) = 165;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(17)=0; %Hz
            vect(17) = 0;
            KeyBoardFreq(17) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyF3.
function pushbutton_keyF3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyF3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(18)=175; %Hz
    vect(18) = 175;
    KeyBoardFreq(18) = 175;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(18)=0; %Hz
    vect(18) = 0;
    KeyBoardFreq(18) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(18)=175; %Hz
            vect(18) = 175;
            KeyBoardFreq(18) = 175;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(18)=0; %Hz
            vect(18) = 0;
            KeyBoardFreq(18) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyG3.
function pushbutton_keyG3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyG3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(20)=196; %Hz
    vect(20) = 196;
    KeyBoardFreq(20) = 196;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(20)=0; %Hz
    vect(20) = 0;
    KeyBoardFreq(20) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(20)=196; %Hz
            vect(20) = 196;
            KeyBoardFreq(20) = 196;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(20)=0; %Hz
            vect(20) = 0;
            KeyBoardFreq(20) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyB3.
function pushbutton_keyB3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyB3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(24)=247; %Hz
    vect(24) = 247;
    KeyBoardFreq(24) = 247;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(24)=0; %Hz
    vect(24) = 0;
    KeyBoardFreq(24) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(24)=247; %Hz
            vect(24) = 247;
            KeyBoardFreq(24) = 247;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(24)=0; %Hz
            vect(24) = 0;
            KeyBoardFreq(24) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyA3.
function pushbutton_keyA3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(22)=220; %Hz
    vect(22) = 220;
    KeyBoardFreq(22) = 220;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(22)=0; %Hz
    vect(22) = 0;
    KeyBoardFreq(22) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(22)=220; %Hz
            vect(22) = 220;
            KeyBoardFreq(22) = 220;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(22)=0; %Hz
            vect(22) = 0;
            KeyBoardFreq(22) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyC4_bis.
function pushbutton_keyC4_bis_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC4_bis (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton_keyG3sh.
function pushbutton_keyG3sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyG3sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(21)=208; %Hz
    vect(21) = 208;
    KeyBoardFreq(21) = 208;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(21)=0; %Hz
    vect(21) = 0;
    KeyBoardFreq(21) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(21)=208; %Hz
            vect(21) = 208;
            KeyBoardFreq(21) = 208;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(21)=0; %Hz
            vect(21) = 0;
            KeyBoardFreq(21) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyA3sh.
function pushbutton_keyA3sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA3sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(23)=233; %Hz
    vect(23) = 233;
    KeyBoardFreq(23) = 233;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(23)=0; %Hz
    vect(23) = 0;
    KeyBoardFreq(23) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(23)=233; %Hz
            vect(23) = 233;
            KeyBoardFreq(23) = 233;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(23)=0; %Hz
            vect(23) = 0;
            KeyBoardFreq(23) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyF3sh.
function pushbutton_keyF3sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyF3sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(19)=185; %Hz
    vect(19) = 185;
    KeyBoardFreq(19) = 185;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(19)=0; %Hz
    vect(19) = 0;
    KeyBoardFreq(19) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(19)=185; %Hz
            vect(19) = 185;
            KeyBoardFreq(19) = 185;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(19)=0; %Hz
            vect(19) = 0;
            KeyBoardFreq(19) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyC3sh.
function pushbutton_keyC3sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC3sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(14)=139; %Hz
    vect(14) = 139;
    KeyBoardFreq(14) = 139;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(14)=0; %Hz
    vect(14) = 0;
    KeyBoardFreq(14) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(14)=139; %Hz
            vect(14) = 139;
            KeyBoardFreq(14) = 139;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(14)=0; %Hz
            vect(14) = 0;
            KeyBoardFreq(14) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyD3sh.
function pushbutton_keyD3sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyD3sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(16)=156; %Hz
    vect(16) = 156;
    KeyBoardFreq(16) = 156;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(16)=0; %Hz
    vect(16) = 0;
    KeyBoardFreq(16) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(16)=156; %Hz
            vect(16) = 156;
            KeyBoardFreq(16) = 156;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(16)=0; %Hz
            vect(16) = 0;
            KeyBoardFreq(16) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyC2.
function pushbutton_keyC2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(1)=65; %Hz
    vect(1)=65;
    KeyBoardFreq(1) = 65;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(1)=0; %Hz
    vect(1)=0;
    KeyBoardFreq(1) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(1)=65; %Hz
            vect(1)=65;
            KeyBoardFreq(1) = 65;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(1)=0; %Hz
            vect(1)=0;
            KeyBoardFreq(1) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyD2.
function pushbutton_keyD2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyD2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(3)=74; %Hz
    vect(3)=74;
    KeyBoardFreq(3) = 74;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(3)=0; %Hz
    vect(3)=0;
    KeyBoardFreq(3) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(3)=74; %Hz
            vect(3)=74;
            KeyBoardFreq(3) = 74;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(3)=0; %Hz
            vect(3)=0;
            KeyBoardFreq(3) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyE2.
function pushbutton_keyE2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyE2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(5)=83; %Hz
    vect(5)=83;
    KeyBoardFreq(5) = 83;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(5)=0; %Hz
    vect(5)=0;
    KeyBoardFreq(5) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(5)=83; %Hz
            vect(5)=83;
            KeyBoardFreq(5) = 83;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(5)=0; %Hz
            vect(5)=0;
            KeyBoardFreq(5) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyG2.
function pushbutton_keyG2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyG2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(8)=98; %Hz
    vect(8)=98;
    KeyBoardFreq(8) = 98;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(8)=0; %Hz
    vect(8)=0;
    KeyBoardFreq(8) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(8)=98; %Hz
            vect(8)=98;
            KeyBoardFreq(8) = 98;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(8)=0; %Hz
            vect(8)=0;
            KeyBoardFreq(8) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyB2.
function pushbutton_keyB2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyB2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(12)=123; %Hz
    vect(12)=123;
    KeyBoardFreq(12) = 123;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(12)=0; %Hz
    vect(12)=0;
    KeyBoardFreq(12) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(12)=123; %Hz
            vect(12)=123;
            KeyBoardFreq(12) = 123;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(12)=0; %Hz
            vect(12)=0;
            KeyBoardFreq(12) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyF2sh.
function pushbutton_keyF2sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyF2sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(7)=92.5; %Hz
    vect(7) = 92.5;
    KeyBoardFreq(7) = 92.5;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(7)=0; %Hz
    vect(7) = 0;
    KeyBoardFreq(7) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(7)=92.5; %Hz
            vect(7) = 92.5;
            KeyBoardFreq(7) = 92.5;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(7)=0; %Hz
            vect(7) = 0;
            KeyBoardFreq(7) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyC2sh.
function pushbutton_keyC2sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyC2sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(2)=69; %Hz
    vect(2) = 69;
    KeyBoardFreq(2) = 69;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(2)=0; %Hz
    vect(2) = 0;
    KeyBoardFreq(2) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(2)=69; %Hz
            vect(2) = 69;
            KeyBoardFreq(2) = 69;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(2)=0; %Hz
            vect(2) = 0;
            KeyBoardFreq(2) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyD2sh.
function pushbutton_keyD2sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyD2sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(4)=78; %Hz
    vect(4) = 78;
    KeyBoardFreq(4) = 78;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(4)=0; %Hz
    vect(4) = 0;
    KeyBoardFreq(4) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(4)=78; %Hz
            vect(4) = 78;
            KeyBoardFreq(4) = 78;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(4)=0; %Hz
            vect(4) = 0;
            KeyBoardFreq(4) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyA2.
function pushbutton_keyA2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
    set(hObject, 'BackgroundColor', [0.4 0.6 1])
    handles.KeyBoardFreq(10)=110; %Hz
    vect(10)=110;
    KeyBoardFreq(10) = 110;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [1 1 1])
    handles.KeyBoardFreq(10)=0; %Hz
    vect(10)=0;
    KeyBoardFreq(10) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [1 1 1])==1
            set(hObject, 'BackgroundColor', [0.4 0.6 1])
            handles.KeyBoardFreq(10)=110; %Hz
            vect(10)=110;
            KeyBoardFreq(10) = 110;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [1 1 1])
            handles.KeyBoardFreq(10)=0; %Hz
            vect(10)=0;
            KeyBoardFreq(10) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyA2sh.
function pushbutton_keyA2sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyA2sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(11)=117; %Hz
    vect(11) = 117;
    KeyBoardFreq(11) = 117;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(11)=0; %Hz
    vect(11) = 0;
    KeyBoardFreq(11) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(11)=117; %Hz
            vect(11) = 117;
            KeyBoardFreq(11) = 117;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(11)=0; %Hz
            vect(11) = 0;
            KeyBoardFreq(11) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

% --- Executes on button press in pushbutton_keyG2sh.
function pushbutton_keyG2sh_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_keyG2sh (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global IsAcquiring KeyBoardFreq
vect = get(handles.PannelChooseDisplay, 'UserData');
if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
    set(hObject, 'BackgroundColor', [0 0 1])
    handles.KeyBoardFreq(9)=104; %Hz
    vect(9) = 104;
    KeyBoardFreq(9) = 104;
    set(handles.PannelChooseDisplay, 'UserData', vect)
else
    set(hObject, 'BackgroundColor', [0 0 0])
    handles.KeyBoardFreq(9)=0; %Hz
    vect(9) = 0;
    KeyBoardFreq(9) = 0;
    set(handles.PannelChooseDisplay, 'UserData', vect)
end
if get(handles.PlaySelection, 'Value')==0
    guidata(hObject, handles);
    if get(handles.PlaySelection, 'Value')==0 & (handles.StopRecordPushed == 1 || handles.LoadFile ==1)
        %     DisplayChosenCurves(handles)
        DisplayChosenCurvesNEW(handles)
    elseif IsAcquiring ==0 & (handles.StopRecordPushed == 0 || handles.LoadFile ==0)
        if isequal(get(hObject, 'BackgroundColor'), [0 0 0])==1
            set(hObject, 'BackgroundColor', [0 0 1])
            handles.KeyBoardFreq(9)=104; %Hz
            vect(9) = 104;
            KeyBoardFreq(9) = 104;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        else
            set(hObject, 'BackgroundColor', [0 0 0])
            handles.KeyBoardFreq(9)=0; %Hz
            vect(9) = 0;
            KeyBoardFreq(9) = 0;
            set(handles.PannelChooseDisplay, 'UserData', vect)
        end
    end
    guidata(hObject, handles);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in CalculationPlayStopBBSignal.
function CalculationPlayStopBBSignal_Callback(hObject, eventdata, handles)
% % hObject    handle to CalculationPlayStopBBSignal (see GCBO)
% % eventdata  reserved - to be defined in a future version of MATLAB
% % handles    structure with handles and user data (see GUIDATA)
%
% % Hint: get(hObject,'Value') returns toggle state of CalculationPlayStopBBSignal

global indRecord clockTimer IndStartNoise IndStopNoise PlayStopBBSignal totalDATA

handles.DataAquired = 1;
handles.StopRecordPushed =0;
handles.StartBBSignalPushed = 1;
set(handles.PannelPlayAndSave, 'Visible', 'off');
handles.CAT = 0;
handles.totalDATA = [];

% check input
devinfo = audiodevinfo;
input = devinfo.input;
DevID_Mic=cell2mat({input(handles.audioInputMenu.Value).ID});
% check output
devinfo = audiodevinfo;
output = devinfo.output;
DevID_Out=cell2mat({output(handles.audioOutputMenu.Value).ID});



if get(hObject,'Value')==1
    %set(hObject, 'CData', imresize(imread('HP_on_Shadow.png'),0.25));
    OldPicture = get(hObject, 'CData');
    NewPicture=zeros(size(OldPicture));
    
    MaxOldPicture = max(OldPicture(:,1,1));
    if MaxOldPicture>1
        for i=1:size(OldPicture,1)
            for j =1:size(OldPicture,2)
                if OldPicture(i,j,1)==255 & OldPicture(i,j,2)==255 & OldPicture(i,j,3)==255
                    NewPicture(i,j,1)= 202;
                    NewPicture(i,j,2)= 202;
                    NewPicture(i,j,3)= 202;
                else
                    NewPicture(i,j,1) = OldPicture(i,j,1);
                    NewPicture(i,j,2) = OldPicture(i,j,2);
                    NewPicture(i,j,3) = OldPicture(i,j,3);
                end
            end
        end
        NewPicture=NewPicture/255
    else
        for i=1:size(OldPicture,1)
            for j =1:size(OldPicture,2)
                if OldPicture(i,j,1)==255/255 & OldPicture(i,j,2)==255/255 & OldPicture(i,j,3)==255/255
                    NewPicture(i,j,1)= 202/255;
                    NewPicture(i,j,2)= 202/255;
                    NewPicture(i,j,3)= 202/255;
                else
                    NewPicture(i,j,1) = OldPicture(i,j,1);
                    NewPicture(i,j,2) = OldPicture(i,j,2);
                    NewPicture(i,j,3) = OldPicture(i,j,3);
                end
            end
        end
    end
    set(hObject, 'CData',NewPicture)
    
    set(handles.DisplayDeleteHarmonics, 'Enable', 'on')
    clockPushButton = clock;
    DureeBruit = 50 ; %[s]
    waveformTot = [];
    for kk=1:floor(DureeBruit*handles.Fs/handles.nCalib)%handles.NbCyclePerSecond*DureeBruit
        waveformTot = cat(1, waveformTot, handles.CalibSource);
    end
    % soundsc(waveformTot, handles.Fs)
    length(waveformTot);
    
    % !!!!!!!!!!!!!           !!!!!!!!!!!!
    %              !!!!!!!!!!!
    % % test = cat(2,waveformTot,waveformTot)/max(abs(waveformTot));
    test = cat(2,waveformTot,waveformTot);
    % !!!!!!!!!!!!!           !!!!!!!!!!!!
    %              !!!!!!!!!!!
    
    % maxtest = max(test)
    % mintest = min(test)
    % size(test)
    % figure(12)
    % plot(waveformTot)
    % soundsc(waveformTot, handles.Fs)
    
    if get(handles.radiobuttonCalculationRealTime, 'Value')==1
        %         %display('Play')
        if get(handles.pushbutton_BeginRecord, 'Value')==1
            if isplaying(PlayStopBBSignal) ==1
                stop(PlayStopBBSignal);
            else
                %                 if get(handles.radiobuttonLoudSpeaker, 'Value') ==1
                %                     %         %display('LS');
                %                     handles.plBBSignal = audioplayer(test, handles.Fs, 16, handles.DevIDoutputiMicUSB);
                %                 elseif get(handles.radiobuttonPipe, 'Value') ==1
                %                     %         %display('Pipe');
                %                     handles.plBBSignal = audioplayer(test, handles.Fs, 16, handles.DevIDoutputMOTU);
                %                 end
                handles.plBBSignal = audioplayer(test, handles.Fs, 16, DevID_Out);
                guidata(hObject, handles);
                PlayStopBBSignal = handles.plBBSignal;
                play(handles.plBBSignal);
            end
        else
            %             if get(handles.radiobuttonLoudSpeaker, 'Value') ==1
            %                 %         %display('LS');
            %                 handles.plBBSignal = audioplayer(test, handles.Fs, 16, handles.DevIDoutputiMicUSB);
            %             elseif get(handles.radiobuttonPipe, 'Value') ==1
            %                 %         %display('Pipe');
            %                 handles.plBBSignal = audioplayer(test, handles.Fs, 16, handles.DevIDoutputMOTU);
            %             end
            handles.plBBSignal = audioplayer(test, handles.Fs, 16, DevID_Mic);
            guidata(hObject, handles);
            PlayStopBBSignal = handles.plBBSignal;
            play(handles.plBBSignal);
        end
    end
    
    
    if handles.ExistRecord == 1
        clockGetPlaySound = clock;
        index = indRecord;
        CTimer = clockTimer;
        if abs(mod(abs(clockGetPlaySound(end)-CTimer(end)),60))<(handles.nCalib/handles.Fs)
            %         clockGetPlaySound(end)
            %         clockTimer(end)
            variable = floor(abs(mod(abs(clockGetPlaySound(end)-CTimer(end)),60))/(handles.nCalib/handles.Fs));
            %             %display('%%%%%%%%%%%%%%%%%%%%')
            %             IndStartNoise = [IndStartNoise, [index+1+variable]] ; %ie a partir du cycle numero index +1,
            %on est sur qu il y a du BBS sur toute la duree du cycle
            newDATA = getaudiodata(handles.recorder);
            indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib);
            IndStartNoise = [IndStartNoise, indN-1];
        else
            %         clockGetPlaySound(end)
            %         clockTimer(end)
            %             %display('$$$$$$$$$$$$$$$$$$$')
            variable = floor(abs(mod(abs(clockGetPlaySound(end)-CTimer(end)),60))/(handles.nCalib/handles.Fs));
            %             IndStartNoise = [IndStartNoise, [index+1+variable]] ; %ie a partir du cycle numero index +2,
            %                                                        on est sur qu il y a du BBS sur toute la duree du cycle
            
            newDATA = getaudiodata(handles.recorder);
            indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib)+1;
            IndStartNoise = [IndStartNoise, indN-1];
        end
    end
    
    
    guidata(hObject, handles);
    
else
    %     set(hObject, 'CData', imresize(imread('HP_on.png'),0.25));
    OldPicture = get(hObject, 'CData');
    NewPicture=zeros(size(OldPicture));
    MaxOldPicture = max(OldPicture(:,1,1));
    if MaxOldPicture>1
        for i=1:size(OldPicture,1)
            for j =1:size(OldPicture,2)
                if OldPicture(i,j,1)==202 & OldPicture(i,j,2)==202 & OldPicture(i,j,3)==202
                    NewPicture(i,j,1)= 255;
                    NewPicture(i,j,2)= 255;
                    NewPicture(i,j,3)= 255;
                else
                    NewPicture(i,j,1) = OldPicture(i,j,1);
                    NewPicture(i,j,2) = OldPicture(i,j,2);
                    NewPicture(i,j,3) = OldPicture(i,j,3);
                end
            end
        end
        NewPicture=NewPicture/255;
    else
        for i=1:size(OldPicture,1)
            for j =1:size(OldPicture,2)
                if OldPicture(i,j,1)==202/255 & OldPicture(i,j,2)==202/255 & OldPicture(i,j,3)==202/255
                    NewPicture(i,j,1)= 255/255;
                    NewPicture(i,j,2)= 255/255;
                    NewPicture(i,j,3)= 255/255;
                else
                    NewPicture(i,j,1) = OldPicture(i,j,1);
                    NewPicture(i,j,2) = OldPicture(i,j,2);
                    NewPicture(i,j,3) = OldPicture(i,j,3);
                end
            end
        end
    end
    set(hObject, 'CData',NewPicture)
    
    set(handles.DisplayDeleteHarmonics, 'Enable', 'on');
    clockPushButton = clock;
    stop(handles.plBBSignal);
    guidata(hObject, handles);
    PlayStopBBSignal = handles.plBBSignal;
    if handles.ExistRecord == 1
        clockGetStopSound = clock;
        index = indRecord;
        CTimer = clockTimer;
        if abs(mod(abs(clockGetStopSound(end)-CTimer(end)),60))<(handles.nCalib/handles.Fs)
            %         clockGetStopSound(end)
            %         clockTimer(end)
            %             %display('%%%%%%%%%%%%%%%%%%%%')
            %             IndStopNoise = [IndStopNoise, [index]] ;%ie a partir du cycle numero index +1,
            %on est sur qu il n y a plus de BBSsur toute la duree du cycle
            newDATA = getaudiodata(handles.recorder);
            indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib);
            IndStopNoise = [IndStopNoise, indN-1];
        else
            %         clockGetStopSound(end)
            %         clockTimer(end)
            %             %display('$$$$$$$$$$$$$$$$$$$')
            %             IndStopNoise = [IndStopNoise, [index+1]] ;%ie a partir du cycle numero index +2,
            %on est sur qu il n y a plus de BBS sur toute la duree du cycle
            newDATA = getaudiodata(handles.recorder);
            indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib);
            IndStopNoise = [IndStopNoise, indN-1];
        end
    end
    
    guidata(hObject, handles);
end


function pos = frequence2position(h,r, ax)
global freqNote position IsPlaying

% FreqNote4 = [261.6 277.18 293.67 311.13 329.63 349.23 369.99 392.00 415.30 440.0 ...
%     466.16 493.88];
% FreqNote5 = 2*FreqNote4;
% FreqNote6 = 2*FreqNote5;
% freqNote = cat(2,FreqNote4, FreqNote5,FreqNote6);
% Position4 =[-2 -2 -1 -1 0 1 1 2 2 3 3 4];
% Position5 =[5 5 6 6 7 8 8 9 9 10 10 11 ];
% Position6 =[12 12 13 13 14 15 15 16 16 17 17 18];
% position = cat(2,Position4, Position5, Position6);

plot(ax, [0 10], [0 0], 'k'); hold(ax,'all');
plot(ax,[0 10], [2 2], 'k');
plot(ax,[0 10], [4 4], 'k');
plot(ax,[0 10], [6 6], '-k');
plot(ax,[0 10], [8 8], '-k');
plot(ax,[0 10], [14 14], 'k');
plot(ax,[0 10], [16 16], 'k');
plot(ax,[0 10], [18 18], 'k');
plot(ax,[0 10], [20 20], 'k');
plot(ax,[0 10], [22 22], 'k');
endloopH = length(h);


if IsPlaying==1
    if length(r)>0
        for k=1:size(r,2)
            [~, ind_min] = min(abs(r(1,k)*ones(1, length(freqNote)) - freqNote));
            pos = position(ind_min);
            plot(ax, 2,pos,'.r', 'markersize', 40); hold(ax,'on');
            var = mod(ind_min,12);
            if max(var==[2 4 7 9 11])==1
                
                plot(ax, [2.8 4.2],[pos-0.5 pos-0.5],'-r', 'LineWidth', 1.2);
                plot(ax,[2.8 4.2],[pos+0.5 pos+0.5],'-r','LineWidth', 1.2);
                plot(ax,[3.2 3.2],[pos-1.2 pos+1.2],'-r','LineWidth', 1.2);
                plot(ax,[3.8 3.8],[pos-1.2 pos+1.2],'-r','LineWidth', 1.2);
            end
            %             [~, ind_min] = min(abs(r(2,k)*ones(1, length(freqNote)) - freqNote));
            %             pos = position(ind_min);
            %             plot(ax, 6,pos,'.r', 'markersize', 40); hold(ax,'on');
            %             var = mod(ind_min,12);
            %             if max(var==[2 4 7 9 11])==1
            %
            %                 plot(ax, [2.8 4.2],[pos-0.5 pos-0.5],'-r', 'LineWidth', 1.2);
            %                 plot(ax,[2.8 4.2],[pos+0.5 pos+0.5],'-r','LineWidth', 1.2);
            %                 plot(ax,[3.2 3.2],[pos-1.2 pos+1.2],'-r','LineWidth', 1.2);
            %                 plot(ax,[3.8 3.8],[pos-1.2 pos+1.2],'-r','LineWidth', 1.2);
            %             end
        end
    end
end

% if endloopH>0
% freqREF = h(1);
% if endloopH>=4
%     endloopH = 4;
% end
% for i = 1:endloopH
% % if i==1;
% %     marker = '-r.';
% % else
% %     marker = '-g.';
% % end
% [~, ind_min] = min(abs(h(i)*ones(1, length(freqNote)) - freqNote));
% pos = position(ind_min);
% if i==1
%     indPLOT = ind_min -1;
% end
% if max(strcmp(int2str(mod(ind_min-indPLOT,12)), {'1' '5' '8'}))==1
%     marker = '-k.';
% else
%     marker = '-b.';
% end
% % hold on;
% plot(ax, 6,pos,marker(2:end), 'markersize', 30); hold(ax,'on');
% var = mod(ind_min,12);
% if max(var==[2 4 7 9 11])==1
%
%     plot(ax, [2.8 4.2],[pos-0.5 pos-0.5],marker(1:2), 'LineWidth', 1.2);
%     plot(ax,[2.8 4.2],[pos+0.5 pos+0.5],marker(1:2),'LineWidth', 1.2);
%     plot(ax,[3.2 3.2],[pos-1.2 pos+1.2],marker(1:2),'LineWidth', 1.2);
%     plot(ax,[3.8 3.8],[pos-1.2 pos+1.2],marker(1:2),'LineWidth', 1.2);
% end
% if max(ind_min==[1 2 22 23 25 26])==1
%     plot(ax,[5 7],[pos pos],marker(1:2));
% end
% if ind_min==24
%     plot(ax,[5 7],[pos-1 pos-1],marker(1:2));
% end
% xlim(ax, [ 0 10]);
% ylim(ax, [-3 25]);
% grid(ax, 'off');
% axis(ax, 'off');
% end
% end
hold(ax,'off');

function frequence2positionHORIZONTAL(h,r, handles)

global freqNoteAnalyse IsPlaying

ax = handles.AxesAnalyse;
axes(ax);
hold(ax, 'off');
% axes(handles.AxesAnalyse);
plot(ax,[freqNoteAnalyse(1) freqNoteAnalyse(1)],[0 10], 'color', [0.8 0.8 0.8]); hold(handles.AxesAnalyse, 'all');
plot(ax,[freqNoteAnalyse(5) freqNoteAnalyse(5)], [0 10],'color', [0.8 0.8 0.8]);
plot(ax,[freqNoteAnalyse(8) freqNoteAnalyse(8)],[0 10],'color', 'k');
plot(ax,[freqNoteAnalyse(12) freqNoteAnalyse(12)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(15) freqNoteAnalyse(15)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(18) freqNoteAnalyse(18)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(22) freqNoteAnalyse(22)],[0 10],   'k');
plot(ax,[freqNoteAnalyse(25) freqNoteAnalyse(25)],[0 10],  'color', [0.8 0.8 0.8]);
plot(ax,[freqNoteAnalyse(29) freqNoteAnalyse(29)],[0 10], 'k');
plot(ax,[freqNoteAnalyse(32) freqNoteAnalyse(32)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(36) freqNoteAnalyse(36)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(39) freqNoteAnalyse(39)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(42) freqNoteAnalyse(42)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(46) freqNoteAnalyse(46)],[0 10],  'color', [0.8 0.8 0.8]);
plot(ax,[freqNoteAnalyse(49) freqNoteAnalyse(49)],[0 10],  'color', [0.8 0.8 0.8]);
plot(ax,[freqNoteAnalyse(53) freqNoteAnalyse(53)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(56) freqNoteAnalyse(56)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(60) freqNoteAnalyse(60)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(63) freqNoteAnalyse(63)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(66) freqNoteAnalyse(66)],[0 10],  'k');
plot(ax,[freqNoteAnalyse(70) freqNoteAnalyse(70)],[0 10],  'color', [0.8 0.8 0.8]);
axis(ax,[ 0 freqNoteAnalyse(end) 0 10])
hold(ax, 'on');
endloopH = length(h);


if IsPlaying==1
    if length(r)>0
        for k=1:size(r,2)
            plot(ax, [r(1,k) r(2,k)],[2 2],'-r', 'linewidth', 4); hold(ax,'on');
        end
    end
end

if endloopH>0
    freqREF = h(1);
    if endloopH>=10
        endloopH = 10;
    end
    for i = 1:endloopH
        % if i==1;
        %     marker = '-r.';
        % else
        %     marker = '-g.';
        % end
        marker = '-k.';
        % [~, ind_min] = min(abs(h(i)*ones(1, length(freqNoteAnalyse)) - freqNoteAnalyse));
        
        % if i==1
        %     indPLOT = ind_min -1;
        % end
        % if max(strcmp(int2str(mod(ind_min-indPLOT,12)), {'1' '5' '8'}))==1
        %     marker = '-k.';
        % else
        %     marker = '-b.';
        % end
        hold on;
        plot(ax, h(i), 6, marker(2:end), 'markersize', 30); hold(ax,'on');
        % var = mod(ind_min,12);
        % if max(var==[2 4 7 9 11])==1
        %     plot(ax,[h(i)-10 h(i)-10],  [3 5],marker(1:2), 'LineWidth', 1.2);
        %     plot(ax,[h(i)+10 h(i)+10],  [3 5],marker(1:2),'LineWidth', 1.2);
        %     plot(ax,[h(i)-15  h(i)+15], [3.5 3.5],marker(1:2),'LineWidth', 1.2);
        %     plot(ax,[h(i)-15  h(i)+15],[4.5 4.5],marker(1:2),'LineWidth', 1.2);
        % end
        % xlim(ax, [ 0 3000]);
        % ylim(ax, [0 10]);
        % grid(ax, 'on');
        % axis(ax, 'off');
    end
end
colorAxesClefs = [238 238 238]/255;
set(ax, 'Color',colorAxesClefs);
set(ax, 'AmbientLightColor', colorAxesClefs);
set(ax, 'GridColor', colorAxesClefs);
set(ax, 'MinorGridColor', colorAxesClefs);
set(ax, 'XColor', colorAxesClefs);
set(ax, 'YColor', colorAxesClefs);
set(ax, 'ZColor', colorAxesClefs);
set(ax, 'XTickLabel', '');
hold(ax,'off');



function mafonctionaffichage_v3_NEW(hObject,eventdata, handles)

global Fs indRecord i L_samples hjSlider indRecordTest L IsPlaying iEndNoise...
    iStartNoise clockTimer R1rate R2rate indrate ValHarmonicWidth ValRAmp...
    iStartNewRecord XLimSpectrum

clockTimer = clock;
indRecord = indRecord+1;
samples  = getaudiodata(hObject);
assignin('base', 'samples', samples);
handles.egg = samples(:,2);
if get(handles.radiobuttonPipe, 'Value')==1
    handles.audio = samples(:,1) * sqrt(2) / handles.transduc; %Units [Pa]
else
    handles.audio = samples(:,1);
end
size(handles.audio);
L = length(handles.audio);
L_samples=[L_samples, L];
if mod((L_samples(indRecord - iStartNewRecord+1)-L_samples(indRecord - iStartNewRecord)),handles.nCalib)~=0
    indStartSound = L+1;
    taille = (L_samples(indRecord+1)-L_samples(indRecord));
else
    %     %display('indice ok ************************')
end

IsPlaying;
ValueCalculationPlayStopBBS = get(handles.CalculationPlayStopBBSignal, 'Value');
if IsPlaying ~= ValueCalculationPlayStopBBS & ValueCalculationPlayStopBBS==1;
    iStartNoise = [iStartNoise, indRecord];
    IsPlaying = ValueCalculationPlayStopBBS;
end
if IsPlaying ~= ValueCalculationPlayStopBBS & ValueCalculationPlayStopBBS==0;
    iEndNoise = [iEndNoise, indRecord];
    IsPlaying = ValueCalculationPlayStopBBS;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%graph Audio

EggSliderVal = get(hjSlider,'Value');

if IsPlaying==1;
    plot(handles.EGG, handles.egg(end-(handles.nCalib-EggSliderVal):end),'b'); %'color', [0.3 0.3 0.3]);
else
    plot(handles.EGG, handles.egg(end-(handles.nCalib-EggSliderVal):end),'color',[0.3 0.3 0.3]); %'color', [0.3 0.3 0.3]);
end
xlim(handles.EGG, [1 (handles.nCalib-EggSliderVal+1)]);
hold(handles.EGG, 'off');

%graph Audio
if IsPlaying==1;
    plot(handles.Audio, (EggSliderVal+1:1:handles.nCalib)/handles.Fs, handles.audio(end-handles.nCalib +EggSliderVal +1:end),'b','linewidth',1.5);
    hold(handles.Audio, 'on');
    plot(handles.Audio, (1:1:EggSliderVal)/handles.Fs, handles.audio(end-handles.nCalib:end-handles.nCalib+EggSliderVal-1), 'color', [0.7 0.7 0.7], 'linewidth',0.25);
    YLimAudio = [min(handles.audio(end-handles.nCalib:end)) max(handles.audio(end-handles.nCalib:end))];
else
    plot(handles.Audio, (EggSliderVal+1:1:handles.nCalib)/handles.Fs, handles.audio(end-handles.nCalib +EggSliderVal +1:end),'color', [0.3 0.3 0.3],'linewidth',1.5);
    hold(handles.Audio, 'on');
    plot(handles.Audio, (1:1:EggSliderVal)/handles.Fs, handles.audio(end-handles.nCalib:end-handles.nCalib+EggSliderVal-1), 'color', [0.7 0.7 0.7], 'linewidth',0.25);
    YLimAudio = [min(handles.audio(end-handles.nCalib:end)) max(handles.audio(end-handles.nCalib:end))];
end

ylim(handles.Audio, YLimAudio);
plot(handles.Audio, [EggSliderVal EggSliderVal]/handles.Fs, YLimAudio ,'color', [0.55 0.75 1],'linewidth',3);
hold(handles.Audio, 'off');
xlim(handles.Audio, [1 handles.nCalib]/handles.Fs);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
NbAverage = str2double(get(handles.edit_ValNbAverage_Calculate,'String'));

if (L- NbAverage*handles.nCalib+1)<2
    variable = handles.audio(L- (indRecord-iStartNewRecord)*handles.nCalib+1:L,1);
    handles.NEWsamples = reshape(variable, [], indRecord-iStartNewRecord);
else
    variable = handles.audio(L- NbAverage*handles.nCalib+1:L,1);
    handles.NEWsamples = reshape(variable, [], NbAverage);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Nfft = handles.numPoints;
Z = fft(handles.NEWsamples, Nfft);
harmHi = floor(Nfft/2);
Z = Z(1:harmHi + 1,:);
Z = Z*2/Nfft;
Z(1,:) = Z(1,:)/2;
freqZ = handles.Fs*(0:(Nfft/2))/Nfft;
freqZ = freqZ(1:harmHi + 1);
Z = Z(handles.harmLo +1 :handles.harmHi + 1,:);
handles.Z = Z;
% Z1Period = fft(handles.audio(L- 1*handles.nCalib+1:L,1), Nfft);
% freqZ1Period = Fs*(0:(Nfft/2))/Nfft;
% Z1Period = Z1Period(1:length(freqZ1Period),:);
% Z1Period(1,:) = Z1Period(1,:)/2;
% size(freqZ1Period)
freqZ = freqZ(handles.harmLo +1 :handles.harmHi + 1);


% Nfft = 2^nextpow2(ls)
% Z = fft(matrix_s, Nfft,1);
% harmHi = floor(Nfft/2);
% Z = Z(1:harmHi + 1,:);
% Z = Z*2/Nfft;
% Z(1,:) = Z(1,:)/2;
% freqZ = handles.Fs*(0:(Nfft/2))/Nfft;
% freqZ = freqZ(1:harmHi + 1);

if IsPlaying ==1;
    indRecordTest = indRecord;
    Zplot = 20*log(abs(mean(handles.Z,2)./handles.Zref(handles.harmLo +1 :handles.harmHi + 1)));
    MeanZplot = mean(Zplot);
    Y = unwrap(angle(mean(handles.Z,2)./handles.Zref(handles.harmLo +1 :handles.harmHi + 1)));
    
else
    indRecordTest = indRecord;
    Zplot = 20*log(abs(mean(handles.Z,2)));
    Y = unwrap(angle(mean(handles.Z,2)));
    MeanZplot =mean(Zplot);
    
end
derY = diff(Y)./(freqZ(2)-freqZ(1));
MeanderY =mean(derY);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if IsPlaying ==0;
    [pks,locs,w,p] = findpeaks(medfilt1(sgolayfilt(Zplot-MeanZplot,3,9),5),freqZ,...
        'MinPeakHeight', 20, 'MinPeakProminence',50,'MinPeakDistance', 65,  'WidthReference','halfprom');
    IsSinging =0;
else
    if max(Zplot-MeanZplot)>20
        [pks,locs,w,p] = findpeaks(medfilt1(sgolayfilt(Zplot-MeanZplot,3,9),5),freqZ,...
            'NPeaks',6,'MinPeakProminence',15,'MinPeakDistance', 65,  'WidthReference','halfprom');
        
        [pksPH,locsPH,wPH,pPH] = findpeaks(medfilt1(sgolayfilt(derY-MeanderY,3,9),5),freqZ(1:length(derY)),...
            'NPeaks',6,'MinPeakDistance', 65,  'WidthReference','halfprom');
        locs;
        if length(find(w<50))~=0 || length(find(p>50))~=0
            IsSinging =1;
            if length(locs)>1
                locsNEW = locs(1);
                wNEW = w(1);
                k=2;
                indexI = 0;
                while k+indexI<=length(locs)
                    %                 %display('====')
                    while locs(k+indexI)<0.98*k*locs(1);
                        %                     %display('////')
                        if k+indexI +1 <=length(locs);
                            %                         %display('#')
                            indexI=indexI+1;
                        else
                            %                         %display('%')
                            locsNEW=[locsNEW,locs(k+indexI)];
                            wNEW = [wNEW,w(k+indexI)];
                            indexI=0;
                            break
                        end
                    end
                    if locs(k+indexI)~=locsNEW(end)
                        locsNEW=[locsNEW,locs(k+indexI)];
                        wNEW = [wNEW,w(k+indexI)];
                    end
                    k=k+1;
                    indexI=0;
                end
                locs = locsNEW;
                w = wNEW;
            end
            
            indH1 = 1;
            Zfilt = medfilt1(sgolayfilt(Zplot-MeanZplot,3,9),5);
            Yfilt = medfilt1(sgolayfilt(derY-MeanderY,3,41),5);
            plage= ValHarmonicWidth;
            w= 1.5*w;
            
            Nplage = ceil(plage/(2*handles.df));
            
            
            % if length(locs)>10
            %     locs = locs(1:10);
            %     w = w(1:10);
            % end
            % locs = (H1:H1:length(locs)*H1)
            if mod(Nplage,2)==0
                Nplage=Nplage-1;
            end
            for k=1:length(locs)
                [~,ind] = min(abs(freqZ-locs(k)));
                indW = ceil(w(k)/(2*handles.df));
                if mod(indW,2)==0
                    indW=indW-1;
                end
                if indW<=0
                    indW=1;
                end
                if ind>Nplage & ind < length(Zplot)-Nplage;
                    if indW<Nplage
                        if 3 <=Nplage-indW-3
                            degree =3;
                        else
                            degree = Nplage-indW-3;
                        end
                        %             %display('*-+-*')
                        part1 = medfilt1(sgolayfilt(Zplot(ind-Nplage:ind-indW)-MeanZplot,degree,Nplage-indW-1),Nplage-indW-1);
                        part3 = medfilt1(sgolayfilt(Zplot(ind+indW+1:ind+Nplage)-MeanZplot,degree,Nplage-indW-1),Nplage-indW-1);
                        Zfilt(ind-Nplage:ind+Nplage) = [part1; linspace(part1(end), part3(1),2*indW)';part3];
                        %             partY1 = medfilt1(derY(ind-Nplage:ind-indW)-MeanderY,Nplage-indW-1);
                        %             partY3 = medfilt1(derY(ind+indW+1:ind+Nplage)-MeanderY,Nplage-indW-1);
                        %             Yfilt(ind-Nplage:ind+Nplage) = [part1; linspace(partY1(end), partY3(1),2*indW)';part3];
                        Yfilt(ind-Nplage:ind+Nplage) = linspace(Yfilt(ind-Nplage), Yfilt(ind+Nplage), 2*Nplage+1);
                    else
                        if 3 <=Nplage-2
                            degree =3;
                        else
                            degree = Nplage-2;
                        end
                        Zfilt(ind-Nplage:ind+Nplage) = [medfilt1(sgolayfilt(Zplot(ind-Nplage:ind)-MeanZplot,degree,Nplage),Nplage);...
                            medfilt1(sgolayfilt(Zplot(ind+1:ind+Nplage)-MeanZplot,degree,Nplage),Nplage)];
                        %             Yfilt(ind-Nplage:ind+Nplage) = [medfilt1(sgolayfilt(derY(ind-Nplage:ind)-MeanderY,1,Nplage),Nplage);...
                        %                medfilt1(sgolayfilt(derY(ind+1:ind+Nplage)-MeanderY,1,Nplage),Nplage)];
                        Yfilt(ind-Nplage:ind+Nplage) = linspace(Yfilt(ind-Nplage), Yfilt(ind+Nplage), 2*Nplage+1);
                    end
                elseif ind>Nplage & ind>= length(Zplot)-Nplage
                    Zfilt(ind-Nplage:end) = medfilt1(sgolayfilt(Zplot(ind-Nplage:end)-MeanZplot,3,Nplage),Nplage);
                    %         Yfilt(ind-Nplage:end) = medfilt1(sgolayfilt(derY(ind-Nplage:end)-MeanderY,1,Nplage),Nplage);
                    Yfilt(ind-Nplage:end) = linspace(Yfilt(ind-Nplage), Yfilt(end), length(Yfilt)-ind+Nplage+1);
                elseif ind<=Nplage & ind<length(Zplot)-Nplage
                    Zfilt(1:ind+Nplage) = medfilt1(sgolayfilt(Zplot(1:ind+Nplage)-MeanZplot,3,Nplage),Nplage);
                    %         Yfilt(1:ind+Nplage) = medfilt1(sgolayfilt(derY(1:ind+Nplage)-MeanderY,1,Nplage),Nplage);
                    Yfilt(1:ind+Nplage) = linspace(Yfilt(1), Yfilt(ind+Nplage), ind+Nplage);
                end
                
            end
            Zfilt = medfilt1(sgolayfilt(Zfilt,7,21),7);
            
            plagePH = 250;
            NplagePH = ceil(plagePH/(2*handles.df));
            if mod(NplagePH,2)==0
                NplagePH=NplagePH-1;
            end
            for k=1:length(locsPH)
                [~,ind] = min(abs(freqZ-locsPH(k)));
                indW = ceil(wPH(k)/(2*handles.df));
                if mod(indW,2)==0
                    indW=indW-1;
                end
                if indW<=0
                    indW=1;
                end
                if ind>NplagePH & ind < length(Yfilt)-NplagePH
                    Yfilt(ind-NplagePH:ind+NplagePH) = linspace(Yfilt(ind-NplagePH), Yfilt(ind+NplagePH), 2*NplagePH+1);
                elseif ind>NplagePH & ind>= length(Yfilt)-NplagePH
                    Yfilt(ind-NplagePH:end) = linspace(Yfilt(ind-NplagePH), Yfilt(end), length(Yfilt)-ind+NplagePH+1);
                elseif ind<=NplagePH & ind<length(Yfilt)-NplagePH
                    Yfilt(1:ind+NplagePH) = linspace(Yfilt(1), Yfilt(ind+NplagePH), ind+NplagePH);
                end
            end
            Yfilt = medfilt1(sgolayfilt(Yfilt,2,21),7);
            
        else
            Zfilt = medfilt1(sgolayfilt(Zplot-MeanZplot,3,9),5);
            Yfilt = derY - MeanderY;
            IsSinging =0;
            pks=[];
            locs=[];
            w=[];
            p=[];
        end
    else
        Zfilt = medfilt1(sgolayfilt(Zplot-MeanZplot,3,9),5);
        Yfilt = derY - MeanderY;
        IsSinging =0;
        pks=[];
        locs=[];
        w=[];
        p=[];
    end
    
end
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Rnew = [];
if IsPlaying ==1
    DiffStep = 12;
    DiffAmp = ValRAmp;
    Zfilt = medfilt1(sgolayfilt(Zfilt,3,41),9);
    indiceTEST = find(abs(Zfilt(1:end-(DiffStep-1))-Zfilt(DiffStep:end))>DiffAmp);
    TEST = freqZ(find(abs(Zfilt(1:end-(DiffStep-1))-Zfilt(DiffStep:end))>DiffAmp));
    Ztest = Zfilt(find(abs(Zfilt(1:end-(DiffStep-1))-Zfilt(DiffStep:end))>DiffAmp));
    R=[];
    
    
    if length(TEST)>0
        R(1,1)=TEST(1);
        IND = [];
        IND(1,1) = indiceTEST(1);
        line = 2;
        column = 1;
        for jj=2:length(TEST)
            if TEST(jj)-TEST(jj-1)>3*handles.df %& Ztest(jj)<Ztest(jj-1)
                R(line,column)=TEST(jj-1);
                IND(line,column) = indiceTEST(jj-1);
                if line==2
                    line=1;
                else
                    line= 2;
                end
                column = column+1;
                R(line,column)=TEST(jj);
                IND(line,column) = indiceTEST(jj);
                if line==2
                    line=1;
                else
                    line= 2;
                end
            end
        end
        Rnew = [];
        if size(R,1)*size(R,2)>1 & R(2,end)~=0
            for kk=1:size(IND,2)
                if Zfilt(IND(2,kk))<Zfilt(IND(1,kk))
                    %                 Rnew = [Rnew, [R(1,kk);R(2,kk)]];
                    [~,indMAX] = max(Zfilt(IND(1,kk):IND(2,kk)));
                    indMAX = IND(1,kk)+indMAX-1;
                    if Zfilt(IND(2,kk))~= min(Zfilt(IND(1,kk):IND(2,kk)));
                        [~,indMIN] = min(Zfilt(IND(1,kk):IND(2,kk)));
                        indMIN = IND(1,kk)+indMIN-1;
                        Rnew = [Rnew, [freqZ(indMAX);freqZ(indMIN)]];
                    else
                        Rnew = [Rnew, [freqZ(indMAX);R(2,kk)]];
                    end
                end
            end
        else
            for kk=1:size(IND,2)-1
                if Zfilt(IND(2,kk))<Zfilt(IND(1,kk))
                    %                 Rnew = [Rnew, [R(1,kk);R(2,kk)]];
                    [~,indMAX] = max(Zfilt(IND(1,kk):IND(2,kk)));
                    indMAX = IND(1,kk)+indMAX-1;
                    if Zfilt(IND(2,kk))~= min(Zfilt(IND(1,kk):IND(2,kk)));
                        [~,indMIN] = min(Zfilt(IND(1,kk):IND(2,kk)));
                        indMIN = IND(1,kk)+indMIN-1;
                        Rnew = [Rnew, [freqZ(indMAX);freqZ(indMIN)]];
                    else
                        Rnew = [Rnew, [freqZ(indMAX);R(2,kk)]];
                    end
                end
            end
            [~,indMIN] = min(Zfilt(IND(1,end):end));
            indMIN = IND(1,end)+indMIN-1;
            [~,indMAX] = max(Zfilt(IND(1,end):indMIN));
            indMAX = IND(1,end)+indMAX-1;
            if Zfilt(indMIN)<Zfilt(indMAX)
                Rnew = [Rnew, [freqZ(indMAX);freqZ(indMIN)]];
            end
            %         Rnew = [Rnew, [R(1,end);R(1,end)]];
        end
    end
end
% Rnew

% frequence2position(locs,Rnew,handles.Analyse);
hold(handles.AxesAnalyse,'off');
frequence2positionHORIZONTAL(locs,Rnew,handles);
colorAxesClefs = [238 238 238]/255;
set(handles.AxesAnalyse, 'Color',colorAxesClefs);
set(handles.AxesAnalyse, 'AmbientLightColor', colorAxesClefs);
set(handles.AxesAnalyse, 'GridColor', colorAxesClefs);
set(handles.AxesAnalyse, 'MinorGridColor', colorAxesClefs);
set(handles.AxesAnalyse, 'XColor', colorAxesClefs);
set(handles.AxesAnalyse, 'XTickLabel', '');
set(handles.AxesAnalyse, 'YColor', colorAxesClefs);
set(handles.AxesAnalyse, 'ZColor', colorAxesClefs);


endloopdisplayValH = length(locs);
obj = [handles.ValH1;handles.ValH2;handles.ValH3;handles.ValH4];
if endloopdisplayValH>4
    endloopdisplayValH=4;
end
if endloopdisplayValH~=0
    for ii=1:endloopdisplayValH
        set(obj(ii), 'Visible', 'on');
        set(obj(ii), 'String', num2str(round(locs(ii))));
    end
end
if endloopdisplayValH<4
    for ii=endloopdisplayValH+1:4
        set(obj(ii), 'Visible', 'off');
    end
end

endloopdisplayValR = size(Rnew,2);
obj = [handles.ValR1;handles.ValR2;handles.ValR3];
if endloopdisplayValR>3
    endloopdisplayValR=3;
end
if endloopdisplayValR~=0
    if length(locs)~=0
        indrate = indrate +1;
    end
    if Rnew(1,1)<1000
        for ii=1:endloopdisplayValR
            set(obj(ii), 'Visible', 'on');
            set(obj(ii), 'String', [num2str(round(Rnew(1,ii))),'   -   ',num2str(round(Rnew(2,ii)))]);
            
            if length(locs)~=0;
                jj=1;
                while jj<=length(locs)
                    if Rnew(1,ii)<=locs(jj) & Rnew(2,ii)>=locs(jj)
                        if ii==1;
                            set(handles.IsR1tuning, 'BackgroundColor', [0 1 0]);
                            R1rate = R1rate+1;
                        else ii==2;
                            set(handles.IsR2tuning, 'BackgroundColor', [0 1 0]);
                            R2rate = R2rate+1;
                        end
                        jj=length(locs)+1;
                    else
                        if ii==1;
                            set(handles.IsR1tuning, 'BackgroundColor', [1 0 0]);
                        else ii==2;
                            set(handles.IsR2tuning, 'BackgroundColor', [1 0 0]);
                        end
                        jj=jj+1;
                    end
                end
                set(handles.R1tuningRate, 'String', [num2str(round(100*R1rate/indrate)),'%']);
                set(handles.R2tuningRate, 'String', [num2str(round(100*R2rate/indrate)),'%']);
            else
                set(handles.IsR1tuning, 'BackgroundColor', [0.9 0.9 0.9]);
                set(handles.IsR2tuning, 'BackgroundColor', [0.9 0.9 0.9]);
            end
        end
        if endloopdisplayValR<3
            for ii=endloopdisplayValR+1:3
                set(obj(ii), 'Visible', 'off');
            end
        end
    elseif Rnew(1,1)>1000 & endloopdisplayValR<=2
        set(obj(1), 'Visible', 'off');
        if endloopdisplayValR>2
            endloopdisplayValR=2;
        end
        for ii=1:endloopdisplayValR
            j=ii+1;
            set(obj(j), 'Visible', 'on');
            set(obj(j), 'String', [num2str(round(Rnew(1,ii))),'   -   ',num2str(round(Rnew(2,ii)))]);
        end
        if length(locs)~=0;
            jj=1;
            while jj<=length(locs)
                if Rnew(1,1)<=locs(jj) & Rnew(2,1)>=locs(jj)
                    set(handles.IsR2tuning, 'BackgroundColor', [0 1 0]);
                    R2rate = R2rate+1;
                    jj=length(locs)+1;
                else
                    set(handles.IsR2tuning, 'BackgroundColor', [1 0 0]);
                    jj=jj+1;
                end
            end
            set(handles.R2tuningRate, 'String', [num2str(round(100*R2rate/indrate)),'%']);
            
        else
            set(handles.IsR1tuning, 'BackgroundColor', [0.9 0.9 0.9]);
            set(handles.IsR2tuning, 'BackgroundColor', [0.9 0.9 0.9]);
        end
        if j<3
            for ii=j+1:3
                set(obj(ii), 'Visible', 'off');
            end
        end
    end
else
    set(handles.IsR1tuning, 'BackgroundColor', [0.9 0.9 0.9]);
    set(handles.IsR2tuning, 'BackgroundColor', [0.9 0.9 0.9]);
end


graphAnalyse = handles.Analyse;
% frequence2position(findH.freqH1,ax, '.r');
%frequence2position([findH.freqH1 findH.freqH2] ,graphAnalyse);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
graph2 = handles.Spectre;

if get(handles.DisplayRawData, 'Value') ==1
    plot(handles.Spectre, freqZ, Zplot - MeanZplot , 'k', 'linewidth', 1);
    hold(handles.Spectre,'on');
    plot(handles.Phase, freqZ(1:size(derY,1)), derY - MeanderY,'k', 'linewidth', 1);
    hold(handles.Phase,'on');
end
if get(handles.DisplayFilteredData, 'Value') ==1
    plot(handles.Spectre, freqZ, medfilt1(sgolayfilt(Zplot-MeanZplot,3,9),5), 'k', 'linewidth', 4);
    hold(handles.Spectre,'on');
    plot(handles.Phase, freqZ(1:size(derY,1)), medfilt1(sgolayfilt(derY- MeanderY,3,41),5) ,'k','linewidth', 4);
    hold(handles.Phase,'on');
end
if get(handles.DisplayDeleteHarmonics, 'Value') ==1 & IsPlaying ==1% & IsSinging==1
    plot(handles.Spectre, freqZ, Zfilt, 'r','linewidth', 4);
    hold(handles.Spectre,'on');
end

if get(handles.DisplayMean, 'Value') ==1
    if (L- NbAverage*handles.nCalib+1)<2
        ZMeanplot = 20*log(mean(abs(handles.Z./repmat(handles.Zref(handles.harmLo +1 :handles.harmHi + 1),1, indRecord-iStartNewRecord)),2));
        MeanZMeanplot = mean(ZMeanplot);
    else
        ZMeanplot = 20*log(mean(abs(handles.Z./repmat(handles.Zref(handles.harmLo +1 :handles.harmHi + 1),1, NbAverage)),2));
        MeanZMeanplot = mean(ZMeanplot);
    end
    
    plot(handles.Spectre, freqZ, ZMeanplot - MeanZplot , 'r', 'linewidth', 1);
    hold(handles.Spectre,'on');
end
% derZ = diff(Zplot-MeanZplot,5)./(freqZ(2)-freqZ(1));
% derZ = diff(medfilt1(sgolayfilt(Zplot-MeanZplot,3,25),5),5)./(freqZ(2)-freqZ(1));



% plot( freqZ, 20*log10(abs(sgolayfilt(handles.Z(:,1)./handles.Zref,3,25))), 'r');
% plot( freqZ, medfilt1(20*log(abs(mean(handles.Z,2)./handles.Zref)),4), 'r');
% ylim(graph2,[-50 50])
% xlim(graph2, [handles.FreqLo handles.FreqHi]);
% xlim(graph2, [0 handles.FreqHi]);
xlim(graph2, XLimSpectrum);
% ylim(graph2, [min(sgolayfilt(derZ,3,25)) max(sgolayfilt(derZ,3,25))]);
% ylim(graph2, [min(Zplot - MeanZplot) max(Zplot - MeanZplot)]);
ylim(graph2, [min(str2num(get(handles.YlimMinMagnitude, 'String')),str2num(get(handles.YlimMaxMagnitude, 'String'))), ...
    max(str2num(get(handles.YlimMinMagnitude, 'String')),str2num(get(handles.YlimMaxMagnitude, 'String')))]);
% ylim(graph2, [-100 100]);
% ylim(graph2, [-20 20]);




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
graph3 = handles.Phase;
% Y = unwrap(angle(mean(handles.Z,2)./handles.Zref(handles.harmLo +1 :handles.harmHi + 1)));
% derY = diff(Y)./(freqZ(2)-freqZ(1));
% MeanderY =mean(derY);
% plot(graph3, freqZ, Y ,'k', 'linewidth', 1);
% hold(graph3,'on');
% plot(graph3, freqZ(1:length(derY)), derY,'k', 'linewidth', 1);
% hold(graph3,'on');
% plot(graph3, freqZ(1:length(derY)), medfilt1(sgolayfilt(derY,3,41),5) ,'k','linewidth', 4);
% test = medfilt1(sgolayfilt(derY,3,41),6);
% tau = mean(test(end-10:end))
% Y2 = unwrap(angle(mean(handles.Z,2).*exp(-sqrt(-1)*2*pi*freqZ(:)*tau)./handles.Zref(handles.harmLo +1 :handles.harmHi + 1)));
% hold(graph3,'on');
% plot(graph3, freqZ(1:length(Y2)),Y2 ,'g');
xlim(graph3,XLimSpectrum);
ylim(graph3, [min(medfilt1(sgolayfilt(derY- MeanderY,3,41),5)) max(medfilt1(sgolayfilt(derY- MeanderY,3,41),5))]);


Val = get(handles.PannelChooseDisplay, 'UserData');
indVal = find(Val);
if length(indVal)~=0
    for ii=1:length(indVal)
        plot(handles.Spectre, [Val(indVal(ii)),Val(indVal(ii))], handles.Spectre.YLim, '-y', 'linewidth', 3);
        hold on;
        plot(handles.Phase, [Val(indVal(ii)),Val(indVal(ii))], handles.Phase.YLim, '-y', 'linewidth', 3);
        hold on;
    end
end
%
% xlabel(handles.Spectre,'');
% xlabel(handles.Phase,'');
% SpectrumYLabel = ylabel(handles.Spectre,'Magnitude Spectrum');
% set(SpectrumYLabel, 'Units', 'Normalized', 'Position', [-0.036,0.5, 0]);
% set(SpectrumYLabel, 'FontWeight', 'bold');
% PhaseYLabel = ylabel(handles.Phase,'Phase Spectrum');
% set(PhaseYLabel, 'Units', 'Normalized', 'Position', [-0.036,0.5, 0]);
% set(PhaseYLabel, 'FontWeight', 'bold');
% AudioYLabel = ylabel(handles.Audio,'Audio [Pa]');
% set(AudioYLabel, 'Units', 'Normalized', 'Position', [-0.026,0.5, 0]);
% set(AudioYLabel, 'FontWeight', 'bold');
% EGGYLabel = ylabel(handles.EGG,'EGG [V]');
% set(EGGYLabel, 'Units', 'Normalized', 'Position', [-0.026,0.5, 0]);
% set(EGGYLabel, 'FontWeight', 'bold');
set(handles.Phase, 'XTickLabel', '');

if indRecord==1
    
    XLim = XLimSpectrum
    set(handles.AxesClefs, 'Units', 'Pixels');
    posFreq = get(handles.AxesClefs, 'Position');
    axes(handles.AxesBassClef)
    set(handles.AxesBassClef, 'Units', 'Pixels');
    pos = get(handles.AxesBassClef, 'Position');
    pos(3) = 25;
    pos(4) = 27;
    pos(1) =posFreq(1) + posFreq(3)/(XLim(2)-XLim(1))*((98+220)/2-XLim(1))-pos(3)/2;
    if pos(1)>= posFreq(1) + posFreq(3) -pos(3)/2
        set(handles.AxesBassClef, 'Visible', 'off')
    else
        set(handles.AxesBassClef, 'Visible', 'on')
    end
    set(handles.AxesBassClef, 'Position', pos)
    imshow(get(handles.pictureBassClef, 'CData'));
    
    axes(handles.AxesTrebbleClef_1)
    set(handles.AxesTrebbleClef_1, 'Units', 'Pixels');
    pos = get(handles.AxesTrebbleClef_1, 'Position');
    pos(3) = 16;
    pos(4) = 39;
    pos(1) =posFreq(1) + posFreq(3)/(XLim(2)-XLim(1))*((330+698.5)/2-XLim(1))-pos(3);
    if pos(1)>= posFreq(1) + posFreq(3) -pos(3)/2
        set(handles.AxesTrebbleClef_1, 'Visible', 'off')
    else
        set(handles.AxesTrebbleClef_1, 'Visible', 'on')
    end
    set(handles.AxesTrebbleClef_1, 'Position', pos)
    imshow(get(handles.pictureTrebbleClef, 'CData'))
    
    axes(handles.AxesTwoTrebbleClefs)
    set(handles.AxesTwoTrebbleClefs, 'Units', 'Pixels');
    pos = get(handles.AxesTwoTrebbleClefs, 'Position');
    pos(3) = 31;
    pos(4) = 38;
    pos(1) =posFreq(1) + posFreq(3)/(XLim(2)-XLim(1))*((1318.5 +2794)/2-XLim(1))-pos(3)/2;
    if pos(1)>= posFreq(1) + posFreq(3) -pos(3)/2
        set(handles.AxesTwoTrebbleClefs, 'Visible', 'off')
    else
        set(handles.AxesTwoTrebbleClefs, 'Visible', 'on')
    end
    set(handles.AxesTwoTrebbleClefs, 'Position', pos)
    imshow(get(handles.pictureTwoTrebbleClefs, 'CData'))
end
hold(graph2,'off');
hold(graph3,'off');


function [PlottedCurves]= DisplayChosenCurvesNEW(handles)


global hjRangeSlider SavedCurvesNumber Colors SavedCurves ...
    Is_SavedCurve_Checked SavedplotRawDataNumber SavedplotFilteredDataNumber...
    lgdSpectre lgdPhase LGDPhase LGDSpectre ValRAmp ValHarmonicWidth...
    PushedZoomSpectre hSpectre h

%     hSpectre = zoom(handles.Spectre);
%     set(hSpectre,'ActionPostCallback',{@ZoomCallbackSpectre, handles})
%     hSpectre.Enable = 'on';


h = zoom();
%     set(h, 'Enable', 'off');
setAxesZoomMotion(h,handles.Audio,'horizontal');
if strcmp(handles.RecordType, 'RealTime')==1
    set(h,'ActionPostCallback',{@ZoomCallbackRealTimeNEW, handles}) ;
else
    set(h,'ActionPostCallback',{@ZoomCallbackAcuz, handles}) ;
end

%     xlabel(handles.Spectre,'');
%     xlabel(handles.Phase,'');
%     SpectrumYLabel = ylabel(handles.Spectre,'Magnitude Spectrum');
%     set(SpectrumYLabel, 'Units', 'Normalized', 'Position', [-0.036,0.5, 0]);
%     set(SpectrumYLabel, 'FontWeight', 'bold');
%     PhaseYLabel = ylabel(handles.Phase,'Phase Spectrum');
%     set(PhaseYLabel, 'Units', 'Normalized', 'Position', [-0.036,0.5, 0]);
%     set(PhaseYLabel, 'FontWeight', 'bold');
%     AudioYLabel = ylabel(handles.Audio,'Audio [Pa]');
%     set(AudioYLabel, 'Units', 'Normalized', 'Position', [-0.026,0.5, 0]);
%     set(AudioYLabel, 'FontWeight', 'bold');
%     EGGYLabel = ylabel(handles.EGG,'EGG [V]');
%     set(EGGYLabel, 'Units', 'Normalized', 'Position', [-0.026,0.5, 0]);
%     set(EGGYLabel, 'FontWeight', 'bold');

PlottedCurves= [];

ValLo = get(hjRangeSlider,'LowValue');
ValHi = get(hjRangeSlider,'HighValue');

if ValHi>ValLo
    XLim = get(handles.Spectre, 'XLim');
    xmin = XLim(1); xmax = XLim(2);
    YLim = get(handles.Spectre, 'YLim');
    ymin = YLim(1); ymax = YLim(2);
    
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    tLo = handles.TCycle(ValLo+1);
    % handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    % handles.tHi = tHi;
    [~,indZLo] = min(abs(tLo*ones(1,length(handles.TCycle))-handles.TCycle));
    [~,indZHi] = min(abs(tHi*ones(1,length(handles.TCycle))-handles.TCycle));
    
    freqZplot = handles.freqZ(handles.harmLo+1:handles.harmHi+1);
    % if (get(handles.radiobuttonCalculationAcuz, 'Value') ~= 1 ) || (strcmp(handles.LoadFileType, 'RealTime')==1)
    
    %     if strcmp(handles.RecordType, 'RealTime') ==1 || (strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 0)
    
    
    
    
    
    
    %calculate AmpPlot PhasePlot DerivPhasePlot
    if strcmp(handles.LoadFileType, 'NEWAcuz')==1
        if strcmp(handles.RecordType, 'RealTime') ==1
            set(handles.DisplayUnwrapPhase, 'String', 'Unwrap(Phase)');
            set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Unwrap(Phase)) / d(freq)');
            uu=1;
            ExistAmpPlot = 0;
            if isempty(handles.IndStartStopNoise)
                IsPlaying = 0;
                %display('No BBSignal');
                ExistAmpPlot =1;
                uu = size(handles.IndStartStopNoise,2) +1 ;
                AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)));
                PhasePlot = unwrap(angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)));
                DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
                freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
                yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
                yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
                yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
            else
                while uu<=size(handles.IndStartStopNoise,2) & ExistAmpPlot==0
                    if handles.IndStartStopNoise(1,1)==0 & ValHi<= handles.IndStartStopNoise(2,1) & ValLo < ValHi
                        IsPlaying = 1;
                        %display('With BBSignal');
                        ExistAmpPlot =1;
                        %         uu
                        uu = size(handles.IndStartStopNoise,2) +1 ;
                        AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
                            handles.Zref(handles.harmLo+1:handles.harmHi+1)));
                        PhasePlot = unwrap(angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
                            handles.Zref(handles.harmLo+1:handles.harmHi+1)));
                        DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
                        freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
                        yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
                        yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
                        yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
                    elseif (ValHi <= handles.IndStartStopNoise(1,1) & ValLo < ValHi )
                        IsPlaying = 0;
                        %display('No BBSignal');
                        ExistAmpPlot =1;
                        %         uu
                        uu = size(handles.IndStartStopNoise,2) +1 ;
                        AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)));
                        PhasePlot = unwrap(angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)));
                        DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
                        freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
                        yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
                        yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
                        yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
                    elseif ValLo >= handles.IndStartStopNoise(2,end) & ValHi > ValLo
                        IsPlaying = 0;
                        %display('No BBSignal');
                        ExistAmpPlot =1;
                        %         uu
                        uu = size(handles.IndStartStopNoise,2) +1 ;
                        AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)));
                        PhasePlot = unwrap(angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)));
                        DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
                        freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
                        yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
                        yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
                        yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
                    else
                        if ismember([ValLo ValHi], (handles.IndStartStopNoise(1,uu)+1:1: handles.IndStartStopNoise(2,uu)))==[1 1]
                            IsPlaying = 1;
                            %display('With BBSignal');
                            %             uu
                            uu = size(handles.IndStartStopNoise,2) +1 ;
                            ExistAmpPlot =1;
                            AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
                                handles.Zref(handles.harmLo+1:handles.harmHi+1)));
                            PhasePlot = unwrap(angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
                                handles.Zref(handles.harmLo+1:handles.harmHi+1)));
                            DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
                            freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
                            yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
                            yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
                            yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
                            
                        elseif (uu~=size(handles.IndStartStopNoise,2) & ...
                                ismember([ValLo ValHi], (handles.IndStartStopNoise(2,uu)+1:1: handles.IndStartStopNoise(1,uu+1)))== [1 1] )
                            IsPlaying = 0;
                            %display('No BBSignal');
                            ExistAmpPlot =1;
                            %             uu
                            uu = size(handles.IndStartStopNoise,2) +1 ;
                            AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)));
                            PhasePlot = unwrap(angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)));
                            DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
                            freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
                            yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
                            yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
                            yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
                        elseif ismember(ismember([ValLo ValHi], (handles.IndStartStopNoise(1,uu)+2:1: handles.IndStartStopNoise(2,uu))),[0 1])
                            %display('pas meme type : on affiche rien');
                            ExistAmpPlot =0;
                            AmpPlot =0;
                            PhasePlot=0;
                            DerivPhasePlot=0;
                            %             uu
                            uu=uu+1;
                            plot(handles.Spectre, [xmin xmax], [AmpPlot AmpPlot], 'w');
                            plot(handles.Phase, [xmin xmax], [PhasePlot PhasePlot], 'w');
                            hold(handles.Spectre, 'off');
                            hold(handles.Phase, 'off');
                        end
                    end
                end
            end
            MeanAmpPlot = mean(AmpPlot);
            MeanPhasePlot = mean(PhasePlot);
            MeanDerivPhasePlot = mean(DerivPhasePlot);
            
        elseif strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 0
            IsPlaying = 1;
            set(handles.DisplayUnwrapPhase, 'String', 'Phase');
            set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Phase) / d(freq)');
            ExistAmpPlot = 1;
            AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
                handles.Zref(handles.harmLo+1:handles.harmHi+1)));
            PhasePlot = angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
                handles.Zref(handles.harmLo+1:handles.harmHi+1));
            DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
            freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
            yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
            yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
            yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
            MeanAmpPlot = mean(AmpPlot);
            MeanPhasePlot = mean(PhasePlot);
            MeanDerivPhasePlot = mean(DerivPhasePlot);
        elseif strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 1
            IsPlaying = 1;
            set(handles.DisplayUnwrapPhase, 'String', 'Phase');
            set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Phase) / d(freq)');
            if ValLo>=3 & ValHi>ValLo & ValHi<20
                ExistAmpPlot = 1;
                AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3),2)./...
                    handles.Zref(handles.harmLo+1:handles.harmHi+1)));
                PhasePlot = angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3),2)./...
                    handles.Zref(handles.harmLo+1:handles.harmHi+1));
                DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
                freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
                yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
                yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
                yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
                MeanAmpPlot = mean(AmpPlot);
                MeanPhasePlot = mean(PhasePlot);
                MeanDerivPhasePlot = mean(DerivPhasePlot);
            else
                ExistAmpPlot = 0;
            end
        end
    else
        set(handles.DisplayUnwrapPhase, 'String', 'Phase');
        set(handles.DisplayDerivUnwrapPhase, 'String', 'd(Phase) / d(freq)');
        if ValLo>=3 & ValHi>ValLo & ValHi<20
            IsPlaying = 1;
            ExistAmpPlot = 1;
            AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3),2)./...
                handles.Zref(handles.harmLo+1:handles.harmHi+1)));
            PhasePlot = angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3),2)./...
                handles.Zref(handles.harmLo+1:handles.harmHi+1));
            DerivPhasePlot = diff(PhasePlot)./(freqZplot(2)-freqZplot(1));
            freqDerivPhasePlot = freqZplot(1:length(DerivPhasePlot));
            yminSpectre = min(min(AmpPlot)); ymaxSpectre = max(max(AmpPlot));
            yminPhase = min(min(PhasePlot)); ymaxPhase = max(max(PhasePlot));
            yminDerivPhase = min(min(DerivPhasePlot)); ymaxDerivPhase = max(max(DerivPhasePlot));
            MeanAmpPlot = mean(AmpPlot);
            MeanPhasePlot = mean(PhasePlot);
            MeanDerivPhasePlot = mean(DerivPhasePlot);
        else
            ExistAmpPlot = 0;
        end
    end
    
    if ExistAmpPlot ==1 & IsPlaying ==1
        set(handles.DisplayDeleteHarmonics, 'Enable', 'on');
    else
        set(handles.DisplayDeleteHarmonics, 'Enable', 'off');
        set(handles.DisplayDeleteHarmonics, 'Value', 0);
    end
    %calculate  AmpPlot_AllCurves PhasePlot_AllCurves DerivPhasePlot_AllCurves
    if strcmp(handles.LoadFileType, 'NEWAcuz')==1
        if strcmp(handles.RecordType, 'RealTime') ==1 || (strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 0)
            %             Z_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
            %                 repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
            
            uu=1;
            if isempty(handles.IndStartStopNoise)
                %display('No BBSignal');
                uu = size(handles.IndStartStopNoise,2) +1 ;
                Amp_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)))';
                Phase_AllCurves = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)));
                DerivPhase_AllCurves = diff(Phase_AllCurves)./(freqZplot(2)-freqZplot(1));
            else
                while uu<=size(handles.IndStartStopNoise,2)
                    if handles.IndStartStopNoise(1,1)==0 & ValHi<=(handles.IndStartStopNoise(2,1)) & ValLo<ValHi
                        %display('+++++++++++++++');
                        %display('With BBSignal');
                        uu = size(handles.IndStartStopNoise,2) +1 ;
                        Amp_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
                            repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
                        Phase_AllCurves = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
                            repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)));
                        DerivPhase_AllCurves = diff(Phase_AllCurves)./(freqZplot(2)-freqZplot(1));
                    elseif (ValHi <= handles.IndStartStopNoise(1,1) & ValLo < ValHi )
                        %display('No BBSignal');
                        %         uu
                        uu = size(handles.IndStartStopNoise,2) +1 ;
                        Amp_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)))';
                        Phase_AllCurves = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)));
                        DerivPhase_AllCurves = diff(Phase_AllCurves)./(freqZplot(2)-freqZplot(1));
                    elseif ValLo >= handles.IndStartStopNoise(2,end) & ValHi > ValLo
                        %display('No BBSignal');
                        %         uu
                        uu = size(handles.IndStartStopNoise,2) +1 ;
                        Amp_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)))';
                        Phase_AllCurves = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)));
                        DerivPhase_AllCurves = diff(Phase_AllCurves)./(freqZplot(2)-freqZplot(1));
                    else
                        if ismember([ValLo ValHi], (handles.IndStartStopNoise(1,uu)+1:1: handles.IndStartStopNoise(2,uu)))==[1 1]
                            %display('With BBSignal');
                            %             uu
                            uu = size(handles.IndStartStopNoise,2) +1 ;
                            Amp_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
                                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
                            Phase_AllCurves = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
                                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)));
                            DerivPhase_AllCurves = diff(Phase_AllCurves)./(freqZplot(2)-freqZplot(1));
                            
                        elseif (uu~=size(handles.IndStartStopNoise,2) & ...
                                ismember([ValLo ValHi], (handles.IndStartStopNoise(2,uu)+1:1: handles.IndStartStopNoise(1,uu+1)))== [1 1] )
                            %display('No BBSignal');
                            %             uu
                            uu = size(handles.IndStartStopNoise,2) +1 ;
                            Amp_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)))';
                            Phase_AllCurves = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)));
                            DerivPhase_AllCurves = diff(Phase_AllCurves)./(freqZplot(2)-freqZplot(1));
                        elseif ismember(ismember([ValLo ValHi], (handles.IndStartStopNoise(1,uu)+2:1: handles.IndStartStopNoise(2,uu))),[0 1])
                            %display('pas meme type : on affiche rien');
                            %             uu
                            uu=uu+1;
                            %                         plot(handles.Spectre, [xmin xmax], [0 0], 'w');
                            %                         hold(handles.Spectre, 'off');
                        end
                    end
                end
            end
            
            
            
            
            %             elseif  strcmp(handles.RecordType, 'NoBBSignal') ==1
            %                 Amp_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)))';
            %                 Phase_AllCurves = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)));
            %                 DerivPhase_AllCurves = diff(Phase_AllCurves)./(freqZplot(2)-freqZplot(1));
        elseif strcmp(handles.RecordType, 'Acuz') ==1 & handles.DataAquired == 1
            Amp_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
            Phase_AllCurves = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)));
            DerivPhase_AllCurves = diff(Phase_AllCurves)./(freqZplot(2)-freqZplot(1));
        end
    else
        if ValHi>ValLo & ValLo>=3 & ValHi<=19
            Amp_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
            Phase_AllCurves = unwrap(angle(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo-3:indZLo+NbAvg-1-3)./...
                repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)));
            DerivPhase_AllCurves = diff(Phase_AllCurves)./(freqZplot(2)-freqZplot(1));
        end
    end
    
    %     cla(handles.Spectre)
    %     cla(handles.Phase)
    
    axes(handles.Spectre);
    Legend_SpectreRawData = {};
    Legend_PhaseRawData = {};
    Legend_DerivPhaseRawData = {};
    varRawData = get(handles.DisplayRawData, 'Value');
    if get(handles.DisplayRawData, 'Value')==1 & ExistAmpPlot ==1
        hold(handles.Spectre, 'off');
        if get(handles.DisplayOffset, 'Value')==1
            plotRawData = plot(handles.Spectre, freqZplot,AmpPlot-MeanAmpPlot, 'k', 'linewidth', 1);
            plotRawData.Tag = 'plotRawDataOffset';
            plotRawData.DisplayName = ['OffsetMagnitude-Period:', num2str(handles.TCycle(1+ValLo)),...
                '-',num2str(handles.TCycle(1+ValHi)),'s'];
        else
            plotRawData = plot(handles.Spectre, freqZplot,AmpPlot, 'k', 'linewidth', 1);
            plotRawData.Tag = 'plotRawData';
            plotRawData.DisplayName = ['Magnitude-Period:', num2str(handles.TCycle(1+ValLo)),...
                '-',num2str(handles.TCycle(1+ValHi)),'s'];
        end
        plotRawData.Visible = 'on';
        plotRawData.Selected = 'off';
        plotRawData.PickableParts = 'all';
        plotRawData.HitTest = 'on';
        plotRawData.UserData = [ValLo ValHi];
        PlottedCurves.plotRawData = plotRawData;
        assignin('base', 'PlottedCurves', PlottedCurves);
        Legend_SpectreRawData{1} = plotRawData.DisplayName;
        plotRawData.Annotation.LegendInformation.IconDisplayStyle = 'on';
        hold(handles.Spectre, 'off');
        
        if get(handles.DisplayUnwrapPhase, 'Value')==1
            if get(handles.DisplayDerivUnwrapPhase, 'Value')==0
                hold(handles.Spectre, 'off');
                p = plot(handles.Phase, freqZplot, PhasePlot,'k', 'linewidth', 1);
                hold(handles.Phase,'off');
                p.DisplayName = ['Phase-Period:', num2str(handles.TCycle(1+ValLo)),...
                    '-',num2str(handles.TCycle(1+ValHi)),'s'];
                Legend_PhaseRawData{1} = p.DisplayName;
                p.Annotation.LegendInformation.IconDisplayStyle = 'on';
                
                
                hold(handles.Phase, 'on');
                if get(handles.DisplayDerivPhaseOffset, 'Value')==1
                    plotRawDataPhase = plot(handles.Phase, freqDerivPhasePlot,DerivPhasePlot-MeanDerivPhasePlot, 'k', 'linewidth', 1);
                    plotRawDataPhase.Tag = 'plotRawDataPhaseOffset';
                    plotRawDataPhase.DisplayName = ['OffsetDerivPhase-Period:', num2str(handles.TCycle(1+ValLo)),...
                        '-',num2str(handles.TCycle(1+ValHi)),'s'];
                else
                    plotRawDataPhase = plot(handles.Phase, freqDerivPhasePlot,DerivPhasePlot, 'k', 'linewidth', 1);
                    plotRawDataPhase.Tag = 'plotRawDataPhase';
                    plotRawDataPhase.DisplayName = ['DerivPhase-Period:', num2str(handles.TCycle(1+ValLo)),...
                        '-',num2str(handles.TCycle(1+ValHi)),'s'];
                end
                plotRawDataPhase.Visible = 'off';
                plotRawDataPhase.Selected = 'off';
                plotRawDataPhase.PickableParts = 'all';
                plotRawDataPhase.HitTest = 'on';
                plotRawDataPhase.UserData = [ValLo ValHi];
                PlottedCurves.plotRawDataPhase = plotRawDataPhase;
                plotRawDataPhase.Annotation.LegendInformation.IconDisplayStyle = 'off';
                assignin('base', 'PlottedCurves', PlottedCurves);
                hold(handles.Phase, 'off');
                
            else
                hold(handles.Phase,'off');
                %             cla(handles.Phase)
                if get(handles.DisplayDerivPhaseOffset, 'Value')==1
                    [AX,H1,H2] = plotyy(handles.Phase, freqZplot, PhasePlot, freqDerivPhasePlot,DerivPhasePlot-MeanDerivPhasePlot);
                    AX(2).YColor = 'blue';
                    AX(2).YLimMode = 'manual';
                    AX(2).XLimMode = 'manual';
                    AX(2).YLim = [yminDerivPhase-MeanDerivPhasePlot ymaxDerivPhase-MeanDerivPhasePlot];
                    AX(2).XLim = [xmin xmax];
                    H2.Tag = 'plotRawDataPhaseOffset';
                else
                    [AX,H1,H2] = plotyy(handles.Phase, freqZplot, PhasePlot, freqDerivPhasePlot,DerivPhasePlot);
                    AX(2).YColor = 'blue';
                    AX(2).YLimMode = 'manual';
                    AX(2).XLimMode = 'manual';
                    AX(2).YLim = [yminDerivPhase ymaxDerivPhase];
                    AX(2).XLim = [xmin xmax];
                    H2.Tag = 'plotRawDataPhase';
                end
                %             hold(handles.Phase,'all');
                H1.Color = 'black';
                H1.LineWidth = 1;
                AX(1).YColor = 'black';
                AX(1).YLimMode = 'manual';
                AX(1).XLimMode = 'manual';
                AX(1).YLim = [yminPhase ymaxPhase];
                AX(1).XLim = [xmin xmax];
                H2.Color = 'blue';
                H2.LineWidth = 1;
                H2.Visible = 'on';
                H2.Selected = 'off';
                H2.PickableParts = 'all';
                H2.HitTest = 'on';
                H2.UserData = [ValLo ValHi];
                
                AX(2);
                AX(1);
                plotRawDataPhase = H2;
                PlottedCurves.plotRawDataPhase = plotRawDataPhase;
                assignin('base', 'PlottedCurves', PlottedCurves);
                %             linkaxes([handles.Spectre,AX(1)],'x');
                %             linkaxes([handles.Spectre,AX(2)],'x');
                %             hold(handles.Phase,'on');
                %             hold(AX(1),'on');
                %             hold(AX(2),'on');
                %             plotRawDataPhase = plot(handles.Phase, freqDerivPhasePlot,DerivPhasePlot, 'b', 'linewidth', 1);
                %             plotRawDataPhase.Visible = 'on';
                %             plotRawDataPhase.Selected = 'off';
                %             plotRawDataPhase.PickableParts = 'all';
                %             plotRawDataPhase.HitTest = 'on';
                %             plotRawDataPhase.Tag = 'plotRawDataPhase';
                %             plotRawDataPhase.UserData = [ValLo ValHi];
                %             PlottedCurves.plotRawDataPhase = plotRawDataPhase;
                %             handles.Phase.YLimMode = 'manual';
                %             handles.Phase.XLimMode = 'manual';
                %             handles.Phase.YLim = [yminDerivPhase ymaxDerivPhase]
                %             handles.Phase.XLim = [xmin xmax]
                %             assignin('base', 'PlottedCurves', PlottedCurves);
                hold(handles.Phase,'off');
                hold(AX(1),'off');
                hold(AX(2),'off');
            end
        else
            if get(handles.DisplayDerivUnwrapPhase, 'Value')==1
                hold(handles.Phase, 'off');
                if get(handles.DisplayDerivPhaseOffset, 'Value')==1
                    plotRawDataPhase = plot(handles.Phase, freqDerivPhasePlot,DerivPhasePlot-MeanDerivPhasePlot, 'k', 'linewidth', 1);
                    plotRawDataPhase.Tag = 'plotRawDataPhaseOffset';
                    plotRawDataPhase.DisplayName = ['OffsetDerivPhase-Period:', num2str(handles.TCycle(1+ValLo)),...
                        '-',num2str(handles.TCycle(1+ValHi)),'s'];
                else
                    plotRawDataPhase = plot(handles.Phase, freqDerivPhasePlot,DerivPhasePlot, 'k', 'linewidth', 1);
                    plotRawDataPhase.Tag = 'plotRawDataPhase';
                    plotRawDataPhase.DisplayName = ['DerivPhase-Period:', num2str(handles.TCycle(1+ValLo)),...
                        '-',num2str(handles.TCycle(1+ValHi)),'s'];
                end
                plotRawDataPhase.Visible = 'on';
                plotRawDataPhase.Selected = 'off';
                plotRawDataPhase.PickableParts = 'all';
                plotRawDataPhase.HitTest = 'on';
                plotRawDataPhase.UserData = [ValLo ValHi];
                PlottedCurves.plotRawDataPhase = plotRawDataPhase;
                assignin('base', 'PlottedCurves', PlottedCurves);
                Legend_DerivPhaseRawData{1} = plotRawDataPhase.DisplayName;
                plotRawDataPhase.Annotation.LegendInformation.IconDisplayStyle = 'on';
                
                hold(handles.Phase, 'off');
            else
                %                 hold(handles.Phase, 'off');
                %                 plot(handles.Phase, [xmin xmax], [0 0], 'w');
                hold(handles.Phase, 'off');
                if get(handles.DisplayDerivPhaseOffset, 'Value')==1
                    plotRawDataPhase = plot(handles.Phase, freqDerivPhasePlot,DerivPhasePlot-MeanDerivPhasePlot, 'k', 'linewidth', 1);
                    plotRawDataPhase.Tag = 'plotRawDataPhaseOffset';
                    plotRawDataPhase.DisplayName = ['OffsetDerivPhase-Period:', num2str(handles.TCycle(1+ValLo)),...
                        '-',num2str(handles.TCycle(1+ValHi)),'s'];
                else
                    plotRawDataPhase = plot(handles.Phase, freqDerivPhasePlot,DerivPhasePlot, 'k', 'linewidth', 1);
                    plotRawDataPhase.Tag = 'plotRawDataPhase';
                    plotRawDataPhase.DisplayName = ['DerivPhase-Period:', num2str(handles.TCycle(1+ValLo)),...
                        '-',num2str(handles.TCycle(1+ValHi)),'s'];
                end
                plotRawDataPhase.Visible = 'off';
                plotRawDataPhase.Selected = 'off';
                plotRawDataPhase.PickableParts = 'all';
                plotRawDataPhase.HitTest = 'on';
                plotRawDataPhase.UserData = [ValLo ValHi];
                PlottedCurves.plotRawDataPhase = plotRawDataPhase;
                assignin('base', 'PlottedCurves', PlottedCurves);
                %                 Legend_DerivPhaseRawData{1} = plotRawDataPhase.DisplayName
                plotRawDataPhase.Annotation.LegendInformation.IconDisplayStyle = 'off';
                hold(handles.Phase, 'off');
            end
        end
    else
        hold(handles.Spectre, 'off');
        plot(handles.Spectre, [xmin xmax], [0 0], 'w');
        hold(handles.Spectre, 'off');
        
        hold(handles.Phase, 'off');
        plot(handles.Phase, [xmin xmax], [0 0], 'w');
        hold(handles.Phase, 'off');
    end
    set(handles.Phase, 'XTickLabel', '');
    
    Legend_SpectreAllCurves = {};
    Legend_PhaseAllCurves = {};
    Legend_DerivPhaseAllCurves = {};
    varAllCurves = get(handles.DisplayAllCurves, 'Value');
    if get(handles.DisplayAllCurves, 'Value')==1 & ExistAmpPlot ==1
        
        hold(handles.Spectre, 'on');
        if get(handles.DisplayOffset, 'Value')==1
            %             pSpectreAllCurves = plot(handles.Spectre,freqZplot,...
            %                 Amp_AllCurves - repmat(mean(Amp_AllCurves,2),1, size(Amp_AllCurves,2)), 'linewidth', 0.25)
            %             pSpectreAllCurves = plot(handles.Spectre,freqZplot,...
            %                 Amp_AllCurves - repmat(mean(mean(Amp_AllCurves,2)),size(Amp_AllCurves,1),1), 'linewidth', 0.25)
            pSpectreAllCurves = plot(handles.Spectre,freqZplot,...
                Amp_AllCurves - repmat(MeanAmpPlot,size(Amp_AllCurves,1),size(Amp_AllCurves,2)), 'linewidth', 0.25);
            
        else
            pSpectreAllCurves = plot(handles.Spectre,freqZplot,Amp_AllCurves, 'linewidth', 0.25);
        end
        for hh=1:NbAvg
            Legend_SpectreAllCurves{hh} = ['Magnitude-No-',num2str(hh)];
            pSpectreAllCurves(hh).DisplayName = Legend_SpectreAllCurves{hh};
            pSpectreAllCurves(hh).Annotation.LegendInformation.IconDisplayStyle = 'on';
        end
        if get(handles.DisplayUnwrapPhase, 'Value')==1
            if get(handles.DisplayDerivUnwrapPhase, 'Value')==0
                hold(handles.Phase,'on');
                pPhaseAllCurves = plot(handles.Phase, freqZplot, Phase_AllCurves, 'linewidth', 0.25);
                for hh=1:NbAvg
                    Legend_PhaseAllCurves{hh} = ['Phase-No-',num2str(hh)];
                    pPhaseAllCurves(hh).DisplayName = Legend_PhaseAllCurves{hh};
                    pPhaseAllCurves(hh).Annotation.LegendInformation.IconDisplayStyle = 'on';
                end
                hold(handles.Phase,'off');
            else
                
                if  ExistAmpPlot ==1 & (get(handles.DisplayRawData, 'Value')==1 & get(handles.DisplayFilteredData, 'Value')==1)
                    hold(handles.Phase,'on');
                    hold(AX(1),'on');
                    hold(AX(2),'on');
                else
                    hold(handles.Phase,'off');
                end
                if get(handles.DisplayDerivPhaseOffset, 'Value')==1
                    %                     [AX,H1,H2] = plotyy(handles.Phase, freqZplot, Phase_AllCurves, freqDerivPhasePlot,DerivPhase_AllCurves- repmat(mean(DerivPhase_AllCurves,2),1, size(DerivPhase_AllCurves,2)));
                    [AX,H1,H2] = plotyy(handles.Phase, freqZplot, Phase_AllCurves,...
                        freqDerivPhasePlot,DerivPhase_AllCurves- repmat(MeanDerivPhasePlot,size(DerivPhase_AllCurves,1), size(DerivPhase_AllCurves,2)));
                    AX(2).YColor = 'blue';
                    AX(2).YLimMode = 'manual'
                    AX(2).XLim = [xmin xmax]
                    AX(2).YLim = [yminDerivPhase-MeanDerivPhasePlot ymaxDerivPhase-MeanDerivPhasePlot];
                else
                    [AX,H1,H2] = plotyy(handles.Phase, freqZplot, Phase_AllCurves, freqDerivPhasePlot,DerivPhase_AllCurves);
                    AX(2).YColor = 'blue';
                    AX(2).YLimMode = 'manual'
                    AX(2).XLim = [xmin xmax];
                    AX(2).YLim = [yminDerivPhase ymaxDerivPhase];
                end
                AX(1).YColor = 'black';
                AX(1).YLimMode = 'manual'
                AX(1).YLim = [yminPhase ymaxPhase];
                AX(1).XLim = [xmin xmax];
                hold(handles.Phase,'off');
                hold(AX(1),'off');
                hold(AX(2),'off');
            end
        else
            if get(handles.DisplayDerivUnwrapPhase, 'Value')==1
                hold(handles.Phase,'on');
                if get(handles.DisplayDerivPhaseOffset, 'Value')==1
                    %                     pDerivPhaseAllCurves = plot(handles.Phase,freqDerivPhasePlot,DerivPhase_AllCurves- repmat(mean(DerivPhase_AllCurves,2),1, size(DerivPhase_AllCurves,2)), 'linewidth', 0.25 );
                    pDerivPhaseAllCurves = plot(handles.Phase,freqDerivPhasePlot,...
                        DerivPhase_AllCurves- repmat(MeanDerivPhasePlot, size(DerivPhase_AllCurves,1),size(DerivPhase_AllCurves,2)), 'linewidth', 0.25 );
                else
                    pDerivPhaseAllCurves = plot(handles.Phase,freqDerivPhasePlot,DerivPhase_AllCurves, 'linewidth', 0.25 );
                end
                
                for hh=1:NbAvg
                    Legend_DerivPhaseAllCurves{hh} = ['DerivPhase-No-',num2str(hh)];
                    pDerivPhaseAllCurves(hh).DisplayName = Legend_DerivPhaseAllCurves{hh};
                    pDerivPhaseAllCurves(hh).Annotation.LegendInformation.IconDisplayStyle = 'on';
                end
                hold(handles.Phase,'off');
            else
                hold(handles.Phase,'on');
                plot(handles.Phase, [xmin xmax], [0 0], 'w');
                hold(handles.Spectre, 'off');
            end
        end
        
    end
    set(handles.Phase, 'XTickLabel', '');
    
    if get(handles.DisplayMean, 'Value')==1 & ExistAmpPlot ==1
        hold(handles.Spectre, 'on');
        if get(handles.DisplayOffset, 'Value')==1
            plot(handles.Spectre, freqZplot,mean(Amp_AllCurves,1)-MeanAmpPlot, 'r', 'linewidth', 1);
        else
            plot(handles.Spectre, freqZplot,mean(Amp_AllCurves,1), 'r', 'linewidth', 1);
        end
    end
    set(handles.Phase, 'XTickLabel', '');
    
    Legend_SpectreFilteredData = {};
    Legend_PhaseFilteredData = {};
    Legend_DerivPhaseFilteredData = {};
    varFilteredData = get(handles.DisplayFilteredData, 'Value');
    if get(handles.DisplayFilteredData, 'Value')==1 & ExistAmpPlot ==1
        hold(handles.Spectre, 'on');
        if get(handles.DisplayOffset, 'Value')==1
            plotFilteredData = plot(handles.Spectre, freqZplot,...
                medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,25),5), '-k', 'linewidth', 4 );
            plotFilteredData.Tag = 'plotFilteredDataOffset';
            plotFilteredData.DisplayName = ['OffsetMagnitude-Period:', num2str(handles.TCycle(1+ValLo)),...
                '-',num2str(handles.TCycle(1+ValHi)),'s'];
        else
            plotFilteredData = plot(handles.Spectre, freqZplot,...
                medfilt1(sgolayfilt(AmpPlot,3,25),5), '-k', 'linewidth', 4 );
            plotFilteredData.Tag = 'plotFilteredData';
            plotFilteredData.DisplayName = ['Magnitude-Period:', num2str(handles.TCycle(1+ValLo)),...
                '-',num2str(handles.TCycle(1+ValHi)),'s'];
        end
        plotFilteredData.Visible = 'on';
        plotFilteredData.Selected = 'off';
        plotFilteredData.PickableParts = 'all';
        plotFilteredData.HitTest = 'on';
        plotFilteredData.UserData = [ValLo ValHi];
        
        Legend_SpectreFilteredData{1} = plotFilteredData.DisplayName;
        plotFilteredData.Annotation.LegendInformation.IconDisplayStyle = 'on';
        PlottedCurves.plotFilteredData = plotFilteredData;
        assignin('base', 'PlottedCurves', PlottedCurves);
        hold(handles.Spectre, 'off');
        
        if get(handles.DisplayUnwrapPhase, 'Value')==1
            if get(handles.DisplayDerivUnwrapPhase, 'Value')==0
                hold(handles.Phase,'on');
                plot(handles.Phase, freqZplot, sgolayfilt(PhasePlot,3,41), '-k', 'linewidth', 4 );
                hold(handles.Phase,'on');
                if get(handles.DisplayDerivPhaseOffset, 'Value')==1
                    plotFilteredDataPhase = plot(handles.Phase, freqDerivPhasePlot,...
                        sgolayfilt(DerivPhasePlot-MeanDerivPhasePlot,3,41), '-k', 'linewidth', 4 );
                    plotFilteredDataPhase.Tag = 'plotFilteredDataPhaseOffset';
                    plotFilteredDataPhase.DisplayName = ['OffsetPhase-Period:', num2str(handles.TCycle(1+ValLo)),...
                        '-',num2str(handles.TCycle(1+ValHi)),'s'];
                else
                    plotFilteredDataPhase = plot(handles.Phase, freqDerivPhasePlot,sgolayfilt(DerivPhasePlot,3,41), '-k', 'linewidth', 4 );
                    plotFilteredDataPhase.Tag = 'plotFilteredDataPhase';
                    plotFilteredDataPhase.DisplayName = ['Phase-Period:', num2str(handles.TCycle(1+ValLo)),...
                        '-',num2str(handles.TCycle(1+ValHi)),'s'];
                end
                plotFilteredDataPhase.Visible = 'off';
                plotFilteredDataPhase.Selected = 'off';
                plotFilteredDataPhase.PickableParts = 'all';
                plotFilteredDataPhase.HitTest = 'on';
                plotFilteredDataPhase.UserData = [ValLo ValHi];
                Legend_PhaseFilteredData{1} = plotFilteredDataPhase.DisplayName;
                plotFilteredDataPhase.Annotation.LegendInformation.IconDisplayStyle = 'on';
                PlottedCurves.plotFilteredDataPhase = plotFilteredDataPhase;
                assignin('base', 'PlottedCurves', PlottedCurves);
                hold(handles.Phase, 'off');
            else
                if get(handles.DisplayRawData, 'Value')==1 & ExistAmpPlot ==1
                    hold(handles.Phase,'on');
                    hold(AX(1),'on');
                    hold(AX(2),'on');
                else
                    hold(handles.Phase,'on');
                end
                if get(handles.DisplayDerivPhaseOffset, 'Value')==1
                    [AXfilt,H1filt,H2filt] = plotyy(handles.Phase, freqZplot,...
                        sgolayfilt(PhasePlot,10,41), freqDerivPhasePlot,sgolayfilt(DerivPhasePlot-MeanDerivPhasePlot,3,41));
                    AXfilt(2).YColor = 'blue';
                    AXfilt(2).YLimMode = 'manual';
                    AXfilt(2).YLim = [yminDerivPhase-MeanDerivPhasePlot ymaxDerivPhase-MeanDerivPhasePlot];
                    AXfilt(2).XLim = [xmin xmax];
                    H2filt.Tag = 'plotFilteredDataPhaseOffset';
                else
                    [AXfilt,H1filt,H2filt] = plotyy(handles.Phase, freqZplot,...
                        sgolayfilt(PhasePlot,10,41), freqDerivPhasePlot,sgolayfilt(DerivPhasePlot,3,41));
                    AXfilt(2).YColor = 'blue';
                    AXfilt(2).YLimMode = 'manual';
                    AXfilt(2).YLim = [yminDerivPhase ymaxDerivPhase];
                    AXfilt(2).XLim = [xmin xmax];
                    H2filt.Tag = 'plotFilteredDataPhase';
                end
                H1filt.Color = 'black';
                H1filt.LineWidth = 4;
                AXfilt(1).YColor = 'black';
                AXfilt(1).YLimMode = 'manual';
                AXfilt(1).YLim = [yminPhase ymaxPhase];
                AXfilt(1).XLim = [xmin xmax];
                H2filt.Color = 'blue';
                H2filt.LineWidth = 4;
                %             linkaxes([handles.Spectre,AX(1)],'x');
                %             linkaxes([handles.Spectre,AX(2)],'x');
                H2filt.Visible = 'on';
                H2filt.Selected = 'off';
                H2filt.PickableParts = 'all';
                H2filt.HitTest = 'on';
                H2filt.UserData = [ValLo ValHi];
                plotFilteredDataPhase = H2filt;
                PlottedCurves.plotFilteredDataPhase = plotFilteredDataPhase;
                assignin('base', 'PlottedCurves', PlottedCurves);
                hold(handles.Phase, 'off');
                hold(AXfilt(1),'off');
                hold(AXfilt(2),'off');
            end
        else
            if get(handles.DisplayDerivUnwrapPhase, 'Value')==1
                hold(handles.Phase,'on');
                if get(handles.DisplayDerivPhaseOffset, 'Value')==1
                    plotFilteredDataPhase = plot(handles.Phase, freqDerivPhasePlot,...
                        sgolayfilt(DerivPhasePlot-MeanDerivPhasePlot,3,41), '-k', 'linewidth', 4 );
                    plotFilteredDataPhase.Tag = 'plotFilteredDataPhaseOffset';
                    plotFilteredDataPhase.DisplayName = ['OffsetDerivPhase-Period:', num2str(handles.TCycle(1+ValLo)),...
                        '-',num2str(handles.TCycle(1+ValHi)),'s'];
                else
                    plotFilteredDataPhase = plot(handles.Phase, freqDerivPhasePlot,sgolayfilt(DerivPhasePlot,3,41), '-k', 'linewidth', 4 );
                    plotFilteredDataPhase.Tag = 'plotFilteredDataPhase';
                    plotFilteredDataPhase.DisplayName = ['DerivPhase-Period:', num2str(handles.TCycle(1+ValLo)),...
                        '-',num2str(handles.TCycle(1+ValHi)),'s'];
                end
                plotFilteredDataPhase.Visible = 'on';
                plotFilteredDataPhase.Selected = 'off';
                plotFilteredDataPhase.PickableParts = 'all';
                plotFilteredDataPhase.HitTest = 'on';
                plotFilteredDataPhase.UserData = [ValLo ValHi];
                Legend_DerivPhaseFilteredData{1} = plotFilteredDataPhase.DisplayName;
                plotFilteredDataPhase.Annotation.LegendInformation.IconDisplayStyle = 'on';
                PlottedCurves.plotFilteredDataPhase = plotFilteredDataPhase;
                assignin('base', 'PlottedCurves', PlottedCurves);
                hold(handles.Phase, 'off');
            else
                %             plot(handles.Phase, [xmin xmax], [0 0], 'w');
                hold(handles.Phase,'on');
                if get(handles.DisplayDerivPhaseOffset, 'Value')==1
                    plotFilteredDataPhase = plot(handles.Phase, freqDerivPhasePlot,...
                        sgolayfilt(DerivPhasePlot-MeanDerivPhasePlot,3,41), '-k', 'linewidth', 4 );
                    plotFilteredDataPhase.Tag = 'plotFilteredDataPhaseOffset';
                else
                    plotFilteredDataPhase = plot(handles.Phase, freqDerivPhasePlot,sgolayfilt(DerivPhasePlot,3,41), '-k', 'linewidth', 4 );
                    plotFilteredDataPhase.Tag = 'plotFilteredDataPhase';
                end
                plotFilteredDataPhase.Visible = 'off';
                plotFilteredDataPhase.Selected = 'off';
                plotFilteredDataPhase.PickableParts = 'all';
                plotFilteredDataPhase.HitTest = 'on';
                plotFilteredDataPhase.UserData = [ValLo ValHi];
                PlottedCurves.plotFilteredDataPhase = plotFilteredDataPhase;
                assignin('base', 'PlottedCurves', PlottedCurves);
                hold(handles.Phase, 'off');
                hold(handles.Spectre, 'off');
            end
        end
        
    end
    set(handles.Phase, 'XTickLabel', '');
    %%%%%%%%%%%%%%%%%%%%%%%%
    %%%%%debut filtrage harmoniques %%%%%%
    
    locs = [];
    if ExistAmpPlot ==1
        %         display('avant IF');
        if max(AmpPlot)>10
            
            [pks1,locs1,w1,p1] = findpeaks(AmpPlot-MeanAmpPlot,...
                'NPeaks',6,'MinPeakProminence',1/4*max(AmpPlot-MeanAmpPlot),  'WidthReference','halfprom','MinPeakDistance', floor(65/handles.df))
            testLOCS= handles.FreqLo + (locs1-1)*handles.df
            testW= w1*handles.df
            locs = [];
            w = [];
            p=[];
            for ij=1:length(pks1)
                if w1(ij)*handles.df< 50
                    if locs1(ij)-floor(65/handles.df)>=1 & locs1(ij)+floor(65/handles.df)<=length(AmpPlot)
                        [pks2,locs2,w2,p2] = findpeaks(medfilt1(sgolayfilt(AmpPlot(locs1(ij)-floor(65/handles.df):locs1(ij)+floor(65/handles.df))-MeanAmpPlot,3,9),5),...
                            freqZplot(locs1(ij)-floor(65/handles.df):locs1(ij)+floor(65/handles.df)),'WidthReference','halfprom');
                    elseif locs1(ij)-floor(65/handles.df)<1
                        [pks2,locs2,w2,p2] = findpeaks(medfilt1(sgolayfilt(AmpPlot(1:locs1(ij)+floor(65/handles.df))-MeanAmpPlot,3,9),5),...
                            freqZplot(1:locs1(ij)+floor(65/handles.df)),'WidthReference','halfprom');
                    elseif locs1(ij)+floor(65/handles.df)>length(AmpPlot)
                        [pks2,locs2,w2,p2] = findpeaks(medfilt1(sgolayfilt(AmpPlot(locs1(ij)-floor(65/handles.df):end)-MeanAmpPlot,3,9),5),...
                            freqZplot(locs1(ij)-floor(65/handles.df):end),'WidthReference','halfprom');
                    end
                    if length(locs2)>=1
                        [~,indLocs] = min(abs(locs2- (handles.FreqLo+(locs1(ij)-1)*handles.df*ones(size(locs2)))))
                        locs = [locs, locs2(indLocs)];
                        w = [w, w2(indLocs)];
                        p=[p,p2(indLocs)];
                    end
                end
            end
            %             locs
            %             w
            %         [pksPH,locsPH,wPH,pPH] = findpeaks(medfilt1(sgolayfilt(derY-MeanderY,3,9),5),freqZ,...
            %             'NPeaks',6,'MinPeakDistance', 65,  'WidthReference','halfprom');
            %             locs
            %             w
            plage=ValHarmonicWidth;
            w= 1.5*w;
            if length(find(w<plage))~=0 || length(find(p>50))~=0
                %                 display('apres IF')
                IsSinging =1;
                %             if length(locs)>1
                %                 locsNEW = locs(1);
                %                 wNEW = w(1);
                %                 k=2;
                %                 indexI = 0;
                %                 while k+indexI<=length(locs)
                %     %                 %display('====')
                %                     while locs(k+indexI)<0.98*k*locs(1)
                %                         %                     %display('////')
                %                         if k+indexI +1 <=length(locs)
                %     %                         %display('#')
                %                             indexI=indexI+1;
                %                         else
                %     %                         %display('%')
                %                             locsNEW=[locsNEW,locs(k+indexI)];
                %                             wNEW = [wNEW,w(k+indexI)];
                %                             indexI=0;
                %                             break
                %                         end
                %                     end
                %                     if locs(k+indexI)~=locsNEW(end)
                %                         locsNEW=[locsNEW,locs(k+indexI)];
                %                         wNEW = [wNEW,w(k+indexI)];
                %                     end
                %                     k=k+1;
                %                     indexI=0;
                %                 end
                %                 locs = locsNEW;
                %                 w = wNEW;
                %             end
                
                
                indH1 = 1;
                Zfilt = medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,9),5);
                %             Yfilt = medfilt1(sgolayfilt(derY-MeanderY,3,41),5)
                plage=ValHarmonicWidth;
                
                
                
                Nplage = ceil(plage/(2*handles.df));
                
                
                % if length(locs)>10
                %     locs = locs(1:10);
                %     w = w(1:10);
                % end
                % locs = (H1:H1:length(locs)*H1)
                if mod(Nplage,2)==0
                    Nplage=Nplage-1;
                end
                for k=1:length(locs)
                    [~,ind] = min(abs(freqZplot-locs(k)));
                    indW = ceil(w(k)/(2*handles.df));
                    if mod(indW,2)==0
                        indW=indW-1;
                    end
                    if indW<=0
                        indW=1;
                    end
                    if ind>Nplage & ind < length(AmpPlot)-Nplage
                        if indW<Nplage
                            if 3 <=Nplage-indW-3
                                degree =3;
                            else
                                degree = Nplage-indW-3;
                            end
                            %                         %display('*-+-*')
                            part1 = medfilt1(sgolayfilt(AmpPlot(ind-Nplage:ind-indW)-MeanAmpPlot,degree,Nplage-indW-1),Nplage-indW-1);
                            part3 = medfilt1(sgolayfilt(AmpPlot(ind+indW+1:ind+Nplage)-MeanAmpPlot,degree,Nplage-indW-1),Nplage-indW-1);
                            Zfilt(ind-Nplage:ind+Nplage) = [part1; linspace(part1(end), part3(1),2*indW)';part3];
                            %             partY1 = medfilt1(derY(ind-Nplage:ind-indW)-MeanderY,Nplage-indW-1);
                            %             partY3 = medfilt1(derY(ind+indW+1:ind+Nplage)-MeanderY,Nplage-indW-1);
                            %             Yfilt(ind-Nplage:ind+Nplage) = [part1; linspace(partY1(end), partY3(1),2*indW)';part3];
                            %                         Yfilt(ind-Nplage:ind+Nplage) = linspace(Yfilt(ind-Nplage), Yfilt(ind+Nplage), 2*Nplage+1);
                        else
                            if 3 <=Nplage-2
                                degree =3;
                            else
                                degree = Nplage-2;
                            end
                            Zfilt(ind-Nplage:ind+Nplage) = [medfilt1(sgolayfilt(AmpPlot(ind-Nplage:ind)-MeanAmpPlot,degree,Nplage),Nplage);...
                                medfilt1(sgolayfilt(AmpPlot(ind+1:ind+Nplage)-MeanAmpPlot,degree,Nplage),Nplage)];
                            %             Yfilt(ind-Nplage:ind+Nplage) = [medfilt1(sgolayfilt(derY(ind-Nplage:ind)-MeanderY,1,Nplage),Nplage);...
                            %                medfilt1(sgolayfilt(derY(ind+1:ind+Nplage)-MeanderY,1,Nplage),Nplage)];
                            %                         Yfilt(ind-Nplage:ind+Nplage) = linspace(Yfilt(ind-Nplage), Yfilt(ind+Nplage), 2*Nplage+1);
                        end
                    elseif ind>Nplage & ind>= length(AmpPlot)-Nplage
                        Zfilt(ind-Nplage:end) = medfilt1(sgolayfilt(AmpPlot(ind-Nplage:end)-MeanAmpPlot,3,Nplage),Nplage);
                        %         Yfilt(ind-Nplage:end) = medfilt1(sgolayfilt(derY(ind-Nplage:end)-MeanderY,1,Nplage),Nplage);
                        %                     Yfilt(ind-Nplage:end) = linspace(Yfilt(ind-Nplage), Yfilt(end), length(Yfilt)-ind+Nplage+1);
                    elseif ind<=Nplage & ind<length(AmpPlot)-Nplage
                        Zfilt(1:ind+Nplage) = medfilt1(sgolayfilt(AmpPlot(1:ind+Nplage)-MeanAmpPlot,3,Nplage),Nplage);
                        %         Yfilt(1:ind+Nplage) = medfilt1(sgolayfilt(derY(1:ind+Nplage)-MeanderY,1,Nplage),Nplage);
                        %                     Yfilt(1:ind+Nplage) = linspace(Yfilt(1), Yfilt(ind+Nplage), ind+Nplage)
                    end
                end
                Zfilt = medfilt1(sgolayfilt(Zfilt,7,21),7);
                
                %             plagePH = 250;
                %             NplagePH = ceil(plagePH/(2*handles.df));
                %             if mod(NplagePH,2)==0
                %                 NplagePH=NplagePH-1;
                %             end
                %             for k=1:length(locsPH)
                %                 [~,ind] = min(abs(freqZplot-locsPH(k)));
                %                 indW = ceil(wPH(k)/(2*handles.df));
                %                 if mod(indW,2)==0
                %                     indW=indW-1;
                %                 end
                %                 if indW<=0
                %                     indW=1;
                %                 end
                %                 if ind>NplagePH & ind < length(Yfilt)-NplagePH
                %                         Yfilt(ind-NplagePH:ind+NplagePH) = linspace(Yfilt(ind-NplagePH), Yfilt(ind+NplagePH), 2*NplagePH+1);
                %                 elseif ind>NplagePH & ind>= length(Yfilt)-NplagePH
                %                     Yfilt(ind-NplagePH:end) = linspace(Yfilt(ind-NplagePH), Yfilt(end), length(Yfilt)-ind+NplagePH+1);
                %                 elseif ind<=NplagePH & ind<length(Yfilt)-NplagePH
                %                     Yfilt(1:ind+NplagePH) = linspace(Yfilt(1), Yfilt(ind+NplagePH), ind+NplagePH);
                %                 end
                %             end
                %             Yfilt = medfilt1(sgolayfilt(Yfilt,2,21),7);
                
            else
                Zfilt = medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,9),5);
                %             Yfilt = derY - MeanderY;
                IsSinging =0;
                pks=[];
                locs=[];
                w=[];
                p=[];
            end
        else
            Zfilt = medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,9),5);
            %         Yfilt = derY - MeanderY;
            IsSinging =0;
            pks=[];
            locs=[];
            w=[];
            p=[];
        end
    end
    
    Rnew = [];
    if ExistAmpPlot ==1 & IsPlaying ==1
        DiffStep = 12;
        DiffAmp = ValRAmp;
        Zfilt = medfilt1(sgolayfilt(Zfilt,3,41),9);
        indiceTEST = find(abs(Zfilt(1:end-(DiffStep-1))-Zfilt(DiffStep:end))>DiffAmp);
        TEST = freqZplot(find(abs(Zfilt(1:end-(DiffStep-1))-Zfilt(DiffStep:end))>DiffAmp));
        Ztest = Zfilt(find(abs(Zfilt(1:end-(DiffStep-1))-Zfilt(DiffStep:end))>DiffAmp));
        R=[];
        
        
        if length(TEST)>0
            R(1,1)=TEST(1);
            IND = [];
            IND(1,1) = indiceTEST(1);
            line = 2;
            column = 1;
            for jj=2:length(TEST)
                if TEST(jj)-TEST(jj-1)>3*handles.df %& Ztest(jj)<Ztest(jj-1)
                    R(line,column)=TEST(jj-1);
                    IND(line,column) = indiceTEST(jj-1);
                    if line==2
                        line=1;
                    else
                        line= 2;
                    end
                    column = column+1;
                    R(line,column)=TEST(jj);
                    IND(line,column) = indiceTEST(jj);
                    if line==2
                        line=1;
                    else
                        line= 2;
                    end
                end
            end
            Rnew = [];
            if size(R,1)*size(R,2)>1 & R(2,end)~=0
                for kk=1:size(IND,2)
                    if Zfilt(IND(2,kk))<Zfilt(IND(1,kk))
                        %                 Rnew = [Rnew, [R(1,kk);R(2,kk)]];
                        [~,indMAX] = max(Zfilt(IND(1,kk):IND(2,kk)));
                        indMAX = IND(1,kk)+indMAX-1;
                        if Zfilt(IND(2,kk))~= min(Zfilt(IND(1,kk):IND(2,kk)));
                            [~,indMIN] = min(Zfilt(IND(1,kk):IND(2,kk)));
                            indMIN = IND(1,kk)+indMIN-1;
                            Rnew = [Rnew, [freqZ(indMAX);freqZ(indMIN)]];
                        else
                            Rnew = [Rnew, [freqZ(indMAX);R(2,kk)]];
                        end
                    end
                end
            else
                for kk=1:size(IND,2)-1
                    if Zfilt(IND(2,kk))<Zfilt(IND(1,kk))
                        %                 Rnew = [Rnew, [R(1,kk);R(2,kk)]];
                        [~,indMAX] = max(Zfilt(IND(1,kk):IND(2,kk)));
                        indMAX = IND(1,kk)+indMAX-1;
                        if Zfilt(IND(2,kk))~= min(Zfilt(IND(1,kk):IND(2,kk)));
                            [~,indMIN] = min(Zfilt(IND(1,kk):IND(2,kk)));
                            indMIN = IND(1,kk)+indMIN-1;
                            Rnew = [Rnew, [freqZplot(indMAX);freqZplot(indMIN)]];
                        else
                            Rnew = [Rnew, [freqZplot(indMAX);R(2,kk)]];
                        end
                    end
                end
                [~,indMIN] = min(Zfilt(IND(1,end):end));
                indMIN = IND(1,end)+indMIN-1;
                [~,indMAX] = max(Zfilt(IND(1,end):indMIN));
                indMAX = IND(1,end)+indMAX-1;
                if Zfilt(indMIN)<Zfilt(indMAX)
                    Rnew = [Rnew, [freqZplot(indMAX);freqZplot(indMIN)]];
                end
                %         Rnew = [Rnew, [R(1,end);R(1,end)]];
            end
        end
    end
    
    % Rnew
    
    frequence2position(locs,Rnew,handles.Analyse);
    hold(handles.AxesAnalyse,'off');
    %     locs
    frequence2positionHORIZONTAL(locs,Rnew,handles);
    
    if get(handles.DisplayDeleteHarmonics, 'Value')==1 & ExistAmpPlot ==1
        hold(handles.Spectre,'on');
        if get(handles.DisplayOffset, 'Value')==1
            plot(handles.Spectre, freqZplot, Zfilt, 'r','linewidth', 4);
        else
            plot(handles.Spectre, freqZplot, Zfilt + MeanAmpPlot, 'r','linewidth', 4);
        end
    end
    set(handles.Phase, 'XTickLabel', '');
    
    if ExistAmpPlot ==1 & get(handles.DisplayRawData, 'Value')==1 & get(handles.DisplayFilteredData, 'Value')==1
        plotRawData.ButtonDownFcn = {@lineCallback_plotRawData, handles, PlottedCurves};
        plotRawDataPhase.ButtonDownFcn = {@lineCallback_plotRawDataPhase, handles, PlottedCurves};
        plotFilteredData.ButtonDownFcn = {@lineCallback_plotFilteredData, handles, PlottedCurves};
        plotFilteredDataPhase.ButtonDownFcn = {@lineCallback_plotFilteredDataPhase, handles, PlottedCurves};
    elseif ExistAmpPlot ==1 & get(handles.DisplayRawData, 'Value')==1 & get(handles.DisplayFilteredData, 'Value')==0
        plotRawData.ButtonDownFcn = {@lineCallback_plotRawData, handles, PlottedCurves};
        plotRawDataPhase.ButtonDownFcn = {@lineCallback_plotRawDataPhase, handles, PlottedCurves};
    elseif ExistAmpPlot ==1 & get(handles.DisplayRawData, 'Value')==0 & get(handles.DisplayFilteredData, 'Value')==1
        plotFilteredData.ButtonDownFcn = {@lineCallback_plotFilteredData, handles, PlottedCurves};
        plotFilteredDataPhase.ButtonDownFcn = {@lineCallback_plotFilteredDataPhase, handles, PlottedCurves};
    end
    set(handles.Phase, 'XTickLabel', '');
    
    Is_SavedCurve_Checked;
    YLimSavedCurves = [];
    var = find(Is_SavedCurve_Checked);
    if ExistAmpPlot ==1 & get(handles.DisplayOffset, 'Value')==1
        YLimSavedCurves = [yminSpectre-MeanAmpPlot ymaxSpectre-MeanAmpPlot];
    elseif ExistAmpPlot ==1 & get(handles.DisplayOffset, 'Value')==0
        YLimSavedCurves = [yminSpectre ymaxSpectre];
    end
    if length(var)>0
        for aa=1:length(var)
            ind = var(aa);
            test = Is_SavedCurve_Checked(ind);
            if Is_SavedCurve_Checked(ind)<0
                NewLim = [min(SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.DataSpectre(:,2))...
                    max(SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.DataSpectre(:,2))]
                if length(YLimSavedCurves)~=0
                    YLimSavedCurves=[min(YLimSavedCurves(1), NewLim(1)) max(YLimSavedCurves(2), NewLim(2))]
                else
                    YLimSavedCurves = NewLim;
                end
            else
                NewLim = [min(SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.DataSpectre(:,2))...
                    max(SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.DataSpectre(:,2))]
                if length(YLimSavedCurves)~=0
                    YLimSavedCurves=[min(YLimSavedCurves(1), NewLim(1)) max(YLimSavedCurves(2), NewLim(2))]
                else
                    YLimSavedCurves = NewLim;
                end
            end
        end
    end
    
    if length(var)>0
        Legend_SavedSpectre = {};
        Legend_SavedSpectre = {};
        Legend_SavedDerivPhase = {};
        Legend_SavedDerivPhase = {};
        for uu=1:length(find(Is_SavedCurve_Checked))
            ind = var(uu)
            if Is_SavedCurve_Checked(ind)<0
                hold(handles.Spectre, 'on');
                pSpectreRawData = plot(handles.Spectre, SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.DataSpectre(:,1), SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.DataSpectre(:,2),...
                    'color', Colors{SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.IndColor}, 'linewidth', 1);
                pSpectreRawData.DisplayName = ['Magnitude-Period:', num2str(handles.TCycle(1+SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.SliderVal(1))),...
                    '-',num2str(handles.TCycle(1+SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.SliderVal(2))),'s'];
                Legend_SavedSpectre{length(Legend_SavedSpectre)+1} = pSpectreRawData.DisplayName;
                Legend_SavedDerivPhase{length(Legend_SavedDerivPhase)+1} = ['DerivPhase',pSpectreRawData.DisplayName(10:end)];
                pSpectreRawData.Annotation.LegendInformation.IconDisplayStyle = 'on';
                YLimSavedCurveUU = [min(SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.DataSpectre(:,2))...
                    max(SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.DataSpectre(:,2))];
                YLimSavedCurves = [min(YLimSavedCurves(1),YLimSavedCurveUU(1)) max(YLimSavedCurves(2),YLimSavedCurveUU(2))];
                hold(handles.Phase, 'on');
                pPhaseRawData = plot(handles.Phase, SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.DataPhase(:,1), SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.DataPhase(:,2),...
                    'color', Colors{SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.IndColor}, 'linewidth', 1);
                pPhaseRawData.DisplayName = ['DerivPhase-Period:', num2str(handles.TCycle(1+SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.SliderVal(1))),...
                    '-',num2str(handles.TCycle(1+SavedCurves.plotRawData{-Is_SavedCurve_Checked(ind)}.SliderVal(2))),'s'];
                pPhaseRawData.Annotation.LegendInformation.IconDisplayStyle = 'on';
                %                 Legend_SavedDerivPhaseRawData{length(Legend_SavedDerivPhaseRawData)+1} = pPhaseRawData.DisplayName;
                %                 Legend_SavedSpectreRawData{length(Legend_SavedSpectreRawData)+1} = ['Magnitude', pPhaseRawData.DisplayName(11:end)];
            else
                hold(handles.Spectre, 'on');
                pSpectreFilteredData = plot(handles.Spectre, SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.DataSpectre(:,1), SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.DataSpectre(:,2),...
                    'color', Colors{SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.IndColor}, 'linewidth', 3);
                pSpectreFilteredData.DisplayName = ['Magnitude-Period:', num2str(handles.TCycle(1+SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.SliderVal(1))),...
                    '-',num2str(handles.TCycle(1+SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.SliderVal(2))),'s'];
                pSpectreFilteredData.Annotation.LegendInformation.IconDisplayStyle = 'on';
                Legend_SavedSpectre{length(Legend_SavedSpectre)+1} = pSpectreFilteredData.DisplayName;
                Legend_SavedDerivPhase{length(Legend_SavedDerivPhase)+1} = ['DerivPhase',pSpectreFilteredData.DisplayName(10:end)];
                
                hold(handles.Phase, 'on');
                pPhaseFilteredData = plot(handles.Phase, SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.DataPhase(:,1), SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.DataPhase(:,2),...
                    'color', Colors{SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.IndColor}, 'linewidth', 3);
                pPhaseFilteredData.DisplayName = ['DerivPhase-Period:', num2str(handles.TCycle(1+SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.SliderVal(1))),...
                    '-',num2str(handles.TCycle(1+SavedCurves.plotFilteredData{Is_SavedCurve_Checked(ind)}.SliderVal(2))),'s'];
                pPhaseFilteredData.Annotation.LegendInformation.IconDisplayStyle = 'on';
                %                 Legend_SavedDerivPhaseFilteredData{length(Legend_SavedDerivPhaseFilteredData)+1} = pPhaseFilteredData.DisplayName;
                %                 Legend_SavedSpectreFilteredData{length(Legend_SavedSpectreFilteredData)+1} = ['Magnitude', pPhaseFilteredData.DisplayName(11:end)];
            end
        end
    end
    
    
    %plot periode en couleur dans audio
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            p = plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9*handles.Audio.YLim(2),...
                0.9*handles.Audio.YLim(2)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            p.DisplayName = ['Period:', num2str(handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1))),...
                '-',num2str(handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))),'s'];
            p.Annotation.LegendInformation.IconDisplayStyle = 'on';
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            p = plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9*handles.Audio.YLim(2),...
                0.9*handles.Audio.YLim(2)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            p.DisplayName = ['Period:', num2str(handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1))),...
                '-',num2str(handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))),'s'];
            p.Annotation.LegendInformation.IconDisplayStyle = 'on';
            hold(handles.Audio, 'off');
        end
    end
    
    if (ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==1 & get(handles.DisplayDerivUnwrapPhase, 'Value')==0)
        handles.Phase.YLim = [yminPhase ymaxPhase];
    elseif (ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==0 & get(handles.DisplayDerivUnwrapPhase, 'Value')==1)
        if get(handles.DisplayDerivPhaseOffset, 'Value')==1
            handles.Phase.YLim = [yminDerivPhase-MeanDerivPhasePlot ymaxDerivPhase-MeanDerivPhasePlot];
        else
            handles.Phase.YLim = [yminDerivPhase ymaxDerivPhase];
        end
    end
    
    
    
    % if get(handles.DisplayMean, 'Value') ==1
    %     AbsZ_Mean = 20*log10(mean(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
    %         repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)),2));
    %     plot(freqZplot, AbsZ_Mean - mean(AbsZ_Mean),'color',[204 85 0]/255,'linewidth', 3 );
    % end
    
    %     if isequal([varRawData varFilteredData varAllCurves],[1 1 1])==1
    %         legend({'20log(|mean(Z/Z_{ref})|)', 'filtred 20log(mean(|Z/Z_{ref}|))', '20log(|Z_i/Z_{ref}|)' },'FontSize', 11);
    %     elseif isequal([varRawData varFilteredData varAllCurves],[1 1 0])==1
    %         legend({'20log(|mean(Z/Z_{ref})|)', 'filtred 20log(mean(|Z/Z_{ref}|))' },'FontSize', 11);
    %     elseif isequal([varRawData varFilteredData varAllCurves],[1 0 0])==1
    %         legend({'20log(|mean(Z/Z_{ref})|)'},'FontSize', 11);
    %     elseif isequal([varRawData varFilteredData varAllCurves],[1 0 1])==1
    %         legend({'20log(|mean(Z/Z_{ref})|)', '20log(|Z_i/Z_{ref}|)' },'FontSize', 11);
    %     elseif isequal([varRawData varFilteredData varAllCurves],[0 0 1])==1
    %         legend({'20log(|Z_i/Z_{ref}|)' },'FontSize', 11);
    %     elseif isequal([varRawData varFilteredData varAllCurves],[0 1 1])==1
    %         legend({ 'filtred 20log(mean(|Z/Z_{ref}|))', '20log(|Z_i/Z_{ref}|)' },'FontSize', 11);
    %     elseif isequal([varRawData varFilteredData varAllCurves],[0 1 0])==1
    %         legend({'filtred 20log(mean(|Z/Z_{ref}|))' },'FontSize', 11);
    %     end
    
    if ExistAmpPlot ==1
        %         if get(handles.DisplayOffset, 'Value')==1
        YLimSavedCurves;
        %             if PushedZoomSpectre ==0 || (PushedZoomSpectre ==1 & ((yminSpectre-MeanAmpPlot>YLim(2) || yminSpectre-MeanAmpPlot<YLim(1))...
        %                     || (ymaxSpectre-MeanAmpPlot<YLim(1) || ymaxSpectre-MeanAmpPlot>YLim(2))))
        %               if PushedZoomSpectre ==0 || (PushedZoomSpectre ==1 & ((YLimSavedCurves(1)>YLim(2) || YLimSavedCurves(1)<YLim(1))...
        %                     || (YLimSavedCurves(2)<YLim(1) || YLimSavedCurves(2)>YLim(2))))
        % %               if (YLimSavedCurves(1)>YLim(2) || YLimSavedCurves(2)<YLim(1))
        % %                   display('entre')
        % %
        % %                 XLim = [xmin xmax];
        % %                 YLim = [yminSpectre-MeanAmpPlot ymaxSpectre-MeanAmpPlot];
        %                 XLim = [xmin xmax];
        %                 YLim = [YLimSavedCurves(1) YLimSavedCurves(2)]
        %               end
        XLim = [xmin xmax];
        YLim = [YLimSavedCurves(1) YLimSavedCurves(2)];
    else
        XLim = [xmin xmax];
        if length(YLimSavedCurves)~=0
            YLim = [YLimSavedCurves(1) YLimSavedCurves(2)];
        else
            YLim = get(handles.Spectre, 'YLim');
        end
    end
    
    %         axis(handles.Phase, [xmin xmax min(yminPhase,yminDerivPhase-MeanDerivPhasePlot) max(ymaxPhase,ymaxDerivPhase-MeanDerivPhasePlot)])
    %     end
    %     if (ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==1 & get(handles.DisplayDerivUnwrapPhase, 'Value')==0)
    %         handles.Phase.YLim = [yminPhase ymaxPhase];
    %         axis(handles.Phase, [xmin xmax yminPhase ymaxPhase]);
    %         linkaxes([handles.Spectre,handles.Phase],'x');
    %     elseif (ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==0 & get(handles.DisplayDerivUnwrapPhase, 'Value')==1)
    % %         handles.Phase.YLim = [yminDerivPhase-MeanDerivPhasePlot ymaxDerivPhase-MeanDerivPhasePlot];
    %         if get(handles.DisplayDerivPhaseOffset, 'Value')==1
    %             axis(handles.Phase, [xmin xmax yminDerivPhase-MeanDerivPhasePlot ymaxDerivPhase-MeanDerivPhasePlot]);
    %         else
    %             axis(handles.Phase, [xmin xmax yminDerivPhase ymaxDerivPhase]);
    %         end
    %         linkaxes([handles.Spectre,handles.Phase],'x');
    %     elseif  ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==1 & get(handles.DisplayDerivUnwrapPhase, 'Value')==1
    %         if get(handles.DisplayRawData, 'Value')==1
    %             linkaxes([handles.Spectre,AX(1)],'x');
    %             linkaxes([handles.Spectre,AX(2)],'x');
    %         end
    %         if get(handles.DisplayFilteredData, 'Value')==1
    %             linkaxes([handles.Spectre,AXfilt(1)],'x');
    %             linkaxes([handles.Spectre,AXfilt(2)],'x');
    %         end
    %     end
    
    
    
    
    
    %     YLim = [YLimSavedCurves(1) YLimSavedCurves(2)]
    axis(handles.Spectre, [XLim, YLim]);
    
    Val = get(handles.PannelChooseDisplay, 'UserData');
    indVal = find(Val);
    if length(indVal)~=0
        for ii=1:length(indVal)
            if ExistAmpPlot ==1 & (get(handles.DisplayRawData, 'Value')==1 || get(handles.DisplayFilteredData, 'Value')==1)
                hold(handles.Spectre, 'on');
                plot(handles.Spectre, [Val(indVal(ii)),Val(indVal(ii))], YLim, '-y', 'linewidth', 3);
                if  ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==1 & get(handles.DisplayDerivUnwrapPhase, 'Value')==1
                    hold(handles.Phase,'on');
                    if get(handles.DisplayRawData, 'Value')==1
                        hold(AX(1),'on');
                        hold(AX(2),'on');
                    end
                    if get(handles.DisplayFilteredData, 'Value')==1
                        hold(AXfilt(1),'on');
                        hold(AXfilt(2),'on');
                    end
                    %                 plot(handles.Phase, [Val(ii),Val(ii)], [min(yminPhase, yminDerivPhase-MeanDerivPhasePlot) max(ymaxPhase, ymaxDerivPhase-MeanDerivPhasePlot)] , '-y', 'linewidth', 3);
                    plot(handles.Phase, [Val(indVal(ii)),Val(indVal(ii))], handles.Phase.YLim , '-y', 'linewidth', 3);
                    %         [min(min(PhasePlot),min(DerivPhasePlot)) max(max(PhasePlot),max(DerivPhasePlot))]
                elseif ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==1 & get(handles.DisplayDerivUnwrapPhase, 'Value')==0
                    hold(handles.Phase,'on');
                    %                 plot(handles.Phase, [Val(ii),Val(ii)], [yminPhase ymaxPhase] , '-y', 'linewidth', 3);
                    plot(handles.Phase, [Val(indVal(ii)),Val(indVal(ii))], handles.Phase.YLim , '-y', 'linewidth', 3);
                elseif ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==0 & get(handles.DisplayDerivUnwrapPhase, 'Value')==1
                    hold(handles.Phase,'on');
                    %                 plot(handles.Phase, [Val(ii),Val(ii)], [yminDerivPhase-MeanDerivPhasePlot ymaxDerivPhase-MeanDerivPhasePlot] , '-y', 'linewidth', 3);
                    plot(handles.Phase, [Val(indVal(ii)),Val(indVal(ii))], handles.Phase.YLim , '-y', 'linewidth', 3);
                end
            elseif length(find(Is_SavedCurve_Checked))>=1
                hold(handles.Phase,'on');
                %                 handles.Phase.YLim
                %                 plot(handles.Phase, [Val(ii),Val(ii)], [min(yminPhase, yminDerivPhase-MeanDerivPhasePlot) max(ymaxPhase, ymaxDerivPhase-MeanDerivPhasePlot)], '-y', 'linewidth', 3);
                plot(handles.Phase, [Val(indVal(ii)),Val(indVal(ii))], handles.Phase.YLim, '-y', 'linewidth', 3);
                hold(handles.Spectre, 'on');
                plot(handles.Spectre, [Val(indVal(ii)),Val(indVal(ii))], YLim, '-y', 'linewidth', 3);
            end
        end
    end
    set(handles.Phase, 'XTickLabel', '');
    %         if ExistAmpPlot ==1
    %         if get(handles.DisplayOffset, 'Value')==1
    %             if PushedZoomSpectre ==0
    %                 axis(handles.Spectre, [xmin xmax yminSpectre-MeanAmpPlot ymaxSpectre-MeanAmpPlot]);
    %                 XLim = [xmin xmax];
    %                 YLim = [yminSpectre-MeanAmpPlot ymaxSpectre-MeanAmpPlot];
    %             else
    %                 axis(handles.Spectre, [XLim, YLim]);
    %             end
    %         else
    %             if PushedZoomSpectre ==0
    %                 axis(handles.Spectre, [xmin xmax yminSpectre ymaxSpectre]);
    %                 XLim = [xmin xmax];
    %                 YLim = [yminSpectre ymaxSpectre];
    %             else
    %                 axis(handles.Spectre, [XLim, YLim]);
    %             end
    %         end
    % %         axis(handles.Phase, [xmin xmax min(yminPhase,yminDerivPhase-MeanDerivPhasePlot) max(ymaxPhase,ymaxDerivPhase-MeanDerivPhasePlot)])
    %     end
    if (ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==1 & get(handles.DisplayDerivUnwrapPhase, 'Value')==0)
        handles.Phase.YLim = [yminPhase ymaxPhase];
        axis(handles.Phase, [xmin xmax yminPhase ymaxPhase]);
        linkaxes([handles.Spectre,handles.Phase],'x');
    elseif (ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==0 & get(handles.DisplayDerivUnwrapPhase, 'Value')==1)
        %         handles.Phase.YLim = [yminDerivPhase-MeanDerivPhasePlot ymaxDerivPhase-MeanDerivPhasePlot];
        if get(handles.DisplayDerivPhaseOffset, 'Value')==1
            axis(handles.Phase, [xmin xmax yminDerivPhase-MeanDerivPhasePlot ymaxDerivPhase-MeanDerivPhasePlot]);
        else
            axis(handles.Phase, [xmin xmax yminDerivPhase ymaxDerivPhase]);
        end
        linkaxes([handles.Spectre,handles.Phase],'x');
    elseif  ExistAmpPlot ==1 & get(handles.DisplayUnwrapPhase, 'Value')==1 & get(handles.DisplayDerivUnwrapPhase, 'Value')==1
        if get(handles.DisplayRawData, 'Value')==1
            linkaxes([handles.Spectre,AX(1)],'x');
            linkaxes([handles.Spectre,AX(2)],'x');
        end
        if get(handles.DisplayFilteredData, 'Value')==1
            linkaxes([handles.Spectre,AXfilt(1)],'x');
            linkaxes([handles.Spectre,AXfilt(2)],'x');
        end
    end
    
    %pour la legende pour export vers .fig a retraiter
    if length(find(Is_SavedCurve_Checked))<=0
        lgdSpectre = [Legend_SpectreRawData, Legend_SpectreAllCurves, Legend_SpectreFilteredData];
        LGDSpectre = legend(handles.Spectre,lgdSpectre);
        lgdPhase = [Legend_PhaseRawData, Legend_DerivPhaseRawData, Legend_PhaseAllCurves,...
            Legend_DerivPhaseAllCurves, Legend_PhaseFilteredData, Legend_DerivPhaseFilteredData];
        LGDPhase = legend(handles.Phase,lgdPhase);
        legend(handles.Spectre, 'hide')
        legend(handles.Phase, 'hide')
    else
        if get(handles.DisplayRawData, 'Value')==1
            lgdSpectre = [Legend_SpectreRawData, Legend_SpectreAllCurves,Legend_SpectreFilteredData, Legend_SavedSpectre];
            LGDSpectre = legend(handles.Spectre,lgdSpectre);
            lgdPhase = [Legend_PhaseRawData,Legend_DerivPhaseRawData,Legend_PhaseAllCurves,...
                Legend_DerivPhaseAllCurves,Legend_PhaseFilteredData, Legend_DerivPhaseFilteredData, Legend_SavedDerivPhase];
            LGDPhase = legend(handles.Phase,lgdPhase);
        else
            lgdSpectre = [Legend_SpectreAllCurves,Legend_SpectreFilteredData,Legend_SavedSpectre];
            LGDSpectre = legend(handles.Spectre,lgdSpectre);
            lgdPhase = [Legend_PhaseAllCurves,Legend_DerivPhaseAllCurves,Legend_PhaseFilteredData,...
                Legend_DerivPhaseFilteredData,Legend_SavedDerivPhase];
            LGDPhase = legend(handles.Phase,lgdPhase);
        end
        legend(handles.Spectre, 'hide')
        legend(handles.Phase, 'hide')
    end
    hold(handles.Spectre, 'off');
    hold(handles.Phase, 'off');
end

%     hSpectre = zoom(handles.Spectre);
%     set(hSpectre,'ActionPostCallback',{@ZoomCallbackSpectre, handles})
%     set(hSpectre, 'Enable', 'off');

%     h = zoom();
%     set(h, 'Enable', 'off');
%     setAxesZoomMotion(h,handles.Audio,'horizontal');

colorAxesClefs = [238 238 238]/255;
set(handles.AxesAnalyse, 'Color',colorAxesClefs);
set(handles.AxesAnalyse, 'AmbientLightColor', colorAxesClefs);
set(handles.AxesAnalyse, 'GridColor', colorAxesClefs);
set(handles.AxesAnalyse, 'MinorGridColor', colorAxesClefs);
set(handles.AxesAnalyse, 'XColor', colorAxesClefs);
set(handles.AxesAnalyse, 'XTickLabel', '');
set(handles.AxesAnalyse, 'YColor', colorAxesClefs);
set(handles.AxesAnalyse, 'ZColor', colorAxesClefs);
set(handles.Phase, 'XTickLabel', '');
%     if strcmp(handles.RecordType, 'RealTime')==1
%         set(h,'ActionPostCallback',{@ZoomCallbackRealTimeNEW, handles}) ;
%     else
%         set(h,'ActionPostCallback',{@ZoomCallbackAcuz, handles}) ;
%     end

function lineCallback_plotRawData(hObject,eventdata,handles, PlottedCurves)

global SavedCurvesNumber ColorNumber SavedplotRawDataNumber SavedCurves...
    Colors Is_SavedCurve_Checked hjRangeSlider SavedplotFilteredDataNumber


if SavedCurvesNumber<20
    plotRawData = PlottedCurves.plotRawData;
    plotRawDataPhase = PlottedCurves.plotRawDataPhase;
    if length(SavedCurves.plotRawData)~=0;
        ii=1;
        while ii <= length(SavedCurves.plotRawData)
            file_ii = SavedCurves.plotRawData{ii}
            if isequal(plotRawData.UserData(1:2), file_ii.SliderVal)==1 & strcmp([plotRawData.Tag, plotRawDataPhase.Tag],file_ii.Tag)==1
                NotIn = 0;
                ii = length(SavedCurves.plotRawData)+1;
            else
                NotIn = 1;
                ii = ii+1
            end
        end
        if NotIn == 1
            SavedCurvesNumber = SavedCurvesNumber +1;
            SavedplotRawDataNumber = SavedplotRawDataNumber +1 ;
            if length(SavedCurves.plotFilteredData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotFilteredData)
                    file_kk = SavedCurves.plotFilteredData{kk};
                    if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotFilteredData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
                if FoundSameColor == 0 & length(SavedCurves.plotRawData)~=0;
                    kk=1;
                    while kk <= length(SavedCurves.plotRawData)
                        file_kk = SavedCurves.plotRawData{kk};
                        if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                            FoundSameColor = 1;
                            kk = length(SavedCurves.plotRawData)+1;
                            IndColor = file_kk.IndColor;
                        else
                            FoundSameColor = 0;
                            kk = kk+1;
                        end
                    end
                end
                if FoundSameColor == 0
                    ColorNumber = ColorNumber +1;
                    IndColor = mod(ColorNumber, length(Colors));
                    if IndColor ==0;
                        IndColor = length(Colors);
                    end
                end
            elseif length(SavedCurves.plotRawData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotRawData)
                    file_kk = SavedCurves.plotRawData{kk};
                    if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotRawData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
                if FoundSameColor == 0
                    ColorNumber = ColorNumber +1;
                    IndColor = mod(ColorNumber, length(Colors));
                    if IndColor ==0;
                        IndColor = length(Colors);
                    end
                end
            end
            plotRawData.Color = Colors{IndColor} ;
            plotRawDataPhase.Color = Colors{IndColor};
            StructData = {plotRawData.UserData(1:2);IndColor;[plotRawData.XData',plotRawData.YData'];...
                [plotRawDataPhase.XData',plotRawDataPhase.YData']; [plotRawData.Tag,plotRawDataPhase.Tag]};
            StructName = {'SliderVal'; 'IndColor'; 'DataSpectre'; 'DataPhase'; 'Tag'};
            s = cell2struct(StructData,StructName,1);
            SavedCurves.plotRawData{SavedplotRawDataNumber} = s;
            Is_SavedCurve_Checked(SavedCurvesNumber) = -SavedplotRawDataNumber;
            Is_SavedCurve_Checked
            assignin('base', 'SavedCurves', SavedCurves);
            if SavedCurvesNumber<10
                obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
                obj2 = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
                obj3 = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
            else
                obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
                obj2 = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
                obj3 = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
            end
            set(obj, 'Visible', 'on');
            set(obj2, 'Visible', 'on');
            set(obj3, 'Visible', 'on');
            if strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawData','plotRawDataPhase'])==1
                set(obj3, 'String', '');
            elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawDataOffset','plotRawDataPhase'])==1
                set(obj3, 'String', 'M.offset');
            elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawData','plotRawDataPhaseOffset'])==1
                set(obj3, 'String', 'P.offset');
            elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawDataOffset','plotRawDataPhaseOffset'])==1
                set(obj3, 'String', 'M&P.offset');
            end
            set(obj, 'ForegroundColor', Colors{IndColor});
            set(obj3, 'ForegroundColor', Colors{IndColor});
            set(obj, 'String', '-');
            set(obj, 'FontSize', 25);
            set(obj3, 'FontSize', 10);
            set(obj, 'FontWeight', 'normal');
            set(obj3, 'FontWeight', 'normal');
            set(obj, 'Value',1);
            set(obj, 'UserData', {plotRawData.Tag, plotRawData.UserData});
        end
    else
        SavedCurvesNumber = SavedCurvesNumber +1;
        SavedplotRawDataNumber = SavedplotRawDataNumber +1 ;,
        
        if length(SavedCurves.plotFilteredData)~=0;
            kk=1;
            while kk <= length(SavedCurves.plotFilteredData)
                file_kk = SavedCurves.plotFilteredData{kk};
                if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                    FoundSameColor = 1;
                    kk = length(SavedCurves.plotFilteredData)+1;
                    IndColor = file_kk.IndColor;
                else
                    FoundSameColor = 0;
                    kk = kk+1;
                end
            end
            if FoundSameColor == 0 & length(SavedCurves.plotRawData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotRawData)
                    file_kk = SavedCurves.plotRawData{kk};
                    if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotRawData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
            end
            if FoundSameColor == 0
                ColorNumber = ColorNumber +1;
                IndColor = mod(ColorNumber, length(Colors));
                if IndColor ==0;
                    IndColor = length(Colors);
                end
            end
            
        elseif length(SavedCurves.plotRawData)~=0;
            kk=1;
            while kk <= length(SavedCurves.plotRawData)
                file_kk = SavedCurves.plotRawData{kk};
                if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                    FoundSameColor = 1;
                    kk = length(SavedCurves.plotRawData)+1;
                    IndColor = file_kk.IndColor;
                else
                    FoundSameColor = 0;
                    kk = kk+1;
                end
            end
            if FoundSameColor == 0
                ColorNumber = ColorNumber +1;
                IndColor = mod(ColorNumber, length(Colors));
                if IndColor ==0;
                    IndColor = length(Colors);
                end
            end
        else
            ColorNumber = ColorNumber +1;
            IndColor = mod(ColorNumber, length(Colors));
            if IndColor ==0;
                IndColor = length(Colors);
            end
        end
        plotRawData.Color = Colors{IndColor} ;
        plotRawDataPhase.Color = Colors{IndColor};
        StructData = {plotRawData.UserData(1:2);IndColor;[plotRawData.XData',plotRawData.YData'];...
            [plotRawDataPhase.XData',plotRawDataPhase.YData']; [plotRawData.Tag,plotRawDataPhase.Tag]};
        StructName = {'SliderVal'; 'IndColor'; 'DataSpectre'; 'DataPhase'; 'Tag'};
        s = cell2struct(StructData,StructName,1);
        SavedCurves.plotRawData{SavedplotRawDataNumber} = s;
        Is_SavedCurve_Checked(SavedCurvesNumber) = -SavedplotRawDataNumber;
        Is_SavedCurve_Checked
        assignin('base', 'SavedCurves', SavedCurves);
        if SavedCurvesNumber<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
            obj2 = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
            obj3 = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
            obj2 = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
            obj3 = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        end
        set(obj, 'Visible', 'on');
        set(obj2, 'Visible', 'on');
        set(obj3, 'Visible', 'on');
        if strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawData','plotRawDataPhase'])==1
            set(obj3, 'String', '');
        elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawDataOffset','plotRawDataPhase'])==1
            set(obj3, 'String', 'M.offset');
        elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawData','plotRawDataPhaseOffset'])==1
            set(obj3, 'String', 'P.offset');
        elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawDataOffset','plotRawDataPhaseOffset'])==1
            set(obj3, 'String', 'M&P.offset');
        end
        set(obj, 'ForegroundColor', Colors{IndColor});
        set(obj3, 'ForegroundColor', Colors{IndColor});
        set(obj, 'String', '-');
        set(obj, 'FontSize', 25);
        set(obj3, 'FontSize', 10);
        set(obj, 'FontWeight', 'normal');
        set(obj3, 'FontWeight', 'normal');
        set(obj, 'Value',1);
        set(obj, 'UserData', {plotRawData.Tag, plotRawData.UserData});
    end
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    
    
    if (strcmp(handles.LoadFileType, 'NEWAcuz')==1 & strcmp(handles.RecordType, 'Acuz')==1) || strcmp(handles.LoadFileType, 'OLDAcuz')==1
        plot(handles.Audio, handles.t,handles.s, 'b');
        hold(handles.Audio, 'on')
    else
        plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
        hold(handles.Audio, 'on')
        if size(handles.IndStartStopNoise,2)~=0
            
            for ii = 1:size(handles.IndStartStopNoise,2)
                % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                if (handles.IndStartStopNoise(1,ii)+1)*handles.nCalib<=length(handles.t)
                    t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                end
                if handles.IndStartStopNoise(1,1)==0
                    if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                        t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                        s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    else
                        plot(handles.Audio, handles.t, handles.s, 'b');
                    end
                end
                if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                    
                    t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                    s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                    s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                else
                    t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                    s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                end
                
                % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
                % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
            end
            
        end
    end
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    YLimAudio = [-max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))...
        max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))];
    set(handles.Audio, 'Ylim',YLimAudio);
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9*handles.Audio.YLim(2),...
                0.9*handles.Audio.YLim(2)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9*handles.Audio.YLim(2),...
                0.9*handles.Audio.YLim(2)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
else
    %display('nombre maximal de courbes a sauvegarder atteint !')
end


function lineCallback_plotRawDataPhase(hObject,eventdata,handles, PlottedCurves )
%display('lineCallback');
global SavedCurvesNumber ColorNumber SavedplotRawDataNumber SavedCurves...
    Colors Is_SavedCurve_Checked hjRangeSlider SavedplotFilteredDataNumber

if SavedCurvesNumber<20
    plotRawData = PlottedCurves.plotRawData;
    plotRawDataPhase = PlottedCurves.plotRawDataPhase;
    if length(SavedCurves.plotRawData)~=0;
        ii=1;
        while ii <= length(SavedCurves.plotRawData)
            file_ii = SavedCurves.plotRawData{ii}
            if isequal(plotRawData.UserData(1:2), file_ii.SliderVal)==1 & strcmp([plotRawData.Tag, plotRawDataPhase.Tag],file_ii.Tag)==1
                NotIn = 0;
                ii = length(SavedCurves.plotRawData)+1;
            else
                NotIn = 1;
                ii = ii+1
            end
        end
        if NotIn == 1
            SavedCurvesNumber = SavedCurvesNumber +1;
            SavedplotRawDataNumber = SavedplotRawDataNumber +1 ;
            if length(SavedCurves.plotFilteredData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotFilteredData)
                    file_kk = SavedCurves.plotFilteredData{kk};
                    if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotFilteredData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
                if FoundSameColor == 0 & length(SavedCurves.plotRawData)~=0;
                    kk=1;
                    while kk <= length(SavedCurves.plotRawData)
                        file_kk = SavedCurves.plotRawData{kk};
                        if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                            FoundSameColor = 1;
                            kk = length(SavedCurves.plotRawData)+1;
                            IndColor = file_kk.IndColor;
                        else
                            FoundSameColor = 0;
                            kk = kk+1;
                        end
                    end
                end
                if FoundSameColor == 0
                    ColorNumber = ColorNumber +1;
                    IndColor = mod(ColorNumber, length(Colors));
                    if IndColor ==0;
                        IndColor = length(Colors);
                    end
                end
            elseif length(SavedCurves.plotRawData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotRawData)
                    file_kk = SavedCurves.plotRawData{kk};
                    if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotRawData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
                if FoundSameColor == 0
                    ColorNumber = ColorNumber +1;
                    IndColor = mod(ColorNumber, length(Colors));
                    if IndColor ==0;
                        IndColor = length(Colors);
                    end
                end
            end
            plotRawData.Color = Colors{IndColor} ;
            plotRawDataPhase.Color = Colors{IndColor};
            StructData = {plotRawData.UserData(1:2);IndColor;[plotRawData.XData',plotRawData.YData'];...
                [plotRawDataPhase.XData',plotRawDataPhase.YData']; [plotRawData.Tag,plotRawDataPhase.Tag]};
            StructName = {'SliderVal'; 'IndColor'; 'DataSpectre'; 'DataPhase'; 'Tag'};
            s = cell2struct(StructData,StructName,1);
            SavedCurves.plotRawData{SavedplotRawDataNumber} = s;
            Is_SavedCurve_Checked(SavedCurvesNumber) = -SavedplotRawDataNumber;
            Is_SavedCurve_Checked
            assignin('base', 'SavedCurves', SavedCurves);
            if SavedCurvesNumber<10
                obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
                obj2 = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
                obj3 = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
            else
                obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
                obj2 = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
                obj3 = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
            end
            set(obj, 'Visible', 'on');
            set(obj2, 'Visible', 'on');
            set(obj3, 'Visible', 'on');
            if strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawData','plotRawDataPhase'])==1
                set(obj3, 'String', '');
            elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawDataOffset','plotRawDataPhase'])==1
                set(obj3, 'String', 'M.offset');
            elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawData','plotRawDataPhaseOffset'])==1
                set(obj3, 'String', 'P.offset');
            elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawDataOffset','plotRawDataPhaseOffset'])==1
                set(obj3, 'String', 'M&P.offset');
            end
            set(obj, 'ForegroundColor', Colors{IndColor});
            set(obj3, 'ForegroundColor', Colors{IndColor});
            set(obj, 'String', '-');
            set(obj, 'FontSize', 25);
            set(obj3, 'FontSize', 10);
            set(obj, 'FontWeight', 'normal');
            set(obj3, 'FontWeight', 'normal');
            set(obj, 'Value',1);
            set(obj, 'UserData', {plotRawData.Tag, plotRawData.UserData});
        end
    else
        
        SavedCurvesNumber = SavedCurvesNumber +1;
        SavedplotRawDataNumber = SavedplotRawDataNumber +1 ;
        if length(SavedCurves.plotFilteredData)~=0;
            kk=1;
            while kk <= length(SavedCurves.plotFilteredData)
                file_kk = SavedCurves.plotFilteredData{kk};
                if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                    FoundSameColor = 1;
                    kk = length(SavedCurves.plotFilteredData)+1;
                    IndColor = file_kk.IndColor;
                else
                    FoundSameColor = 0;
                    kk = kk+1;
                end
            end
            if FoundSameColor == 0 & length(SavedCurves.plotRawData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotRawData)
                    file_kk = SavedCurves.plotRawData{kk};
                    if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotRawData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
            end
            if FoundSameColor == 0
                ColorNumber = ColorNumber +1;
                IndColor = mod(ColorNumber, length(Colors));
                if IndColor ==0;
                    IndColor = length(Colors);
                end
            end
        elseif length(SavedCurves.plotRawData)~=0;
            kk=1;
            while kk <= length(SavedCurves.plotRawData)
                file_kk = SavedCurves.plotRawData{kk};
                if isequal(plotRawData.UserData(1:2), file_kk.SliderVal)==1
                    FoundSameColor = 1;
                    kk = length(SavedCurves.plotRawData)+1;
                    IndColor = file_kk.IndColor;
                else
                    FoundSameColor = 0;
                    kk = kk+1;
                end
            end
            if FoundSameColor == 0
                ColorNumber = ColorNumber +1;
                IndColor = mod(ColorNumber, length(Colors));
                if IndColor ==0;
                    IndColor = length(Colors);
                end
            end
        end
        plotRawData.Color = Colors{IndColor} ;
        plotRawDataPhase.Color = Colors{IndColor};
        StructData = {plotRawData.UserData(1:2);IndColor;[plotRawData.XData',plotRawData.YData'];...
            [plotRawDataPhase.XData',plotRawDataPhase.YData']; [plotRawData.Tag,plotRawDataPhase.Tag]};
        StructName = {'SliderVal'; 'IndColor'; 'DataSpectre'; 'DataPhase'; 'Tag'};
        s = cell2struct(StructData,StructName,1);
        SavedCurves.plotRawData{SavedplotRawDataNumber} = s;
        Is_SavedCurve_Checked(SavedCurvesNumber) = -SavedplotRawDataNumber;
        Is_SavedCurve_Checked
        assignin('base', 'SavedCurves', SavedCurves);
        if SavedCurvesNumber<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
            obj2 = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
            obj3 = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
            obj2 = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
            obj3 = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        end
        set(obj, 'Visible', 'on');
        set(obj2, 'Visible', 'on');
        set(obj3, 'Visible', 'on');
        if strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawData','plotRawDataPhase'])==1
            set(obj3, 'String', '');
        elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawDataOffset','plotRawDataPhase'])==1
            set(obj3, 'String', 'M.offset');
        elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawData','plotRawDataPhaseOffset'])==1
            set(obj3, 'String', 'P.offset');
        elseif strcmp(SavedCurves.plotRawData{end}.Tag,['plotRawDataOffset','plotRawDataPhaseOffset'])==1
            set(obj3, 'String', 'M&P.offset');
        end
        set(obj, 'ForegroundColor', Colors{IndColor});
        set(obj3, 'ForegroundColor', Colors{IndColor});
        set(obj, 'String', '-');
        set(obj, 'FontSize', 25);
        set(obj3, 'FontSize', 10);
        set(obj, 'FontWeight', 'normal');
        set(obj3, 'FontWeight', 'normal');
        set(obj, 'Value',1);
        set(obj, 'UserData', {plotRawData.Tag, plotRawData.UserData});
    end
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    
    
    if (strcmp(handles.LoadFileType, 'NEWAcuz')==1 & strcmp(handles.RecordType, 'Acuz')==1) || strcmp(handles.LoadFileType, 'OLDAcuz')==1
        plot(handles.Audio, handles.t,handles.s, 'b');
        hold(handles.Audio, 'on')
    else
        plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
        hold(handles.Audio, 'on')
        if size(handles.IndStartStopNoise,2)~=0
            
            for ii = 1:size(handles.IndStartStopNoise,2)
                % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                
                if handles.IndStartStopNoise(1,1)==0
                    if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                        t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                        s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    else
                        plot(handles.Audio, handles.t, handles.s, 'b');
                    end
                end
                if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                    
                    t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                    s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                    s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                else
                    t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                    s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                end
                
                % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
                % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
            end
            
        end
    end
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    YLimAudio = [-max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))...
        max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))];
    set(handles.Audio, 'Ylim',YLimAudio);
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9*handles.Audio.YLim(2),...
                0.9*handles.Audio.YLim(2)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9*handles.Audio.YLim(2),...
                0.9*handles.Audio.YLim(2)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
else
    %display('nombre maximal de courbes a sauvegarder atteint !')
end

function lineCallback_plotFilteredData(hObject,eventdata,handles, PlottedCurves)
%display('lineCallback');
global SavedCurvesNumber ColorNumber SavedplotFilteredDataNumber...
    SavedCurves Colors Is_SavedCurve_Checked hjRangeSlider SavedplotRawDataNumber

if SavedCurvesNumber<20
    plotFilteredData = PlottedCurves.plotFilteredData;
    plotFilteredDataPhase = PlottedCurves.plotFilteredDataPhase;
    if length(SavedCurves.plotFilteredData)~=0;
        ii=1;
        file_ii = SavedCurves.plotFilteredData{ii};
        NotIn = 1;
        while ii <= length(SavedCurves.plotFilteredData) & strcmp([plotFilteredData.Tag, plotFilteredDataPhase.Tag],file_ii.Tag)==1
            if isequal(plotFilteredData.UserData(1:2), file_ii.SliderVal)==1
                NotIn = 0;
                ii=length(SavedCurves.plotFilteredData)+1;
            else
                NotIn = 1;
                ii=ii+1;
            end
        end
        if NotIn == 1
            SavedCurvesNumber = SavedCurvesNumber +1;
            SavedplotFilteredDataNumber = SavedplotFilteredDataNumber +1 ;
            
            if length(SavedCurves.plotRawData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotRawData)
                    file_kk = SavedCurves.plotRawData{kk};
                    if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotRawData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
                if FoundSameColor == 0 & length(SavedCurves.plotFilteredData)~=0;
                    kk=1;
                    while kk <= length(SavedCurves.plotFilteredData)
                        file_kk = SavedCurves.plotFilteredData{kk};
                        if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                            FoundSameColor = 1;
                            kk = length(SavedCurves.plotFilteredData)+1;
                            IndColor = file_kk.IndColor;
                        else
                            FoundSameColor = 0;
                            kk = kk+1;
                        end
                    end
                end
                if FoundSameColor == 0
                    ColorNumber = ColorNumber +1;
                    IndColor = mod(ColorNumber, length(Colors));
                    if IndColor ==0;
                        IndColor = length(Colors);
                    end
                end
            elseif length(SavedCurves.plotFilteredData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotFilteredData)
                    file_kk = SavedCurves.plotFilteredData{kk};
                    if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotFilteredData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
                if FoundSameColor == 0
                    ColorNumber = ColorNumber +1;
                    IndColor = mod(ColorNumber, length(Colors));
                    if IndColor ==0;
                        IndColor = length(Colors);
                    end
                end
            end
            
            plotFilteredData.Color = Colors{IndColor} ;
            plotFilteredDataPhase.Color = Colors{IndColor};
            StructData = {plotFilteredData.UserData(1:2);IndColor;[plotFilteredData.XData',plotFilteredData.YData'];...
                [plotFilteredDataPhase.XData',plotFilteredDataPhase.YData']; [plotFilteredData.Tag,plotFilteredDataPhase.Tag]};
            StructName = {'SliderVal'; 'IndColor'; 'DataSpectre'; 'DataPhase'; 'Tag'};
            s = cell2struct(StructData,StructName,1);
            SavedCurves.plotFilteredData{SavedplotFilteredDataNumber} = s;
            Is_SavedCurve_Checked(SavedCurvesNumber) = SavedplotFilteredDataNumber;
            Is_SavedCurve_Checked
            assignin('base', 'SavedCurves', SavedCurves);
            %         %display('struc saved')
            if SavedCurvesNumber<10
                obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
                obj2 = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
                obj3 = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
            else
                obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
                obj2 = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
                obj3 = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
            end
            set(obj, 'Visible', 'on');
            set(obj2, 'Visible', 'on');
            set(obj3, 'Visible', 'on');
            if strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredData','plotFilteredDataPhase'])==1
                set(obj3, 'String', ' ');
            elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredDataOffset','plotFilteredDataPhase'])==1
                set(obj3, 'String', 'M.offset');
            elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredData','plotFilteredDataPhaseOffset'])==1
                set(obj3, 'String', 'P.offset');
            elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredDataOffset','plotFilteredDataPhaseOffset'])==1
                set(obj3, 'String', 'M&P.offset');
            end
            set(obj, 'ForegroundColor', Colors{IndColor});
            set(obj3, 'ForegroundColor', Colors{IndColor});
            set(obj, 'String', '-');
            set(obj, 'FontSize', 40);
            set(obj3, 'FontSize', 10);
            set(obj, 'FontWeight', 'bold');
            set(obj3, 'FontWeight', 'bold');
            set(obj, 'Value',1);
            set(obj, 'UserData', {plotFilteredData.Tag, plotFilteredData.UserData})
            %         %display('test lecture de user data checkbox')
            %         displayUserData = get(obj, 'UserData')
            %         %display('nouvelle sauvegarde!')
        end
    else
        SavedCurvesNumber = SavedCurvesNumber +1;
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber +1 ;
        
        if length(SavedCurves.plotRawData)~=0;
            kk=1;
            while kk <= length(SavedCurves.plotRawData)
                file_kk = SavedCurves.plotRawData{kk};
                if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                    FoundSameColor = 1;
                    kk = length(SavedCurves.plotRawData)+1;
                    IndColor = file_kk.IndColor;
                else
                    FoundSameColor = 0;
                    kk = kk+1;
                end
            end
            if FoundSameColor == 0 & length(SavedCurves.plotFilteredData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotFilteredData)
                    file_kk = SavedCurves.plotFilteredData{kk};
                    if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotFilteredData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
            end
            if FoundSameColor == 0
                ColorNumber = ColorNumber +1;
                IndColor = mod(ColorNumber, length(Colors));
                if IndColor ==0;
                    IndColor = length(Colors);
                end
            end
        elseif length(SavedCurves.plotFilteredData)~=0;
            kk=1;
            while kk <= length(SavedCurves.plotFilteredData)
                file_kk = SavedCurves.plotFilteredData{kk};
                if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                    FoundSameColor = 1;
                    kk = length(SavedCurves.plotFilteredData)+1;
                    IndColor = file_kk.IndColor;
                else
                    FoundSameColor = 0;
                    kk = kk+1;
                end
            end
            if FoundSameColor == 0
                ColorNumber = ColorNumber +1;
                IndColor = mod(ColorNumber, length(Colors));
                if IndColor ==0;
                    IndColor = length(Colors);
                end
            end
        end
        
        plotFilteredData.Color = Colors{IndColor} ;
        plotFilteredDataPhase.Color = Colors{IndColor};
        StructData = {plotFilteredData.UserData(1:2);IndColor;[plotFilteredData.XData',plotFilteredData.YData'];...
            [plotFilteredDataPhase.XData',plotFilteredDataPhase.YData']; [plotFilteredData.Tag,plotFilteredDataPhase.Tag]};
        StructName = {'SliderVal'; 'IndColor'; 'DataSpectre'; 'DataPhase'; 'Tag'};
        s = cell2struct(StructData,StructName,1);
        SavedCurves.plotFilteredData{SavedplotFilteredDataNumber} = s;
        Is_SavedCurve_Checked(SavedCurvesNumber) = SavedplotFilteredDataNumber;
        Is_SavedCurve_Checked
        assignin('base', 'SavedCurves', SavedCurves);
        %     %display('struc saved')
        if SavedCurvesNumber<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
            obj2 = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
            obj3 = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
            obj2 = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
            obj3 = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        end
        set(obj, 'Visible', 'on');
        set(obj2, 'Visible', 'on');
        set(obj3, 'Visible', 'on');
        if strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredData','plotFilteredDataPhase'])==1
            set(obj3, 'String', ' ');
        elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredDataOffset','plotFilteredDataPhase'])==1
            set(obj3, 'String', 'M.offset');
        elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredData','plotFilteredDataPhaseOffset'])==1
            set(obj3, 'String', 'P.offset');
        elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredDataOffset','plotFilteredDataPhaseOffset'])==1
            set(obj3, 'String', 'M&P.offset');
        end
        set(obj, 'ForegroundColor', Colors{IndColor});
        set(obj3, 'ForegroundColor', Colors{IndColor});
        set(obj, 'String', '-');
        set(obj, 'FontSize', 40);
        set(obj3, 'FontSize', 10);
        set(obj, 'FontWeight', 'bold');
        set(obj3, 'FontWeight', 'bold');
        set(obj, 'Value',1);
        set(obj, 'UserData', {plotFilteredData.Tag, plotFilteredData.UserData})
    end
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    
    if (strcmp(handles.LoadFileType, 'NEWAcuz')==1 & strcmp(handles.RecordType, 'Acuz')==1) || strcmp(handles.LoadFileType, 'OLDAcuz')==1
        plot(handles.Audio, handles.t,handles.s, 'b');
        hold(handles.Audio, 'on')
    else
        plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
        hold(handles.Audio, 'on')
        if size(handles.IndStartStopNoise,2)~=0
            
            for ii = 1:size(handles.IndStartStopNoise,2)
                % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                
                if handles.IndStartStopNoise(1,1)==0
                    if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                        t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                        s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    else
                        plot(handles.Audio, handles.t, handles.s, 'b');
                    end
                end
                if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                    
                    t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                    s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                    s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                else
                    t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                    s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                end
                
                % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
                % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
            end
            
        end
    end
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    YLimAudio = [-max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))...
        max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))];
    set(handles.Audio, 'Ylim',YLimAudio);
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9*handles.Audio.YLim(2),...
                0.9*handles.Audio.YLim(2)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9*handles.Audio.YLim(2),...
                0.9*handles.Audio.YLim(2)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
else
    %display('nombre maximal de courbes a sauvegarder atteint !')
end

function lineCallback_plotFilteredDataPhase(hObject,eventdata,handles, PlottedCurves)
%display('lineCallback');
global SavedCurvesNumber ColorNumber SavedplotFilteredDataNumber...
    SavedCurves Colors Is_SavedCurve_Checked hjRangeSlider SavedplotRawDataNumber

if SavedCurvesNumber<20
    plotFilteredData = PlottedCurves.plotFilteredData;
    plotFilteredDataPhase = PlottedCurves.plotFilteredDataPhase;
    if length(SavedCurves.plotFilteredData)~=0;
        ii=1;
        file_ii = SavedCurves.plotFilteredData{ii};
        NotIn = 1;
        while ii <= length(SavedCurves.plotFilteredData) & strcmp([plotFilteredData.Tag, plotFilteredDataPhase.Tag],file_ii.Tag)==1
            if isequal(plotFilteredData.UserData(1:2), file_ii.SliderVal)==1
                NotIn = 0;
                ii=length(SavedCurves.plotFilteredData)+1;
            else
                NotIn = 1;
                ii=ii+1;
            end
        end
        if NotIn == 1
            SavedCurvesNumber = SavedCurvesNumber +1;
            SavedplotFilteredDataNumber = SavedplotFilteredDataNumber +1 ;
            
            if length(SavedCurves.plotRawData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotRawData)
                    file_kk = SavedCurves.plotRawData{kk};
                    if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotRawData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
                if FoundSameColor == 0 & length(SavedCurves.plotFilteredData)~=0;
                    kk=1;
                    while kk <= length(SavedCurves.plotFilteredData)
                        file_kk = SavedCurves.plotFilteredData{kk};
                        if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                            FoundSameColor = 1;
                            kk = length(SavedCurves.plotFilteredData)+1;
                            IndColor = file_kk.IndColor;
                        else
                            FoundSameColor = 0;
                            kk = kk+1;
                        end
                    end
                end
                if FoundSameColor == 0
                    ColorNumber = ColorNumber +1;
                    IndColor = mod(ColorNumber, length(Colors));
                    if IndColor ==0;
                        IndColor = length(Colors);
                    end
                end
            elseif length(SavedCurves.plotFilteredData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotFilteredData)
                    file_kk = SavedCurves.plotFilteredData{kk};
                    if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotFilteredData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
                if FoundSameColor == 0
                    ColorNumber = ColorNumber +1;
                    IndColor = mod(ColorNumber, length(Colors));
                    if IndColor ==0;
                        IndColor = length(Colors);
                    end
                end
            end
            
            plotFilteredData.Color = Colors{IndColor} ;
            plotFilteredDataPhase.Color = Colors{IndColor};
            StructData = {plotFilteredData.UserData(1:2);IndColor;[plotFilteredData.XData',plotFilteredData.YData'];...
                [plotFilteredDataPhase.XData',plotFilteredDataPhase.YData']; [plotFilteredData.Tag,plotFilteredDataPhase.Tag]};
            StructName = {'SliderVal'; 'IndColor'; 'DataSpectre'; 'DataPhase'; 'Tag'};
            s = cell2struct(StructData,StructName,1);
            SavedCurves.plotFilteredData{SavedplotFilteredDataNumber} = s;
            Is_SavedCurve_Checked(SavedCurvesNumber) = SavedplotFilteredDataNumber;
            Is_SavedCurve_Checked
            assignin('base', 'SavedCurves', SavedCurves);
            %         %display('struc saved')
            if SavedCurvesNumber<10
                obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
                obj2 = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
                obj3 = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
            else
                obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
                obj2 = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
                obj3 = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
            end
            set(obj, 'Visible', 'on');
            set(obj2, 'Visible', 'on');
            set(obj3, 'Visible', 'on');
            if strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredData','plotFilteredDataPhase'])==1
                set(obj3, 'String', ' ');
            elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredDataOffset','plotFilteredDataPhase'])==1
                set(obj3, 'String', 'M.offset');
            elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredData','plotFilteredDataPhaseOffset'])==1
                set(obj3, 'String', 'P.offset');
            elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredDataOffset','plotFilteredDataPhaseOffset'])==1
                set(obj3, 'String', 'M&P.offset');
            end
            set(obj, 'ForegroundColor', Colors{IndColor});
            set(obj3, 'ForegroundColor', Colors{IndColor});
            set(obj, 'String', '-');
            set(obj, 'FontSize', 40);
            set(obj3, 'FontSize', 10);
            set(obj, 'FontWeight', 'bold');
            set(obj3, 'FontWeight', 'bold');
            set(obj, 'Value',1);
            set(obj, 'UserData', {plotFilteredData.Tag, plotFilteredData.UserData})
            %         %display('test lecture de user data checkbox')
            %         displayUserData = get(obj, 'UserData')
            %         %display('nouvelle sauvegarde!')
        end
    else
        SavedCurvesNumber = SavedCurvesNumber +1;
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber +1 ;
        
        if length(SavedCurves.plotRawData)~=0;
            kk=1;
            while kk <= length(SavedCurves.plotRawData)
                file_kk = SavedCurves.plotRawData{kk};
                if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                    FoundSameColor = 1;
                    kk = length(SavedCurves.plotRawData)+1;
                    IndColor = file_kk.IndColor;
                else
                    FoundSameColor = 0;
                    kk = kk+1;
                end
            end
            if FoundSameColor == 0 & length(SavedCurves.plotFilteredData)~=0;
                kk=1;
                while kk <= length(SavedCurves.plotFilteredData)
                    file_kk = SavedCurves.plotFilteredData{kk};
                    if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                        FoundSameColor = 1;
                        kk = length(SavedCurves.plotFilteredData)+1;
                        IndColor = file_kk.IndColor;
                    else
                        FoundSameColor = 0;
                        kk = kk+1;
                    end
                end
            end
            if FoundSameColor == 0
                ColorNumber = ColorNumber +1;
                IndColor = mod(ColorNumber, length(Colors));
                if IndColor ==0;
                    IndColor = length(Colors);
                end
            end
        elseif length(SavedCurves.plotFilteredData)~=0;
            kk=1;
            while kk <= length(SavedCurves.plotFilteredData)
                file_kk = SavedCurves.plotFilteredData{kk};
                if isequal(plotFilteredData.UserData(1:2), file_kk.SliderVal)==1
                    FoundSameColor = 1;
                    kk = length(SavedCurves.plotFilteredData)+1;
                    IndColor = file_kk.IndColor;
                else
                    FoundSameColor = 0;
                    kk = kk+1;
                end
            end
            if FoundSameColor == 0
                ColorNumber = ColorNumber +1;
                IndColor = mod(ColorNumber, length(Colors));
                if IndColor ==0;
                    IndColor = length(Colors);
                end
            end
        end
        
        plotFilteredData.Color = Colors{IndColor} ;
        plotFilteredDataPhase.Color = Colors{IndColor};
        StructData = {plotFilteredData.UserData(1:2);IndColor;[plotFilteredData.XData',plotFilteredData.YData'];...
            [plotFilteredDataPhase.XData',plotFilteredDataPhase.YData']; [plotFilteredData.Tag,plotFilteredDataPhase.Tag]};
        StructName = {'SliderVal'; 'IndColor'; 'DataSpectre'; 'DataPhase'; 'Tag'};
        s = cell2struct(StructData,StructName,1);
        SavedCurves.plotFilteredData{SavedplotFilteredDataNumber} = s;
        Is_SavedCurve_Checked(SavedCurvesNumber) = SavedplotFilteredDataNumber;
        Is_SavedCurve_Checked
        assignin('base', 'SavedCurves', SavedCurves);
        %     %display('struc saved')
        if SavedCurvesNumber<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
            obj2 = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
            obj3 = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
            obj2 = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
            obj3 = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        end
        set(obj, 'Visible', 'on');
        set(obj2, 'Visible', 'on');
        set(obj3, 'Visible', 'on');
        if strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredData','plotFilteredDataPhase'])==1
            set(obj3, 'String', ' ');
        elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredDataOffset','plotFilteredDataPhase'])==1
            set(obj3, 'String', 'M.offset');
        elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredData','plotFilteredDataPhaseOffset'])==1
            set(obj3, 'String', 'P.offset');
        elseif strcmp(SavedCurves.plotFilteredData{end}.Tag,['plotFilteredDataOffset','plotFilteredDataPhaseOffset'])==1
            set(obj3, 'String', 'M&P.offset');
        end
        set(obj, 'ForegroundColor', Colors{IndColor});
        set(obj3, 'ForegroundColor', Colors{IndColor});
        set(obj, 'String', '-');
        set(obj, 'FontSize', 40);
        set(obj3, 'FontSize', 10);
        set(obj, 'FontWeight', 'bold');
        set(obj3, 'FontWeight', 'bold');
        set(obj, 'Value',1);
        set(obj, 'UserData', {plotFilteredData.Tag, plotFilteredData.UserData})
    end
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    
    if (strcmp(handles.LoadFileType, 'NEWAcuz')==1 & strcmp(handles.RecordType, 'Acuz')==1) || strcmp(handles.LoadFileType, 'OLDAcuz')==1
        plot(handles.Audio, handles.t,handles.s, 'b');
        hold(handles.Audio, 'on')
    else
        plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
        hold(handles.Audio, 'on')
        if size(handles.IndStartStopNoise,2)~=0
            
            for ii = 1:size(handles.IndStartStopNoise,2)
                % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                
                if handles.IndStartStopNoise(1,1)==0
                    if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                        t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                        s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    else
                        plot(handles.Audio, handles.t, handles.s, 'b');
                    end
                end
                if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                    
                    t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                    s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                    s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                else
                    t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                    s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                end
                
                % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
                % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
            end
            
        end
    end
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    YLimAudio = [-max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))...
        max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))];
    set(handles.Audio, 'Ylim',YLimAudio);
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9*handles.Audio.YLim(2),...
                0.9*handles.Audio.YLim(2)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9*handles.Audio.YLim(2),...
                0.9*handles.Audio.YLim(2)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        
    end
    
else
    %display('nombre maximal de courbes a sauvegarder atteint !')
end

function DoubleCursorCallbackRealTimeNEW2(hObject,eventdata, handles)

global hjRangeSlider h indiceDoubleCursorCallbackRealTimeNEW2 IsAcquiring

if IsAcquiring==0
    
    set(handles.AxesAnalyse, 'XTickLabel', '');
    set(handles.Phase, 'XTickLabel', '');
    valueAdjusting = getValueIsAdjusting(hjRangeSlider);
    %     colorAxesClefs = [238 238 238]/255;
    %     set(handles.AxesAnalyse, 'Color',colorAxesClefs);
    %     set(handles.AxesAnalyse, 'AmbientLightColor', colorAxesClefs);
    %     set(handles.AxesAnalyse, 'GridColor', colorAxesClefs);
    %     set(handles.AxesAnalyse, 'MinorGridColor', colorAxesClefs);
    %     set(handles.AxesAnalyse, 'XColor', colorAxesClefs);
    %     set(handles.AxesAnalyse, 'YColor', colorAxesClefs);
    %     set(handles.AxesAnalyse, 'ZColor', colorAxesClefs);
    
    if valueAdjusting ==1
        indiceDoubleCursorCallbackRealTimeNEW2 = 0;
    elseif  valueAdjusting ==0 & indiceDoubleCursorCallbackRealTimeNEW2==0
        indiceDoubleCursorCallbackRealTimeNEW2 = 1;
%         display('DoubleCursorCallbackRealTimeNEW2');
        %on recupere le numero du curseur
        ValLo = get(hjRangeSlider,'LowValue');
        ValHi = get(hjRangeSlider,'HighValue');
        ValMAX = get(hjRangeSlider,'Maximum');
        ValMIN = get(hjRangeSlider,'Minimum');
        
        
        % on calcule les limites
        XLim = double(get(handles.Audio, 'XLim'));
        xmin = XLim(1);
        xmax = XLim(2);
        [~,indmin] = min(abs(handles.TCycle-xmin));
        xmin = handles.TCycle(indmin);
        [~,indmax] = min(abs(handles.TCycle-xmax));
        xmax = handles.TCycle(indmax);
        % on donne le numero de la colonne de la matrice Z correspondante
        indLo = ValLo+1;
        indHi = ValHi+1;
        % on calcule et affiche le nombre de cycle sur lesquels on moyenne
        NbAvg = indHi-indLo;
        set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
        
        
        maxValSlider = handles.MaxValSlider;
        minValSlider = handles.MinValSlider;
        
        tLo = handles.TCycle(ValLo+1);
        handles.tLo = tLo;
        tHi = handles.TCycle(ValHi+1);
        handles.tHi = tHi;
        
        
        if (ValMAX-ValMIN)*handles.nCalib>(5*handles.Fs)
            step = floor((ValMAX-ValMIN)*handles.nCalib/(5*handles.Fs)); %5seconds limitation
            if mod(handles.nCalib, step)~=0
                step = 2^(nextpow2(step));
            end
        else
            step = 1;
        end
        hold(handles.Audio, 'off')
        plot(handles.Audio, handles.t(1:step:end),handles.s(1:step:end), 'color', [0.3 0.3 0.3]);
        hold(handles.Audio, 'on')
        if size(handles.IndStartStopNoise,2)~=0
            
            for ii = 1:size(handles.IndStartStopNoise,2)
                % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
                if (handles.IndStartStopNoise(1,ii)+1)*handles.nCalib<=length(handles.s)
                    t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:step:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:step:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                    hold(handles.Audio, 'on');
                end
                
                if handles.IndStartStopNoise(1,1)==0
                    if handles.IndStartStopNoise(2,1)*handles.nCalib <=length(handles.s)
                        t_Noise = handles.t(1:step:handles.IndStartStopNoise(2,1)*handles.nCalib);
                        s_Noise = handles.s(1:step:handles.IndStartStopNoise(2,1)*handles.nCalib);
                        plot(handles.Audio, t_Noise, s_Noise , 'b');
                        hold(handles.Audio, 'on');
                        if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib<=length(handles.s)
                            t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:step:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*handles.nCalib:step:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                            plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                            hold(handles.Audio, 'on');
                        end
                    else
                        plot(handles.Audio, handles.t, handles.s, 'b');
                        hold(handles.Audio, 'on');
                    end
                end
                if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<=length(handles.s)
                    
                    t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:step:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                    s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:step:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:step:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                    s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:step:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    hold(handles.Audio, 'on');
                else
                    t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:step:end);
                    s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:step:end);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    hold(handles.Audio, 'on');
                end
                
                % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
                % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
            end
            
        end
        
        set(handles.Audio, 'XLim', [xmin xmax]);
        % set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
        YLimAudio = [-max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))...
            max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))];
        set(handles.Audio, 'YLim',YLimAudio);
        
        plot(handles.Audio, [handles.tLo handles.tLo],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
        plot(handles.Audio, [handles.tHi handles.tHi],YLimAudio,'color',[0.55 0.75 1],'linewidth',3);
        hold(handles.Audio, 'off')
        
        if ValHi>ValLo
            xlim(handles.EGG, [handles.tLo handles.tHi])
        end
        
        
        ax = handles.Audio;
        h = zoom(ax);
        setAxesZoomMotion(h,handles.Audio,'horizontal');
        set(h,'ActionPostCallback',{@ZoomCallbackRealTimeNEW, handles}) ;
        
        XLimZ = double(get(handles.Spectre, 'XLim'));
        xminZ = XLimZ(1);
        xmaxZ = XLimZ(2);
        
        % if NbAvg>=1
        % disp('calcul')
        %
        % AmpPlot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
        %         handles.Zref(handles.harmLo+1:handles.harmHi+1)));
        % PhasePlot = 180/pi*angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1),2)./...
        %        handles.Zref(handles.harmLo+1:handles.harmHi+1));
        % AmpTot = 20*log10(abs(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,:),2)./...
        %         handles.Zref(handles.harmLo+1:handles.harmHi+1)));
        % PhaseTot = 180/pi*angle(mean(handles.Z(handles.harmLo+1:handles.harmHi+1,:),2)./...
        %        handles.Zref(handles.harmLo+1:handles.harmHi+1));
        % freqZplot = handles.freqZ(handles.harmLo+1:handles.harmHi+1);
        % MeanAmpPlot = mean(AmpPlot);
        %
        % disp('plot spectre')
        %
        % axes(handles.Spectre);
        % if get(handles.DisplayRawData, 'Value')==1
        %     plot(handles.Spectre, freqZplot,AmpPlot-MeanAmpPlot, 'k', 'linewidth', 1);
        %     hold on;
        % end
        % if get(handles.DisplayFilteredData, 'Value')==1
        %     plot(handles.Spectre, freqZplot,medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,25),5), 'b', 'linewidth', 4 );
        %     hold on;
        % end
        % if get(handles.DisplayAllCurves, 'Value')==1
        %     %display('test ??')
        %     Z_AllCurves = 20*log10(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
        %         repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)))';
        %     plot(handles.Spectre, freqZplot, Z_AllCurves - repmat(mean(Z_AllCurves,2),1, size(Z_AllCurves,2)), 'linewidth', 0.25     )
        %     hold on;
        % end
        % % if get(handles.DisplayMean, 'Value') ==1
        % %     AbsZ_Mean = 20*log10(mean(abs(handles.Z(handles.harmLo+1:handles.harmHi+1,indZLo:indZLo+NbAvg-1)./...
        % %         repmat(handles.Zref(handles.harmLo+1:handles.harmHi+1),1,NbAvg)),2));
        % %     plot(freqZplot, AbsZ_Mean - mean(AbsZ_Mean),'color',[204 85 0]/255,'linewidth', 3 );
        % % end
        %
        % %     plot(freqZplot,AmpTot, 'b');
        % xlabel('f (Hz)')
        % ylabel('|S(f)|')
        % % axis([handles.FreqLo handles.FreqHi min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)])
        % % axis([0 handles.FreqHi min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)])
        % xlim(handles.Spectre, [xminZ xmaxZ]);
        % ylim(handles.Spectre, [min(AmpPlot-MeanAmpPlot) max(AmpPlot-MeanAmpPlot)]);
        % legend({'20log(|Z/Z_{ref}|)', 'filtred 20log(|Z/Z_{ref}|)' },'FontSize', 11);
        % hold off;
        %
        % disp('plot phase')
        %
        % axes(handles.Phase);
        % DerivPhasePlot = diff(unwrap(pi/180*PhasePlot))/(freqZplot(2)-freqZplot(1));
        % plot(handles.Phase, freqZplot(1:end-1),DerivPhasePlot, 'k');
        % hold on;
        % plot(handles.Phase, freqZplot(1:end-1),medfilt1(sgolayfilt(DerivPhasePlot,3,25),5), 'b');
        % %     plot(freqZplot,PhaseTot, 'b');
        % %     axis([handles.FreqLo handles.FreqHi min(DerivPhasePlot) max(DerivPhasePlot)])
        % % axis([0 handles.FreqHi min(DerivPhasePlot) max(DerivPhasePlot)])
        % xlim(handles.Phase, [xminZ xmaxZ]);
        % ylim(handles.Phase, [min(DerivPhasePlot) max(DerivPhasePlot)]);
        % legend({'dPhase(|Z/Z_{ref}| / df', 'filtred dPhase(|Z/Z_{ref}| / df' },'FontSize', 11);
        % hold off;
        %
        %
        % disp('analyse')
        %
        % [pks,locs,w,p] = findpeaks(medfilt1(sgolayfilt(AmpPlot-MeanAmpPlot,3,25),5),freqZplot,...
        %         'MinPeakHeight',0.10*max(AmpPlot-MeanAmpPlot), 'WidthReference','halfheight');
        % name_pks = cat(2,'pks', num2str(1i));
        % name_locs = cat(2,'locs', num2str(i));
        % %name_w = cat(2,'w', num2str(i));
        % %name_p = cat(2,'p', num2str(i));
        % findH.name_pks = pks;
        % findH.name_locs = locs;
        % findH.name_w = w;
        % findH.name_p = p;
        % % [~,indH1] = max(pks);
        % % findH.indH = indH1;
        % indH1 = 1;
        % findH.freqH1 = locs(indH1);
        % findH.widthH1 = w(indH1);
        % [Eps, indEps] = min(abs(2*findH.freqH1*ones(1,length(findH.name_locs))-...
        % findH.name_locs));
        % findH.freqH2 = findH.name_locs(indEps);
        % findH.widthH2 = w(indEps);
        %
        % disp('plot analyse')
        %
        % disp('')
        % disp('')
        % disp('')
        % axes(handles.Analyse);
        %     plot([0 10], [0 0], 'k'); hold on;
        %     plot([0 10], [2 2], 'k');
        %     plot([0 10], [4 4], 'k');
        %     plot([0 10], [6 6], '-k');
        %     plot([0 10], [8 8], '-k');
        %     plot([0 10], [14 14], 'k');
        %     plot([0 10], [16 16], 'k');
        %     plot([0 10], [18 18], 'k');
        %     plot([0 10], [20 20], 'k');
        %     plot([0 10], [22 22], 'k');
        %     axis([ 0 10 -3 25])
        %     set(handles.ValH1,'String',round(locs(1),0));
        %     set(handles.ValH2,'String',round(locs(2),0));
        %     frequence2position(locs,handles.Analyse);
        %     grid off
        %     axis off
        %     hold(handles.Analyse, 'off');
        % else
        %
        %     axes(handles.Spectre)
        %     plot(handles.Spectre, [xminZ xmaxZ], [0 0], 'w');
        %     hold(handles.Spectre, 'off');
        %
        %
        %     axes(handles.Phase)
        %     plot(handles.Phase, [xminZ xmaxZ], [0 0], 'w');
        %     hold(handles.Phase, 'off');
        %
        % end
        
        
        % !!!!!!!!!!!!!!!!!!!
        PlottedCurves = DisplayChosenCurvesNEW(handles);
        assignin('base', 'PlottedCurves', PlottedCurves);
        % !!!!!!!!!!!!!!!!!!!
        
        
        ValMin = handles.AUDIOleft+handles.PCleft-13;
        width = handles.AUDIOwidth+2*13;
        ValMax = ValMin+width;
        NbAvg = ValHi-ValLo;
        if NbAvg >=1
            set(handles.text_ValNbAverage_Browse, 'String', num2str(NbAvg))
            maxValSlider = getMaximum(hjRangeSlider);
            minValSlider = getMinimum(hjRangeSlider);
            pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13;
            set(handles.PannelPlayAndSave, 'Units', 'pixels');
            posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
            if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
                posPlayAndSave(1) = pos;
            else
                posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
            end
            set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
            %     set(handles.PannelPlayAndSave, 'Position', [pos 755 85 47]);
            set(handles.PlaySelection, 'Visible', 'on')
            set(handles.SaveSelection, 'Visible', 'on')
        else
            set(handles.text_ValNbAverage_Browse, 'String', num2str(NbAvg))
            maxValSlider = getMaximum(hjRangeSlider);
            minValSlider = getMinimum(hjRangeSlider);
            pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13;
            set(handles.PannelPlayAndSave, 'Units', 'pixels');
            posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
            if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
                posPlayAndSave(1) = pos;
            else
                posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
            end
            set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
            set(handles.PlaySelection, 'Visible', 'off')
            set(handles.SaveSelection, 'Visible', 'off')
        end
        
        
        % ValMin = handles.AUDIOleft+handles.PCleft-13;
        % width = handles.AUDIOwidth+2*13;
        % ValMax = ValMin+width;
        %
        % pos = (ValMax-ValMin-26)*(ValLo-minValSlider)/(maxValSlider-minValSlider) + ValMin + 13;
        % set(handles.PannelPlayAndSave, 'Units', 'pixels');
        % posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
        % if (handles.AUDIOwidth+2*13-pos)>=posPlayAndSave(3)
        %     posPlayAndSave(1) = pos;
        % else
        %     posPlayAndSave(1) = handles.AUDIOwidth+2*13-posPlayAndSave(3);
        % end
        % set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
        % % set(handles.PannelPlayAndSave, 'Position', [pos 755 85 47]);
        % set(handles.PannelPlayAndSave, 'Visible', 'on')
        % else
        %     set(handles.PannelPlayAndSave, 'Visible', 'off')
        
    end
    set(handles.Audio,'Tag','Audio');
    set(handles.Spectre,'Tag','Spectre');
    set(handles.Phase,'Tag','Phase');
    set(handles.Phase, 'XTickLabel', '');
end

% --- Executes on button press in CalculationStop.
function CalculationStop_Callback(hObject, eventdata, handles)
% hObject    handle to CalculationStop (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global indRecord IndStartNoise IndStopNoise k iStartNewRecord StopRecordPushed...
    IsPlaying totalDATA jRangeSlider hjRangeSlider IsAcquiring PlayStopBBSignal

set(handles.DisplayAllCurves, 'Enable', 'on');

indRecord;
if length(IndStartNoise)~=0
    if length(IndStopNoise)==0
        %        IndStopNoise = [IndStopNoise, indRecord]
        newDATA = getaudiodata(handles.recorder);
        indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib);
        IndStopNoise = [IndStopNoise, indN+1];
    elseif length(IndStopNoise)~=0 & IndStartNoise(end)>IndStopNoise(end)
        %        IndStopNoise = [IndStopNoise, indRecord]
        newDATA = getaudiodata(handles.recorder);
        indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib);
        IndStopNoise = [IndStopNoise, indN+1];
    end
    if length(IndStartNoise)>length(IndStopNoise)
        nb = length(IndStartNoise)-length(IndStopNoise);
        if IndStartNoise(end)>= IndStopNoise(end)
            %            IndStopNoise = cat(2, IndStopNoise, IndStartNoise(end)*ones(1,nb));
            newDATA = getaudiodata(handles.recorder);
            indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib);
            IndStopNoise = [IndStopNoise, indN+1];
        else
            %            IndStopNoise = cat(2, IndStopNoise, IndStopNoise(end)*ones(1,nb));
            newDATA = getaudiodata(handles.recorder);
            indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib);
            IndStopNoise = [IndStopNoise, indN+1];
        end
    elseif length(IndStartNoise)<length(IndStopNoise)
        nb = length(IndStopNoise)-length(IndStartNoise);
        if IndStartNoise(end)>= IndStopNoise(end)
            %            IndStartNoise = cat(2, IndStartNoise, IndStartNoise(end)*ones(1,nb));
            newDATA = getaudiodata(handles.recorder);
            indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib);
            IndStartNoise = [IndStartNoise, indN+1];
        else
            %            IndStartNoise = cat(2, IndStartNoise, IndStopNoise(end)*ones(1,nb));
            newDATA = getaudiodata(handles.recorder);
            indN = floor((size(newDATA,1)+size(totalDATA,1))/handles.nCalib);
            IndStartNoise = [IndStartNoise, indN+1];
        end
    end
end


IndStartStopNoise = [IndStartNoise; IndStopNoise];
handles.IndStartStopNoise =IndStartStopNoise;


existe = handles.ExistRecord;
StopRecordPushed;
if handles.ExistRecord == 1 & StopRecordPushed==0
    %     display('est rentre dans la boucle !');
    handles.StopRecordPushed = 1;
    StopRecordPushed = 1;
    %     handles.ExistRecord = 0;
    set(handles.pushbutton_BeginRecord, 'Enable', 'on');
    %     handles.ExistRecord = 0;
    stop(handles.recorder)
    newDATA = getaudiodata(handles.recorder);
    N = floor(size(newDATA,1)/handles.nCalib);
    %             s = newDATA(size(totalDATA,1)+1:N*handles.nCalib,1)* sqrt(2) / handles.transduc;
    %             egg = newDATA(size(totalDATA,1)+1:N*handles.nCalib,2);
    guidata(hObject, handles);
    handles.RecordType = 'RealTime';
    if get(handles.radiobuttonPipe, 'Value')==1
        %         s = newDATA(1:(indRecord-iStartNewRecord-1)*handles.nCalib,1)* sqrt(2) / handles.transduc;
        s = newDATA(1:N*handles.nCalib,1)* sqrt(2) / handles.transduc;
    else
        %         s = newDATA(1:(indRecord-iStartNewRecord-1)*handles.nCalib,1);
        s = newDATA(1:N*handles.nCalib,1);
    end
    %     egg = newDATA(1:(indRecord-iStartNewRecord-1)*handles.nCalib,2);
    egg = newDATA(1:N*handles.nCalib,2);
    %     acc = newDATA(1:N*handles.nCalib,3); % NH edit
    
    handles.totalDATA = cat(1,handles.totalDATA, [s, egg]);
    %     handles.totalDATA = cat(1,totalDATA, [s, egg, acc]); % NH edit
    handles.s = handles.totalDATA(:,1);
    handles.egg = handles.totalDATA(:,2);
    %     handles.acc = handles.totalDATA(:,3); % NH edit
    size(handles.totalDATA)
    guidata(hObject, handles);
    %     if get(handles.CalculationPlayStopBBSignal, 'Value')==1
    if IsPlaying==1
        stop(PlayStopBBSignal)
        set(handles.CalculationPlayStopBBSignal,'Value',0)
        OldPicture = get(handles.CalculationPlayStopBBSignal, 'CData');
        NewPicture=zeros(size(OldPicture));
        MaxOldPicture = max(OldPicture(:,1,1));
        if MaxOldPicture> 1 & MaxOldPicture<= 202
            for i=1:size(OldPicture,1)
                for j =1:size(OldPicture,2)
                    if OldPicture(i,j,1)==202 & OldPicture(i,j,2)==202 & OldPicture(i,j,3)==202
                        NewPicture(i,j,1)= 255;
                        NewPicture(i,j,2)= 255;
                        NewPicture(i,j,3)= 255;
                    else
                        NewPicture(i,j,1) = OldPicture(i,j,1);
                        NewPicture(i,j,2) = OldPicture(i,j,2);
                        NewPicture(i,j,3) = OldPicture(i,j,3);
                    end
                end
            end
            NewPicture=NewPicture/255;
        elseif MaxOldPicture<= 1 & MaxOldPicture<= 202/255
            for i=1:size(OldPicture,1)
                for j =1:size(OldPicture,2)
                    if OldPicture(i,j,1)==202/255 & OldPicture(i,j,2)==202/255 & OldPicture(i,j,3)==202/255
                        NewPicture(i,j,1)= 255/255;
                        NewPicture(i,j,2)= 255/255;
                        NewPicture(i,j,3)= 255/255;
                    else
                        NewPicture(i,j,1) = OldPicture(i,j,1);
                        NewPicture(i,j,2) = OldPicture(i,j,2);
                        NewPicture(i,j,3) = OldPicture(i,j,3);
                    end
                end
            end
        end
        set(handles.CalculationPlayStopBBSignal, 'CData',NewPicture)
    end
    
    
    % set(handles.DisplayAllCurves,'Enable','on')
    % set(handles.DisplayMean,'Enable','on');
    
    set(handles.PannelPlayAndSave, 'Visible', 'on');
    posPlayAndSave = get(handles.PannelPlayAndSave, 'Position');
    posPlayAndSave(1) = handles.AUDIOleft+handles.PCleft;
    set(handles.PannelPlayAndSave, 'Position', posPlayAndSave);
    % set(handles.PannelPlayAndSave, 'Position', [handles.AUDIOleft+handles.PCleft 755 85 47]);
    set(handles.PlaySelection, 'Visible', 'on');
    set(handles.PlaySelection, 'Enable', 'on');
    set(handles.SaveSelection, 'Visible', 'on');
    set(handles.SaveSelection, 'Enable', 'on');
    
    % disp('End of Recording.');
    handles.MinValSlider = 0;
    handles.NbCycle = floor(length(handles.totalDATA)/handles.nCalib);
    handles.MaxValSlider = handles.NbCycle;
    handles.TCycle = linspace(0, (length(handles.totalDATA)-1)/handles.Fs, handles.NbCycle+1);
    
    ValMAX = get(hjRangeSlider,'Maximum');
    ValMIN = get(hjRangeSlider,'Minimum');
    if (ValMAX-ValMIN)*handles.nCalib>(5*handles.Fs)
        step = floor((ValMAX-ValMIN)*handles.nCalib/(5*handles.Fs)); %5seconds limitation
        if mod(handles.nCalib, step)~=0
            step = 2^(nextpow2(step));
        end
    else
        step = 1;
    end
    
    handles.t = linspace(0, (length(handles.totalDATA)-1)/handles.Fs, length(handles.totalDATA));
    hold(handles.Audio, 'off')
    plot(handles.Audio, handles.t(1:step:end),handles.s(1:step:end), 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    hold(handles.EGG, 'off')
    plot(handles.EGG, handles.t(1:step:end),handles.egg(1:step:end), 'color', [0.3 0.3 0.3]);
    hold(handles.EGG, 'on')
    
    if size(IndStartStopNoise,2)~=0
        
        for ii = 1:size(IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            if (IndStartStopNoise(1,ii)+1)*handles.nCalib<= length(handles.t)
                t_Noise_Undefined1 = handles.t(1+IndStartStopNoise(1,ii)*handles.nCalib:step:(IndStartStopNoise(1,ii)+1)*handles.nCalib);
                s_Noise_Undefined1 = handles.s(1+IndStartStopNoise(1,ii)*handles.nCalib:step:(IndStartStopNoise(1,ii)+1)*handles.nCalib);
                egg_Noise_Undefined1 = handles.egg(1+IndStartStopNoise(1,ii)*handles.nCalib:step:(IndStartStopNoise(1,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
                plot(handles.EGG, t_Noise_Undefined1, egg_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            end
            
            if IndStartStopNoise(1,1)==0
                if IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:step:IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:step:IndStartStopNoise(2,1)*handles.nCalib);
                    egg_Noise = handles.egg(1:step:IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    plot(handles.EGG, t_Noise, egg_Noise , 'b');
                    
                    t_Noise_Undefined2 = handles.t(1+IndStartStopNoise(2,1)*handles.nCalib:step:(IndStartStopNoise(2,1)+1)*handles.nCalib);
                    s_Noise_Undefined2 = handles.s(1+IndStartStopNoise(2,1)*handles.nCalib:step:(IndStartStopNoise(2,1)+1)*handles.nCalib);
                    egg_Noise_Undefined2 = handles.egg(1+IndStartStopNoise(2,1)*handles.nCalib:step:(IndStartStopNoise(2,1)+1)*handles.nCalib);
                    plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    plot(handles.EGG, t_Noise_Undefined2, egg_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                else
                    plot(handles.Audio, handles.t(1:step:end),handles.s(1:step:end), 'b');
                    plot(handles.EGG, handles.t(1:step:end),handles.egg(1:step:end), 'b');
                end
            end
            if IndStartStopNoise(2,ii)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(IndStartStopNoise(1,ii)+1)*handles.nCalib:step:IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(IndStartStopNoise(1,ii)+1)*handles.nCalib:step:IndStartStopNoise(2,ii)*handles.nCalib);
                egg_Noise = handles.egg(1+(IndStartStopNoise(1,ii)+1)*handles.nCalib:step:IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                plot(handles.EGG, t_Noise, egg_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+IndStartStopNoise(2,ii)*handles.nCalib:step:(IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+IndStartStopNoise(2,ii)*handles.nCalib:step:(IndStartStopNoise(2,ii)+1)*handles.nCalib);
                egg_Noise_Undefined2 = handles.egg(1+IndStartStopNoise(2,ii)*handles.nCalib:step:(IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                plot(handles.EGG, t_Noise_Undefined2, egg_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(IndStartStopNoise(1,ii)+1)*handles.nCalib:step:end);
                s_Noise = handles.s(1+(IndStartStopNoise(1,ii)+1)*handles.nCalib:step:end);
                egg_Noise = handles.egg(1+(IndStartStopNoise(1,ii)+1)*handles.nCalib:step:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                plot(handles.EGG, t_Noise, egg_Noise , 'b');
            end
        end
        
    end
    xlim(handles.Audio, [handles.TCycle(1) handles.TCycle(end)])
    YLimAudio = [-max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))...
        max(abs([quantile(-handles.s,0.9999) quantile(handles.s,0.9999)]))];
    ylim(handles.Audio, YLimAudio)
    hold(handles.Audio, 'off');
    
    xlim(handles.EGG, [handles.TCycle(1) handles.TCycle(end)])
    YLimEGG = [-max(abs([quantile(-handles.egg,0.9999) quantile(handles.egg,0.9999)]))...
        max(abs([quantile(-handles.egg,0.9999) quantile(handles.egg,0.9999)]))];
    ylim(handles.EGG, YLimEGG)
    hold(handles.EGG, 'off');
    
    
    guidata(hObject,handles);
    
    
    % % handles.s = s_normalised;
    % handles.s = s; %ici handles.s est donc en [Pa]
    % handles.audio = audio;
    handles.LoadFileType = 'NEWAcuz';
    guidata(hObject, handles)
    [handles.Z, handles.freqZ] = calculate_Z(handles);
    guidata(hObject, handles);
    
    jRangeSlider = com.jidesoft.swing.RangeSlider(handles.MinValSlider,handles.MaxValSlider,handles.MinValSlider,handles.MinValSlider+1);
    jRangeSlider = javacomponent(jRangeSlider, [handles.AUDIOleft+handles.PCleft-13,...
        handles.AUDIObottom+handles.AUDIOheight+handles.PCbottom+5,handles.AUDIOwidth+2*13,26], gcf);
    % [colorR, colorG, colorB] = getRGBcolorSlider(handles)
    set(jRangeSlider,'PaintTicks',false, 'PaintLabels',false);%, 'Background', java.awt.Color(colorR, colorG, colorB))
    hjRangeSlider = handle(jRangeSlider);
    %         set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackRealTime, handles});
    set(hjRangeSlider, 'StateChangedCallback', {@DoubleCursorCallbackRealTimeNEW2, handles})
    
    
    guidata(hObject, handles);
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end


handles.StopRecordPushed = 1;
StopRecordPushed = 1;
IsAcquiring = 0;
guidata(hObject, handles);


set(handles.Audio, 'Tag', 'Audio');
set(handles.EGG, 'Tag', 'EGG');
set(handles.Spectre, 'Tag', 'Spectre');
set(handles.Phase, 'Tag', 'Phase');
% set(handles.CalculationPlayStopBBSignal, 'CData', imresize(imread('HP_on.png'),0.25));

guidata(hObject, handles);


% --- If Enable == 'on', executes on mouse press in 5 pixel border.
% --- Otherwise, executes on mouse press in 5 pixel border or over CalculationPlayStopBBSignal.
function CalculationPlayStopBBSignal_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to CalculationPlayStopBBSignal (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in checkboxSavedCurve01.
function checkboxSavedCurve01_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve01 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
%
% [PlottedCurves]= DisplayChosenCurvesNEW(handles);

global Is_SavedCurve_Checked
if get(hObject, 'Value')==0
    %     handles.RemindVal1 = Is_SavedCurve_Checked(1);
    if Is_SavedCurve_Checked(1)~=0
        handles.Is_SavedCurve_Checked(1) = Is_SavedCurve_Checked(1);
    end
    Is_SavedCurve_Checked(1) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    
else
    Is_SavedCurve_Checked(1) = handles.Is_SavedCurve_Checked(1);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    
end
handles.Is_SavedCurve_Checked(1)
Is_SavedCurve_Checked(1)
guidata(hObject, handles);
[PlottedCurves]= DisplayChosenCurvesNEW(handles);

% --- Executes on button press in checkboxSavedCurve02.
function checkboxSavedCurve02_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve02 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve02

global Is_SavedCurve_Checked
if get(hObject, 'Value')==0
    %     handles.RemindVal2 = Is_SavedCurve_Checked(2);
    if Is_SavedCurve_Checked(2)~=0
        handles.Is_SavedCurve_Checked(2) = Is_SavedCurve_Checked(2);
    end
    Is_SavedCurve_Checked(2) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(2) = handles.Is_SavedCurve_Checked(2);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve03.
function checkboxSavedCurve03_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve03 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve03

global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    %     handles.RemindVal3 = Is_SavedCurve_Checked(3);
    if Is_SavedCurve_Checked(3)~=0
        handles.Is_SavedCurve_Checked(3) = Is_SavedCurve_Checked(3);
    end
    Is_SavedCurve_Checked(3) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(3) = handles.Is_SavedCurve_Checked(3);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve04.
function checkboxSavedCurve04_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve04 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve04
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(4)~=0
        handles.Is_SavedCurve_Checked(4) = Is_SavedCurve_Checked(4);
    end
    Is_SavedCurve_Checked(4) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(4) = handles.Is_SavedCurve_Checked(4);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve05.
function checkboxSavedCurve05_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve05 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve05
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(5)~=0
        handles.Is_SavedCurve_Checked(5) = Is_SavedCurve_Checked(5);
    end
    Is_SavedCurve_Checked(5) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(5) = handles.Is_SavedCurve_Checked(5);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve10.
function checkboxSavedCurve10_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve10
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(10)~=0
        handles.Is_SavedCurve_Checked(10) = Is_SavedCurve_Checked(10);
    end
    Is_SavedCurve_Checked(10) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(10) = handles.Is_SavedCurve_Checked(10);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)


% --- Executes on button press in checkboxSavedCurve11.
function checkboxSavedCurve11_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve11
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(11)~=0
        handles.Is_SavedCurve_Checked(11) = Is_SavedCurve_Checked(11);
    end
    Is_SavedCurve_Checked(11) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(11) = handles.Is_SavedCurve_Checked(11);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve12.
function checkboxSavedCurve12_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve12 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve12
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(12)~=0
        handles.Is_SavedCurve_Checked(12) = Is_SavedCurve_Checked(12);
    end
    Is_SavedCurve_Checked(12) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(12) = handles.Is_SavedCurve_Checked(12);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve13.
function checkboxSavedCurve13_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve13 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve13
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(13)~=0
        handles.Is_SavedCurve_Checked(13) = Is_SavedCurve_Checked(13);
    end
    Is_SavedCurve_Checked(13) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(13) = handles.Is_SavedCurve_Checked(13);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve14.
function checkboxSavedCurve14_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve14 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve14
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(14)~=0
        handles.Is_SavedCurve_Checked(14) = Is_SavedCurve_Checked(14);
    end
    Is_SavedCurve_Checked(14) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(14) = handles.Is_SavedCurve_Checked(14);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve06.
function checkboxSavedCurve06_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve06 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve06
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(6)~=0
        handles.Is_SavedCurve_Checked(6) = Is_SavedCurve_Checked(6);
    end
    Is_SavedCurve_Checked(6) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(6) = handles.Is_SavedCurve_Checked(6);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve07.
function checkboxSavedCurve07_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve07 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve07
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(7)~=0
        handles.Is_SavedCurve_Checked(7) = Is_SavedCurve_Checked(7);
    end
    Is_SavedCurve_Checked(7) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(7) = handles.Is_SavedCurve_Checked(7);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve08.
function checkboxSavedCurve08_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve08 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve08
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(8)~=0
        handles.Is_SavedCurve_Checked(8) = Is_SavedCurve_Checked(8);
    end
    Is_SavedCurve_Checked(8) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(8) = handles.Is_SavedCurve_Checked(8);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve09.
function checkboxSavedCurve09_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve09 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve09
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(9)~=0
        handles.Is_SavedCurve_Checked(9) = Is_SavedCurve_Checked(9);
    end
    Is_SavedCurve_Checked(9) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(9) = handles.Is_SavedCurve_Checked(9);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve15.
function checkboxSavedCurve15_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve15 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve15
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(15)~=0
        handles.Is_SavedCurve_Checked(15) = Is_SavedCurve_Checked(15);
    end
    Is_SavedCurve_Checked(15) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(15) = handles.Is_SavedCurve_Checked(15);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve16.
function checkboxSavedCurve16_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve16 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve16
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(16)~=0
        handles.Is_SavedCurve_Checked(16) = Is_SavedCurve_Checked(16);
    end
    Is_SavedCurve_Checked(16) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(16) = handles.Is_SavedCurve_Checked(16);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve17.
function checkboxSavedCurve17_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve17 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve17
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(17)~=0
        handles.Is_SavedCurve_Checked(17) = Is_SavedCurve_Checked(17);
    end
    Is_SavedCurve_Checked(17) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(17) = handles.Is_SavedCurve_Checked(17);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve18.
function checkboxSavedCurve18_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve18 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve18
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(18)~=0
        handles.Is_SavedCurve_Checked(18) = Is_SavedCurve_Checked(18);
    end
    Is_SavedCurve_Checked(18) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(18) = handles.Is_SavedCurve_Checked(18);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve19.
function checkboxSavedCurve19_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve19 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve19
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(19)~=0
        handles.Is_SavedCurve_Checked(19) = Is_SavedCurve_Checked(19);
    end
    Is_SavedCurve_Checked(19) = 0;
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(19) = handles.Is_SavedCurve_Checked(19);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)

% --- Executes on button press in checkboxSavedCurve20.
function checkboxSavedCurve20_Callback(hObject, eventdata, handles)
% hObject    handle to checkboxSavedCurve20 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkboxSavedCurve20
global Is_SavedCurve_Checked

if get(hObject, 'Value')==0
    if Is_SavedCurve_Checked(20)~=0
        handles.Is_SavedCurve_Checked(20) = Is_SavedCurve_Checked(20);
    end
    Is_SavedCurve_Checked(20) = 0;
    Is_SavedCurve_Checked
    find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
else
    Is_SavedCurve_Checked(20) = handles.Is_SavedCurve_Checked(20);
    %     Is_SavedCurve_Checked
    %     find(Is_SavedCurve_Checked)
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
guidata(hObject, handles)










% --- Executes on button press in pushbutton61.
function pushbutton61_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton61 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton62.
function pushbutton62_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton62 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton63.
function pushbutton63_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton63 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton64.
function pushbutton64_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton64 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton65.
function pushbutton65_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton65 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in deleteSavedCurve01.
function deleteSavedCurve01_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve01 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            if (handles.IndStartStopNoise(1,ii)+1)*handles.nCalib<=length(handles.t)
                t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            end
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end


% --- Executes on button press in deleteSavedCurve02.
function deleteSavedCurve02_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve02 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end

% --- Executes on button press in deleteSavedCurve03.
function deleteSavedCurve03_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve03 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end



% --- Executes on button press in deleteSavedCurve04.
function deleteSavedCurve04_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve04 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end

% --- Executes on button press in deleteSavedCurve05.
function deleteSavedCurve05_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve05 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end



% --- Executes on button press in deleteSavedCurve06.
function deleteSavedCurve06_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve06 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end


% --- Executes on button press in deleteSavedCurve07.
function deleteSavedCurve07_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve07 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end

% --- Executes on button press in deleteSavedCurve08.
function deleteSavedCurve08_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve08 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end

% --- Executes on button press in deleteSavedCurve09.
function deleteSavedCurve09_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve09 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end

% --- Executes on button press in deleteSavedCurve10.
function deleteSavedCurve10_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve10 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end


% --- Executes on button press in deleteSavedCurve11.
function deleteSavedCurve11_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve11 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end
% --- Executes on button press in deleteSavedCurve12.
function deleteSavedCurve12_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve12 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    SavedCurves;
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked;
    Is_SavedCurve_Checked;
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end

% --- Executes on button press in deleteSavedCurve13.
function deleteSavedCurve13_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve13 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber;
Is_SavedCurve_Checked;
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag');
        index = str2num(Tag(end-1:end));
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)]);
            obj = obj(1);
            FontSize = get(obj, 'FontSize');
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)]);
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)]);
            obj = obj(1);
            FontSize = get(obj, 'FontSize');
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)]);
            obj2 = obj2(1);
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked;
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked;

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag');
    index = str2num(Tag(end-1:end));
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index);
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index);
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)]);
        obj = obj(1);
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)]);
        obj2 = obj2(1);
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)]);
        obj = obj(1);
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)]);
        obj2 = obj2(1);
    end
    UserData = get(obj, 'UserData');
    Type = UserData{1};
    if index<SavedCurvesNumber
        SavedCurvesNumber;
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1);
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1);
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight');
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor');
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize');
            StringObj_jjP1 = get(obj_jjP1, 'String');
            ValueObj_jjP1 = get(obj_jjP1, 'Value');
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight');
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor');
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize');
            StringObj_jjP12 = get(obj_jjP12, 'String');
            ValueObj_jjP12 = get(obj_jjP12, 'Value');
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1;
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber;
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked;
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1;
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1;
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    SavedCurves;
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked;
    Is_SavedCurve_Checked;
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end


% --- Executes on button press in deleteSavedCurve14.
function deleteSavedCurve14_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve14 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber;
Is_SavedCurve_Checked;
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        %         display('**');
        
        Tag = get(hObject, 'Tag');
        index = str2num(Tag(end-1:end));
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)]);
            obj = obj(1);
            FontSize = get(obj, 'FontSize');
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)]);
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)]);
            obj = obj(1);
            FontSize = get(obj, 'FontSize');
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)]);
            obj2 = obj2(1);
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked;
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked;

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag');
    index = str2num(Tag(end-1:end));
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index);
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index);
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)]);
        obj = obj(1);
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)]);
        obj2 = obj2(1);
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)]);
        obj = obj(1);
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)]);
        obj2 = obj2(1);
    end
    UserData = get(obj, 'UserData');
    Type = UserData{1};
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1);
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1);
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight');
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor');
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize');
            StringObj_jjP1 = get(obj_jjP1, 'String');
            ValueObj_jjP1 = get(obj_jjP1, 'Value');
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight');
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor');
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize');
            StringObj_jjP12 = get(obj_jjP12, 'String');
            ValueObj_jjP12 = get(obj_jjP12, 'Value');
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1;
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber;
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end

% --- Executes on button press in deleteSavedCurve15.
function deleteSavedCurve15_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve15 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    SavedCurves;
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked;
    Is_SavedCurve_Checked;
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end



% --- Executes on button press in deleteSavedCurve16.
function deleteSavedCurve16_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve16 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber;
Is_SavedCurve_Checked;
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag');
        index = str2num(Tag(end-1:end));
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)]);
            obj = obj(1);
            FontSize = get(obj, 'FontSize');
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)]);
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)]);
            obj = obj(1);
            FontSize = get(obj, 'FontSize');
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)]);
            obj2 = obj2(1);
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked;
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked;

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag');
    index = str2num(Tag(end-1:end));
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index);
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index);
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)]);
        obj = obj(1);
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)]);
        obj2 = obj2(1);
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)]);
        obj = obj(1);
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)]);
        obj2 = obj2(1);
    end
    UserData = get(obj, 'UserData');
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber;
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1);
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1);
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight');
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor');
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize');
            StringObj_jjP1 = get(obj_jjP1, 'String');
            ValueObj_jjP1 = get(obj_jjP1, 'Value');
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight');
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor');
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize');
            StringObj_jjP12 = get(obj_jjP12, 'String');
            ValueObj_jjP12 = get(obj_jjP12, 'Value');
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1;
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber;
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked;
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end


% --- Executes on button press in deleteSavedCurve17.
function deleteSavedCurve17_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve17 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber;
Is_SavedCurve_Checked;
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**');
        
        Tag = get(hObject, 'Tag');
        index = str2num(Tag(end-1:end));
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)]);
            obj = obj(1);
            FontSize = get(obj, 'FontSize');
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)]);
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)]);
            obj = obj(1);
            FontSize = get(obj, 'FontSize');
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)]);
            obj2 = obj2(1);
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked;
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked;

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag');
    index = str2num(Tag(end-1:end));
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index);
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index);
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)]);
        obj = obj(1);
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)]);
        obj2 = obj2(1);
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)]);
        obj = obj(1);
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)]);
        obj2 = obj2(1);
    end
    UserData = get(obj, 'UserData');
    Type = UserData{1};
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1);
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1);
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight');
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor');
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize');
            StringObj_jjP1 = get(obj_jjP1, 'String');
            ValueObj_jjP1 = get(obj_jjP1, 'Value');
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight');
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor');
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize');
            StringObj_jjP12 = get(obj_jjP12, 'String');
            ValueObj_jjP12 = get(obj_jjP12, 'Value');
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1;
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber;
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked;
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    SavedCurves;
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked;
    Is_SavedCurve_Checked;
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end

% --- Executes on button press in deleteSavedCurve18.
function deleteSavedCurve18_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve18 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber;
Is_SavedCurve_Checked;
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**');
        
        Tag = get(hObject, 'Tag');
        index = str2num(Tag(end-1:end));
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)]);
            obj = obj(1);
            FontSize = get(obj, 'FontSize');
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)]);
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)]);
            obj = obj(1);
            FontSize = get(obj, 'FontSize');
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)]);
            obj2 = obj2(1);
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked;
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked;

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag');
    index = str2num(Tag(end-1:end));
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index);
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index);
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)]);
        obj = obj(1);
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)]);
        obj2 = obj2(1);
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)]);
        obj = obj(1);
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)]);
        obj2 = obj2(1);
    end
    UserData = get(obj, 'UserData');
    Type = UserData{1};
    if index<SavedCurvesNumber
        SavedCurvesNumber;
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1);
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1);
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight');
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor');
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize');
            StringObj_jjP1 = get(obj_jjP1, 'String');
            ValueObj_jjP1 = get(obj_jjP1, 'Value');
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight');
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor');
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize');
            StringObj_jjP12 = get(obj_jjP12, 'String');
            ValueObj_jjP12 = get(obj_jjP12, 'Value');
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1;
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber;
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked;
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    SavedCurves;
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked;
    Is_SavedCurve_Checked;
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end


% --- Executes on button press in deleteSavedCurve19.
function deleteSavedCurve19_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve19 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked;
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value');
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked
    SavedCurvesNumber
    SavedplotRawDataNumber
    SavedplotFilteredDataNumber
    SavedCurves
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked
    Is_SavedCurve_Checked
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end


% --- Executes on button press in deleteSavedCurve20.
function deleteSavedCurve20_Callback(hObject, eventdata, handles)
% hObject    handle to deleteSavedCurve20 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global SavedCurvesNumber Is_SavedCurve_Checked SavedplotRawDataNumber...
    SavedplotFilteredDataNumber SavedCurves hjRangeSlider Colors
SavedCurvesNumber
Is_SavedCurve_Checked
% if length(find(handles.Is_SavedCurve_Checked))~= SavedCurvesNumber
length(find(handles.Is_SavedCurve_Checked))
numRaw = 0;
numFiltered = 0;
for aa=1:SavedCurvesNumber
    %         if handles.Is_SavedCurve_Checked(aa)==0
    if Is_SavedCurve_Checked(aa)~= 0
        handles.Is_SavedCurve_Checked(aa) = Is_SavedCurve_Checked(aa);
        if Is_SavedCurve_Checked(aa)<0
            numRaw = numRaw+1;
        elseif Is_SavedCurve_Checked>0
            numFiltered = numFiltered+1;
        end
    else
        display('**')
        
        Tag = get(hObject, 'Tag')
        index = str2num(Tag(end-1:end))
        if index<10
            obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
            obj2 = obj2(1);
        else
            obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
            obj = obj(1)
            FontSize = get(obj, 'FontSize')
            obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
            obj2 = obj2(1)
        end
        if FontSize==25
            numRaw = numRaw+1;
            handles.Is_SavedCurve_Checked(aa) = -numRaw;
        else
            numFiltered = numFiltered+1;
            handles.Is_SavedCurve_Checked(aa) = numFiltered;
        end
    end
    %         elseif handles.Is_SavedCurve_Checked(aa)<0
    %             numRaw = numRaw+1;
    %         elseif handles.Is_SavedCurve_Checked(aa)>0
    %             numFiltered = numFiltered+1;
    %         end
end
guidata(hObject, handles);
test = handles.Is_SavedCurve_Checked
guidata(hObject, handles);
% end
test = handles.Is_SavedCurve_Checked

question = questdlg('Do you want to delete this curve ?','User Input','Yes','No', 'No');
if isequal(question, 'Yes')
    Tag = get(hObject, 'Tag')
    index = str2num(Tag(end-1:end))
    if handles.Is_SavedCurve_Checked(index)~=0
        ind_IsSavedCurveChecked = handles.Is_SavedCurve_Checked(index)
    else
        ind_IsSavedCurveChecked = Is_SavedCurve_Checked(index)
    end
    if index<10
        obj = findobj('Tag', ['checkboxSavedCurve0', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend0', num2str(index)])
        obj2 = obj2(1)
    else
        obj = findobj('Tag', ['checkboxSavedCurve', num2str(index)])
        obj = obj(1)
        obj2 = findobj('Tag', ['checkboxlegend', num2str(index)])
        obj2 = obj2(1)
    end
    UserData = get(obj, 'UserData')
    Type = UserData{1}
    if index<SavedCurvesNumber
        SavedCurvesNumber
        %             for jj=index:SavedCurvesNumber-1
        jj=index;
        while jj<SavedCurvesNumber
            if handles.Is_SavedCurve_Checked(jj+1)~=0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj+1)
            else
                handles.Is_SavedCurve_Checked(jj)= Is_SavedCurve_Checked(jj+1)
            end
            guidata(hObject, handles)
            if strcmp(Type, 'plotRawData')==1 & handles.Is_SavedCurve_Checked(jj)<0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)+1;
            elseif strcmp(Type, 'plotFilteredData')==1 & handles.Is_SavedCurve_Checked(jj)>0
                handles.Is_SavedCurve_Checked(jj)= handles.Is_SavedCurve_Checked(jj)-1;
            end
            if jj<9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve0', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend0', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            elseif jj==9
                obj_jj = findobj('Tag', ['checkboxSavedCurve0', num2str(jj)]);
                obj_jj = obj_jj(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend0', num2str(jj)]);
                obj_jj2 = obj_jj2(1);
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 =obj_jjP1(1);
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 =obj_jjP12(1);
            elseif jj>9
                obj_jj = findobj('Tag', ['checkboxSavedCurve', num2str(jj)]);
                obj_jj =obj_jj(1)
                obj_jjP1 = findobj('Tag', ['checkboxSavedCurve', num2str(jj+1)]);
                obj_jjP1 = obj_jjP1(1);
                obj_jj2 = findobj('Tag', ['checkboxlegend', num2str(jj)]);
                obj_jj2 =obj_jj2(1)
                obj_jjP12 = findobj('Tag', ['checkboxlegend', num2str(jj+1)]);
                obj_jjP12 = obj_jjP12(1);
            end
            set(obj_jj, 'UserData', get(obj_jjP1, 'UserData'));
            FontWeightObj_jjP1 = get(obj_jjP1, 'FontWeight')
            ForegroundColorObj_jjP1 = get(obj_jjP1, 'ForegroundColor')
            FontSizeObj_jjP1 = get(obj_jjP1, 'FontSize')
            StringObj_jjP1 = get(obj_jjP1, 'String')
            ValueObj_jjP1 = get(obj_jjP1, 'Value')
            set(obj_jj, 'Value',get(obj_jjP1, 'Value'));
            set(obj_jj, 'String', get(obj_jjP1, 'String'));
            set(obj_jj, 'FontSize',get(obj_jjP1, 'FontSize'));
            set(obj_jj, 'ForegroundColor', get(obj_jjP1, 'ForegroundColor'));
            set(obj_jj, 'FontWeight', get(obj_jjP1, 'FontWeight'));
            
            FontWeightObj_jjP12 = get(obj_jjP12, 'FontWeight')
            ForegroundColorObj_jjP12 = get(obj_jjP12, 'ForegroundColor')
            FontSizeObj_jjP12 = get(obj_jjP12, 'FontSize')
            StringObj_jjP12 = get(obj_jjP12, 'String')
            ValueObj_jjP12 = get(obj_jjP12, 'Value')
            set(obj_jj2, 'Value',get(obj_jjP12, 'Value'));
            set(obj_jj2, 'String', get(obj_jjP12, 'String'));
            set(obj_jj2, 'FontSize',get(obj_jjP12, 'FontSize'));
            set(obj_jj2, 'ForegroundColor', get(obj_jjP12, 'ForegroundColor'));
            set(obj_jj2, 'FontWeight', get(obj_jjP12, 'FontWeight'));
            jj=jj+1
        end
    end
    handles.Is_SavedCurve_Checked(SavedCurvesNumber)=0;
    Is_SavedCurve_Checked(SavedCurvesNumber) = 0;
    guidata(hObject, handles);
    if SavedCurvesNumber<10
        check_obj = findobj('Tag', ['checkboxSavedCurve0', num2str(SavedCurvesNumber)]);
        check_obj =check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve0', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend0', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    else
        check_obj = findobj('Tag', ['checkboxSavedCurve', num2str(SavedCurvesNumber)]);
        check_obj = check_obj(1);
        delete_obj = findobj('Tag', ['deleteSavedCurve', num2str(SavedCurvesNumber)]);
        delete_obj = delete_obj(1);
        legend_obj = findobj('Tag', ['checkboxlegend', num2str(SavedCurvesNumber)]);
        legend_obj = legend_obj(1);
    end
    
    set(check_obj, 'Visible', 'off');
    set(check_obj, 'Value', []);
    set(check_obj, 'UserData', {});
    set(delete_obj, 'Visible', 'off');
    set(legend_obj, 'Visible', 'off');
    if strcmp(Type(1:11) , 'plotRawData')==1
        %display('*-+-*-+-*-+-*')
        SavedplotRawDataNumber
        if SavedplotRawDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotRawData)-1)
                SavedCurves.plotRawData{kk}=SavedCurves.plotRawData{kk+1};
            end
            SavedCurves.plotRawData = SavedCurves.plotRawData(1:(SavedplotRawDataNumber-1));
        else
            SavedCurves.plotRawData = {};
        end
        SavedplotRawDataNumber = SavedplotRawDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    else
        %display('/=/*/=/*/=/*/=')
        if SavedplotFilteredDataNumber>1
            for kk = abs(ind_IsSavedCurveChecked):(length(SavedCurves.plotFilteredData)-1)
                SavedCurves.plotFilteredData{kk}=SavedCurves.plotFilteredData{kk+1};
            end
            SavedCurves.plotFilteredData = SavedCurves.plotFilteredData(1:(SavedplotFilteredDataNumber-1));
        else
            SavedCurves.plotFilteredData = {};
        end
        SavedplotFilteredDataNumber = SavedplotFilteredDataNumber -1;
        SavedCurvesNumber = SavedCurvesNumber -1;
    end
    test = handles.Is_SavedCurve_Checked
    for uu=1:SavedCurvesNumber
        if uu<10
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve0', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        else
            checkboxVal = get(findobj('Tag', ['checkboxSavedCurve', num2str(uu)]), 'Value')
            if strcmp(class(checkboxVal), 'cell')==1
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal{1,1};
            else
                Is_SavedCurve_Checked(uu) = handles.Is_SavedCurve_Checked(uu)*checkboxVal(1,1);
            end
        end
    end
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    
    
    %on recupere le numero du curseur
    ValLo = get(hjRangeSlider,'LowValue');
    ValHi = get(hjRangeSlider,'HighValue');
    % on calcule les limites
    XLim = double(get(handles.Audio, 'XLim'));
    xmin = XLim(1);
    xmax = XLim(2);
    [~,indmin] = min(abs(handles.TCycle-xmin));
    xmin = handles.TCycle(indmin);
    [~,indmax] = min(abs(handles.TCycle-xmax));
    xmax = handles.TCycle(indmax);
    % on donne le numero de la colonne de la matrice Z correspondante
    indLo = ValLo+1;
    indHi = ValHi+1;
    % on calcule et affiche le nombre de cycle sur lesquels on moyenne
    NbAvg = indHi-indLo;
    set(handles.text_ValNbAverage_Browse, 'String', int2str(NbAvg));
    
    
    maxValSlider = handles.MaxValSlider;
    minValSlider = handles.MinValSlider;
    
    tLo = handles.TCycle(ValLo+1);
    handles.tLo = tLo;
    tHi = handles.TCycle(ValHi+1);
    handles.tHi = tHi;
    
    plot(handles.Audio, handles.t,handles.s, 'color', [0.3 0.3 0.3]);
    hold(handles.Audio, 'on')
    
    if size(handles.IndStartStopNoise,2)~=0
        
        for ii = 1:size(handles.IndStartStopNoise,2)
            % % t_Noise = handles.t(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            % % s_Noise = s(1+(IndStartStopNoise(1,ii)-1)*handles.nCalib:(IndStartStopNoise(2,ii)-1)*handles.nCalib);
            t_Noise_Undefined1 = handles.t(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            s_Noise_Undefined1 = handles.s(1+handles.IndStartStopNoise(1,ii)*handles.nCalib:(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib);
            plot(handles.Audio, t_Noise_Undefined1, s_Noise_Undefined1 , 'color', [0.7 0.7 0.7]);
            
            if handles.IndStartStopNoise(1,1)==0
                if handles.IndStartStopNoise(2,1)*handles.nCalib <length(handles.s)
                    t_Noise = handles.t(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    s_Noise = handles.s(1:handles.IndStartStopNoise(2,1)*handles.nCalib);
                    plot(handles.Audio, t_Noise, s_Noise , 'b');
                    
                    if (handles.IndStartStopNoise(2,1)+1)*handles.nCalib <length(handles.s)
                        t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,1)*handles.nCalib:(handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,1)*(handles.nCalib:handles.IndStartStopNoise(2,1)+1)*handles.nCalib);
                        plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
                    end
                else
                    plot(handles.Audio, handles.t, handles.s, 'b');
                end
            end
            if (handles.IndStartStopNoise(2,ii)+1)*handles.nCalib<length(handles.s)
                
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:handles.IndStartStopNoise(2,ii)*handles.nCalib);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
                
                t_Noise_Undefined2 = handles.t(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                s_Noise_Undefined2 = handles.s(1+handles.IndStartStopNoise(2,ii)*handles.nCalib:(handles.IndStartStopNoise(2,ii)+1)*handles.nCalib);
                plot(handles.Audio, t_Noise_Undefined2, s_Noise_Undefined2 , 'color', [0.7 0.7 0.7]);
            else
                t_Noise = handles.t(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                s_Noise = handles.s(1+(handles.IndStartStopNoise(1,ii)+1)*handles.nCalib:end);
                plot(handles.Audio, t_Noise, s_Noise , 'b');
            end
            
            % t_Noise = [t_Noise, handles.t(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)];
            % s_Noise = [s_Noise, s(IndStartStopNoise(1,ii)*handles.nCalib:IndStartStopNoise(2,ii)*handles.nCalib)'];
        end
        
    end
    
    set(handles.Audio, 'Xlim', [xmin xmax]);
    set(handles.Audio, 'Ylim',[min(handles.s) max(handles.s)]);
    plot(handles.Audio, [handles.tLo handles.tLo],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    plot(handles.Audio, [handles.tHi handles.tHi],[min(handles.s) max(handles.s)],'color',[0.55 0.75 1],'linewidth',3);
    hold(handles.Audio, 'off')
    
    if SavedCurvesNumber>0
        for kk=1:SavedplotRawDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotRawData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotRawData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
        for kk=1:SavedplotFilteredDataNumber
            hold(handles.Audio, 'on');
            plot(handles.Audio, [handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(1)),...
                handles.TCycle(1+SavedCurves.plotFilteredData{kk}.SliderVal(2))], [0.9 *max(handles.s),...
                0.9 *max(handles.s)],'color', Colors{SavedCurves.plotFilteredData{kk}.IndColor}, 'linewidth', 3);
            hold(handles.Audio, 'off');
        end
    end
    
    Is_SavedCurve_Checked;
    SavedCurvesNumber;
    SavedplotRawDataNumber;
    SavedplotFilteredDataNumber;
    SavedCurves;
    assignin('base', 'SavedCurves', SavedCurves);
    test = handles.Is_SavedCurve_Checked;
    Is_SavedCurve_Checked;
    [PlottedCurves]= DisplayChosenCurvesNEW(handles);
end



% --- Executes on button press in pushbutton85.
function pushbutton85_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton85 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton86.
function pushbutton86_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton86 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton87.
function pushbutton87_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton87 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton88.
function pushbutton88_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton88 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton89.
function pushbutton89_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton89 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton90.
function pushbutton90_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton90 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton91.
function pushbutton91_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton91 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton92.
function pushbutton92_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton92 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pushbutton93.
function pushbutton93_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton93 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on slider movement.
function SliderHarmonicsWidth_Callback(hObject, eventdata, handles)
% hObject    handle to SliderHarmonicsWidth (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global ValHarmonicWidth StopRecordPushed indINISliderHarmonicsWidth c2 IndSliderHarmonicsWidth
% display('slider harmonic width')

c1 = clock;
if indINISliderHarmonicsWidth==0
    indINISliderHarmonicsWidth=1;
    c2=clock;
    set(handles.ValHarmonicWidth, 'String', [num2str(round(get(hObject,'Value')))]);
    ValHarmonicWidth = round(get(hObject,'Value'));
    if (StopRecordPushed == 1 || handles.LoadFile ==1) % & get(handles.PlaySelection, 'Value')==0
        display('slider harmonic width LOOP')
        [PlottedCurves]= DisplayChosenCurvesNEW(handles);
        guidata(hObject, handles);
        c2=clock;
    end
else
    if  ((c1(end-2)*3600+c1(end-1)*60+c1(end))-(c2(end-2)*3600+c2(end-1)*60+c2(end))>0.15 & IndSliderHarmonicsWidth<1)
        set(handles.ValHarmonicWidth, 'String', [num2str(round(get(hObject,'Value')))]);
        ValHarmonicWidth = round(get(hObject,'Value'));
        if (StopRecordPushed == 1 || handles.LoadFile ==1) % & get(handles.PlaySelection, 'Value')==0
            display('slider harmonic width LOOP')
            [PlottedCurves]= DisplayChosenCurvesNEW(handles);
            guidata(hObject, handles);
            IndSliderHarmonicsWidth =IndSliderHarmonicsWidth+1;
            c2=clock;
        end
    elseif (c1(end-2)*3600+c1(end-1)*60+c1(end))-(c2(end-2)*3600+c2(end-1)*60+c2(end))>0.3
        set(handles.ValHarmonicWidth, 'String', [num2str(round(get(hObject,'Value')))]);
        ValHarmonicWidth = round(get(hObject,'Value'));
        if (StopRecordPushed == 1 || handles.LoadFile ==1) % & get(handles.PlaySelection, 'Value')==0
            display('slider harmonic width LOOP')
            [PlottedCurves]= DisplayChosenCurvesNEW(handles);
            guidata(hObject, handles);
            IndSliderHarmonicsWidth =IndSliderHarmonicsWidth+1;
            c2=clock;
        end
    else
        c2test=clock;
        IndSliderHarmonicsWidth = 0;
        set(handles.ValHarmonicWidth, 'String', [num2str(round(get(hObject,'Value')))]);
        ValHarmonicWidth = round(get(hObject,'Value'));
        c2=clock;
        pause(0.15 - abs(mod(c2(end)-c2test(end),60)))
    end
end



% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider


% --- Executes during object creation, after setting all properties.
function SliderHarmonicsWidth_CreateFcn(hObject, eventdata, handles)
% hObject    handle to SliderHarmonicsWidth (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called
global ValHarmonicWidth indINISliderHarmonicsWidth IndSliderHarmonicsWidth
indINISliderHarmonicsWidth = 0;
ValHarmonicWidth = round(get(hObject,'Value'));
IndSliderHarmonicsWidth = 0;


% --- Executes on slider movement.
function SliderResonanceAmplitude_Callback(hObject, eventdata, handles)
% hObject    handle to SliderResonanceAmplitude (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
global ValRAmp StopRecordPushed c2 indINISliderResonanceAmplitude IndSliderResonanceAmplitude
set(handles.ValRAmplitude, 'String', [num2str(round(get(hObject,'Value')))]);


c1 = clock;
if indINISliderResonanceAmplitude==0
    indINISliderResonanceAmplitude=1;
    c2=clock;
    set(handles.ValRAmplitude, 'String', [num2str(round(get(hObject,'Value')))]);
    ValRAmp = round(get(hObject,'Value'));
    if (StopRecordPushed == 1 || handles.LoadFile ==1) % & get(handles.PlaySelection, 'Value')==0
        display('slider harmonic width LOOP')
        [PlottedCurves]= DisplayChosenCurvesNEW(handles);
        guidata(hObject, handles);
        c2=clock;
    end
else
    if  ((c1(end-2)*3600+c1(end-1)*60+c1(end))-(c2(end-2)*3600+c2(end-1)*60+c2(end))>0.15 & IndSliderResonanceAmplitude<1)
        set(handles.ValRAmplitude, 'String', [num2str(round(get(hObject,'Value')))]);
        ValRAmp = round(get(hObject,'Value'));
        if (StopRecordPushed == 1 || handles.LoadFile ==1) % & get(handles.PlaySelection, 'Value')==0
            display('slider harmonic width LOOP')
            [PlottedCurves]= DisplayChosenCurvesNEW(handles);
            guidata(hObject, handles);
            IndSliderResonanceAmplitude =IndSliderResonanceAmplitude+1;
            c2=clock;
        end
    elseif (c1(end-2)*3600+c1(end-1)*60+c1(end))-(c2(end-2)*3600+c2(end-1)*60+c2(end))>0.3
        set(handles.ValRAmplitude, 'String', [num2str(round(get(hObject,'Value')))]);
        ValRAmp = round(get(hObject,'Value'));
        if (StopRecordPushed == 1 || handles.LoadFile ==1) % & get(handles.PlaySelection, 'Value')==0
            display('slider harmonic width LOOP')
            [PlottedCurves]= DisplayChosenCurvesNEW(handles);
            guidata(hObject, handles);
            IndSliderResonanceAmplitude =IndSliderResonanceAmplitude+1;
            c2=clock;
        end
    else
        c2test=clock;
        IndSliderResonanceAmplitude = 0;
        set(handles.ValRAmplitude, 'String', [num2str(round(get(hObject,'Value')))]);
        ValRAmp = round(get(hObject,'Value'));
        c2=clock;
        pause(0.15 - abs(mod(c2(end)-c2test(end),60)))
    end
end


% --- Executes during object creation, after setting all properties.
function SliderResonanceAmplitude_CreateFcn(hObject, eventdata, handles)
% hObject    handle to SliderResonanceAmplitude (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called
global ValRAmp indINISliderResonanceAmplitude IndSliderResonanceAmplitude
ValRAmp = round(get(hObject,'Value'));
indINISliderResonanceAmplitude =0;
IndSliderResonanceAmplitude = 0;


% --- Executes on button press in pictureTrebbleClef.
function pictureTrebbleClef_Callback(hObject, eventdata, handles)
% hObject    handle to pictureTrebbleClef (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in pictureTwoTrebbleClefs.
function pictureTwoTrebbleClefs_Callback(hObject, eventdata, handles)
% hObject    handle to pictureTwoTrebbleClefs (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TrebbleClefPictureHOR_1.
function TrebbleClefPictureHOR_1_Callback(hObject, eventdata, handles)
% hObject    handle to TrebbleClefPictureHOR_1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TrebbleClefPictureHOR_2.
function TrebbleClefPictureHOR_2_Callback(hObject, eventdata, handles)
% hObject    handle to TrebbleClefPictureHOR_2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TrebbleClefPictureHOR_3.
function TrebbleClefPictureHOR_3_Callback(hObject, eventdata, handles)
% hObject    handle to TrebbleClefPictureHOR_3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TrebbleClefPictureHOR_4.
function TrebbleClefPictureHOR_4_Callback(hObject, eventdata, handles)
% hObject    handle to TrebbleClefPictureHOR_4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TrebbleClefPictureHOR_5.
function TrebbleClefPictureHOR_5_Callback(hObject, eventdata, handles)
% hObject    handle to TrebbleClefPictureHOR_5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TrebbleClefPictureHOR_6.
function TrebbleClefPictureHOR_6_Callback(hObject, eventdata, handles)
% hObject    handle to TrebbleClefPictureHOR_6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TrebbleClefPictureHOR_7.
function TrebbleClefPictureHOR_7_Callback(hObject, eventdata, handles)
% hObject    handle to TrebbleClefPictureHOR_7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TrebbleClefPictureHOR_8.
function TrebbleClefPictureHOR_8_Callback(hObject, eventdata, handles)
% hObject    handle to TrebbleClefPictureHOR_8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TwoTrebbleClefPictureHOR_1.
function TwoTrebbleClefPictureHOR_1_Callback(hObject, eventdata, handles)
% hObject    handle to TwoTrebbleClefPictureHOR_1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TwoTrebbleClefPictureHOR_2.
function TwoTrebbleClefPictureHOR_2_Callback(hObject, eventdata, handles)
% hObject    handle to TwoTrebbleClefPictureHOR_2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TwoTrebbleClefPictureHOR_3.
function TwoTrebbleClefPictureHOR_3_Callback(hObject, eventdata, handles)
% hObject    handle to TwoTrebbleClefPictureHOR_3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TwoTrebbleClefPictureHOR_4.
function TwoTrebbleClefPictureHOR_4_Callback(hObject, eventdata, handles)
% hObject    handle to TwoTrebbleClefPictureHOR_4 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TwoTrebbleClefPictureHOR_5.
function TwoTrebbleClefPictureHOR_5_Callback(hObject, eventdata, handles)
% hObject    handle to TwoTrebbleClefPictureHOR_5 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TwoTrebbleClefPictureHOR_6.
function TwoTrebbleClefPictureHOR_6_Callback(hObject, eventdata, handles)
% hObject    handle to TwoTrebbleClefPictureHOR_6 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TwoTrebbleClefPictureHOR_7.
function TwoTrebbleClefPictureHOR_7_Callback(hObject, eventdata, handles)
% hObject    handle to TwoTrebbleClefPictureHOR_7 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in TwoTrebbleClefPictureHOR_8.
function TwoTrebbleClefPictureHOR_8_Callback(hObject, eventdata, handles)
% hObject    handle to TwoTrebbleClefPictureHOR_8 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on button press in radiobuttonCalculationAcuz.
function radiobutton22_Callback(hObject, eventdata, handles)
% hObject    handle to radiobuttonCalculationAcuz (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobuttonCalculationAcuz



function YlimMinMagnitude_Callback(hObject, eventdata, handles)
% hObject    handle to YlimMinMagnitude (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of YlimMinMagnitude as text
%        str2double(get(hObject,'String')) returns contents of YlimMinMagnitude as a double


% --- Executes during object creation, after setting all properties.
function YlimMinMagnitude_CreateFcn(hObject, eventdata, handles)
% hObject    handle to YlimMinMagnitude (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function YlimMaxMagnitude_Callback(hObject, eventdata, handles)
% hObject    handle to YlimMaxMagnitude (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of YlimMaxMagnitude as text
%        str2double(get(hObject,'String')) returns contents of YlimMaxMagnitude as a double


% --- Executes during object creation, after setting all properties.
function YlimMaxMagnitude_CreateFcn(hObject, eventdata, handles)
% hObject    handle to YlimMaxMagnitude (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes during object creation, after setting all properties.
function edit25_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit25 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called


% --- Executes on key press with focus on SaveSelection and none of its controls.
function SaveSelection_KeyPressFcn(hObject, eventdata, handles)
% hObject    handle to SaveSelection (see GCBO)
% eventdata  structure with the following fields (see MATLAB.UI.CONTROL.UICONTROL)
%	Key: name of the key that was pressed, in lower case
%	Character: character interpretation of the key(s) that was pressed
%	Modifier: name(s) of the modifier key(s) (i.e., control, shift) pressed
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on key press with focus on pushbutton_LoadParameters and none of its controls.
function pushbutton_LoadParameters_KeyPressFcn(hObject, eventdata, handles)
% hObject    handle to pushbutton_LoadParameters (see GCBO)
% eventdata  structure with the following fields (see MATLAB.UI.CONTROL.UICONTROL)
%	Key: name of the key that was pressed, in lower case
%	Character: character interpretation of the key(s) that was pressed
%	Modifier: name(s) of the modifier key(s) (i.e., control, shift) pressed
% handles    structure with handles and user data (see GUIDATA)


% --- If Enable == 'on', executes on mouse press in 5 pixel border.
% --- Otherwise, executes on mouse press in 5 pixel border or over pushbutton_LoadParameters.
function pushbutton_LoadParameters_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to pushbutton_LoadParameters (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)


% --- Executes on selection change in OutputSelection.
function OutputSelection_Callback(hObject, eventdata, handles)
% hObject    handle to OutputSelection (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns OutputSelection contents as cell array
%        contents{get(hObject,'Value')} returns selected item from OutputSelection


% --- Executes during object creation, after setting all properties.
function OutputSelection_CreateFcn(hObject, eventdata, handles)
% hObject    handle to OutputSelection (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in InputSelection.
function InputSelection_Callback(hObject, eventdata, handles)
% hObject    handle to InputSelection (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns InputSelection contents as cell array
%        contents{get(hObject,'Value')} returns selected item from InputSelection


% --- Executes during object creation, after setting all properties.
function InputSelection_CreateFcn(hObject, eventdata, handles)
% hObject    handle to InputSelection (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in audioInputMenu.
function audioInputMenu_Callback(hObject, eventdata, handles)
% hObject    handle to audioInputMenu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns audioInputMenu contents as cell array
%        contents{get(hObject,'Value')} returns selected item from audioInputMenu
% %
% %
% devices = audiodevinfo;
% for count = 1:max(size(devices.input))
%     deviceCell{count} = devices.input(count).Name;
% end
%
% set(handles.audioInputMenu, 'String', cellstr(deviceCell));

DevIndexInput = get(hObject, 'Value');


%
devinfo = audiodevinfo;
% input
input = devinfo.input;
% LInput = max(size(input));
% InputName ={input(linspace(1,LInput,LInput)).Name};
% [~, DevIndexMOTU] = max(strcmp(InputName, 'MOTU 828 (Core Audio)'));
% [~, DevIndexiMicUSB] = max(strcmp(Name, 'iMic USB audio system (Core Audio)'));
% [~, DevIndexiMicUSB] = max(strcmp(InputName, 'Built-in Microph (Core Audio)')); % edit by NH
% DevID_MOTU=cell2mat({input(DevIndexMOTU).ID});
DevID_Mic=cell2mat({input(DevIndexInput).ID});

% handles.DevIDmic = DevID_Mic;

% check output
output = devinfo.output;
DevID_Out=cell2mat({output(handles.audioOutputMenu.Value).ID});

if handles.StartNewCalib == 0 & (handles.CalibSaved==1 || handles.LoadCalib ==1 || handles.LoadFile ==1)
    question = questdlg('Do you want to start a new calibration ?','User Input','Yes','No', 'No');
    if isequal(question, 'Yes')
        %display('step1')
        handles.StartNewCalib =1;
        set(handles.radiobuttonCalibRealTime, 'Value',1);
        %         set(handles.radiobuttonCalibAcuz, 'Value',0);
        %         set(handles.radiobuttonLoudSpeaker, 'Value', 0);
        %         set(handles.radiobuttonPipe, 'Value', 1);
        handles.NameCalib = '';
        handles.PathCalib = '';
        set(handles.text_PathCalib, 'String', handles.PathCalib);
        set(handles.text_NameCalib, 'String', handles.NameCalib);
        question2 = questdlg('Do you want to keep the current parameters ?','User Input','Keep Params','Load StandardParams', 'New Params', 'Keep Params');
        if isequal(question2, 'Keep Params')
            handles.CalibSaved =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            handles.LoadCalib =0;
            handles.DataAquired = 0;
            guidata(hObject, handles)
            
        elseif isequal(question2, 'Load StandardParams')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            LoadStandardParamAcuz(handles)
            pause(0.1)
            guidata(hObject, handles)
            UpdateInfosCalibrationChoosingSpeed(handles)
            myicon = imread('GreenCheck2.png');
            msg = msgbox('Your parameters have been updated and saved !', 'Success','custom', myicon);
            pause(1)
            close(msg)
            guidata(hObject, handles)
            
        elseif isequal(question2, 'New Params')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 0;
            handles.LoadFile = 0;
            handles.SavePath = '';
            handles.SaveName = '';
            set(handles.edit_SavePath,'String',handles.SavePath);
            set(handles.edit_SaveName,'String',handles.SaveName);
            set(handles.edit_LowestFrequency,'String','');
            set(handles.edit_HighestFrequency,'String','');
            set(handles.edit_ValTransducterSetUp,'String','');
            
            set(handles.pushbutton_StartCalibration,'Enable','off')
            
            guidata(hObject, handles)
        end
        axes(handles.Audio)
        plot(handles.Audio, [0 1], [0 0], 'w');
        hold(handles.Audio, 'off');
        
        axes(handles.Spectre)
        plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Spectre, 'off');
        
        axes(handles.Phase)
        plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Phase, 'off');
        
        axes(handles.Calibration)
        plot(handles.Calibration, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Calibration, 'off');
        xlabel(handles.Calibration, 'frequency [Hz]'); ylabel(handles.Calibration,'[dB]')
        
        axes(handles.InputCalibration)
        plot(handles.InputCalibration, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.InputCalibration, 'off');
        xlabel(handles.InputCalibration, 'frequency [Hz]'); ylabel(handles.InputCalibration,'[dB]')
        
        handles.DevIDoutput = DevID_Out;
        handles.DevIDmic = DevID_Mic;
        
        
        set(handles.pushbutton_FlattenCalibration,'Enable','off')
        set(handles.pushbutton_BeginRecord,'Enable','off')
        
    else % reset input to previous setting
        
        % ask user to load previous save file to reset device numbers
        [filename, pathname, filterindex] = uigetfile('*.mat',...
            'Select your previous calibration .mat file:');
        
        if filename == 0
            uiwait(msgbox('No file selected. Please start calibration again', 'errorbox', 'error'));

        else
            addpath(pwd)
            load(filename);
            set(hObject, 'Value', PARAMS.device_output_number);
            set(hObject, 'Value', PARAMS.device_number);
            
        end
        
    end
else

end
guidata(hObject, handles)


% --- Executes during object creation, after setting all properties.
function audioInputMenu_CreateFcn(hObject, eventdata, handles)
% hObject    handle to audioInputMenu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

devices = audiodevinfo;
for count = 1:max(size(devices.input))
    deviceCell{count} = devices.input(count).Name;
end

set(hObject, 'String', cellstr(deviceCell));


% --- Executes during object creation, after setting all properties.
function InputCalibration_CreateFcn(hObject, eventdata, handles)
% hObject    handle to InputCalibration (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: place code in OpeningFcn to populate InputCalibration


% --- Executes on selection change in audioOutputMenu.
function audioOutputMenu_Callback(hObject, eventdata, handles)
% hObject    handle to audioOutputMenu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns audioOutputMenu contents as cell array
%        contents{get(hObject,'Value')} returns selected item from audioOutputMenu

DevIndexOutput = get(hObject, 'Value');

devinfo = audiodevinfo;
% % output
output = devinfo.output;
% LInput = max(size(output));
% OutputName ={input(linspace(1,LInput,LInput)).Name};
% [~, DevIndexMOTUout] = max(strcmp(OutputName, 'MOTU 828 (Core Audio)'));
% % [~, DevIndexiMicUSBout] = max(strcmp(Name, 'iMic USB audio system (Core Audio)'));
% [~, DevIndexiMicUSBout] = max(strcmp(OutputName, 'Built-in Output (Core Audio)')); % edit by NH
% DevID_MOTUout=cell2mat({output(DevIndexMOTUout).ID});
% DevID_iMicUSBout=cell2mat({output(DevIndexiMicUSBout).ID});
DevID_Out =cell2mat({output(DevIndexOutput).ID});

% hObject.DevIDout = DevID_Out;

% check input
input = devinfo.input;
DevID_Mic=cell2mat({input(handles.audioInputMenu.Value).ID});




if handles.StartNewCalib == 0 & (handles.CalibSaved==1 || handles.LoadCalib ==1 || handles.LoadFile ==1)
    question = questdlg('Do you want to start a new calibration ?','User Input','Yes','No', 'No');
    if isequal(question, 'Yes')
        %display('step1')
        handles.StartNewCalib =1;
        set(handles.radiobuttonCalibRealTime, 'Value',1);
        %         set(handles.radiobuttonCalibAcuz, 'Value',0);
        %         set(handles.radiobuttonLoudSpeaker, 'Value', 0);
        %         set(handles.radiobuttonPipe, 'Value', 1);
        handles.NameCalib = '';
        handles.PathCalib = '';
        set(handles.text_PathCalib, 'String', handles.PathCalib);
        set(handles.text_NameCalib, 'String', handles.NameCalib);
        question2 = questdlg('Do you want to keep the current parameters ?','User Input','Keep Params','Load StandardParams', 'New Params', 'Keep Params');
        if isequal(question2, 'Keep Params')
            handles.CalibSaved =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            handles.LoadCalib =0;
            handles.DataAquired = 0;
            guidata(hObject, handles)
            
        elseif isequal(question2, 'Load StandardParams')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 1;
            handles.LoadFile = 0;
            LoadStandardParamAcuz(handles)
            pause(0.1)
            guidata(hObject, handles)
            UpdateInfosCalibrationChoosingSpeed(handles)
            myicon = imread('GreenCheck2.png');
            msg = msgbox('Your parameters have been updated and saved !', 'Success','custom', myicon);
            pause(1)
            close(msg)
            guidata(hObject, handles)
            
        elseif isequal(question2, 'New Params')
            handles.CalibSaved = 0;
            handles.LoadCalib =0;
            handles.ParamSaved = 0;
            handles.LoadFile = 0;
            handles.SavePath = '';
            handles.SaveName = '';
            set(handles.edit_SavePath,'String',handles.SavePath);
            set(handles.edit_SaveName,'String',handles.SaveName);
            set(handles.edit_LowestFrequency,'String','');
            set(handles.edit_HighestFrequency,'String','');
            set(handles.edit_ValTransducterSetUp,'String','');
            
            set(handles.pushbutton_StartCalibration,'Enable','off')
            
            guidata(hObject, handles)
        end
        axes(handles.Audio)
        plot(handles.Audio, [0 1], [0 0], 'w');
        hold(handles.Audio, 'off');
        
        axes(handles.Spectre)
        plot(handles.Spectre, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Spectre, 'off');
        
        axes(handles.Phase)
        plot(handles.Phase, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Phase, 'off');
        
        axes(handles.Calibration)
        plot(handles.Calibration, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.Calibration, 'off');
        xlabel(handles.Calibration, 'frequency [Hz]'); ylabel(handles.Calibration,'[dB]')
        
        axes(handles.InputCalibration)
        plot(handles.InputCalibration, [0 handles.FreqHi], [0 0], 'w');
        hold(handles.InputCalibration, 'off');
        xlabel(handles.InputCalibration, 'frequency [Hz]'); ylabel(handles.InputCalibration,'[dB]')
        
        handles.DevIDoutput = DevID_Out;
        handles.DevIDmic = DevID_Mic;
        
        %         set(handles.radiobuttonPipe, 'Value',0);
        %         set(handles.radiobuttonLoudSpeaker, 'Value',1);
        %         set(handles.PannelOutputType, 'UserData', 0);
        %         set(handles.radiobuttonCalibRealTime, 'Value',1);
        %         set(handles.radiobuttonCalibAcuz, 'Value',0);
        %         set(handles.PannelCalibType, 'UserData', 1);
        
        set(handles.pushbutton_FlattenCalibration,'Enable','off')
        set(handles.pushbutton_BeginRecord,'Enable','off')
        
    else % reset output to previous setting
        
        % ask user to load previous save file to reset device numbers
        [filename, pathname, filterindex] = uigetfile('*.mat',...
            'Select your previous calibration .mat file:');
        
        if filename == 0
            uiwait(msgbox('No file selected. Please start calibration again', 'errorbox', 'error'));

        else
            addpath(pwd)
            load(filename);
            set(hObject, 'Value', PARAMS.device_output_number)
            set(hObject, 'Value', PARAMS.device_number)
        end
        
        
        %         PARAMS.device_number = DevID_Mic;
        %     PARAMS.device_output_number = DevID_Out;
        
        
        %         if get(handles.PannelOutputType, 'UserData')==0
        %             handles.DevIDoutput = DevID_Out;
        %             handles.DevIDmic = DevID_Mic;
        %
        %             %display('step2')
        %             %             [~, DevIndex] = max(strcmp(OutputName, 'iMic USB audio system (Core Audio)'));
        % %             [~, DevIndexOut] = max(strcmp(OutputName, 'Built-in Output (Core Audio)'));
        % %             DevIDout=cell2mat({output(DevIndexOut).ID});
        % %             handles.DevIDoutput = DevIDout;
        % %             [~, DevIndex] = max(strcmp(InputName, 'Built-in Microph (Core Audio)'));
        % %             DevID=cell2mat({input(DevIndex).ID});
        % %             handles.DevIDmic = DevID;
        % %             set(handles.radiobuttonPipe, 'Value',0);
        % %             set(handles.radiobuttonLoudSpeaker, 'Value',1);
        %             set(handles.PannelOutputType, 'UserData', 0);
        %             set(handles.radiobuttonCalibRealTime, 'Value',1);
        %             set(handles.radiobuttonCalibAcuz, 'Value',0);
        %             set(handles.PannelCalibType, 'UserData', 1);
        % %         else
        % %             %display('step3')
        % %             [~, DevIndex] = max(strcmp(OutputName, 'MOTU 828 (Core Audio)'));
        % %             DevID=cell2mat({output(DevIndex).ID});
        % %             handles.DevIDoutput = DevID;
        % %             handles.DevIDmic = DevID;
        % %             set(handles.radiobuttonPipe, 'Value',1);
        % %             set(handles.radiobuttonLoudSpeaker, 'Value',0);
        % %             set(handles.PannelOutputType, 'UserData', 1);
        %         end
    end
else
%     if isequal(1,get(handles.radiobuttonCalibAcuz, 'Value'))==1
%         %         [~, DevIndex] = max(strcmp(OutputName, 'MOTU 828 (Core Audio)'));
%         %         DevID=cell2mat({output(DevIndex).ID});
%         %         handles.DevIDoutput = DevID;
%         %         handles.DevIDmic = DevID;
%         handles.DevIDoutput = DevID_Out;
%         handles.DevIDmic = DevID_Mic;
%         % set(handles.radiobuttonPipe, 'Value', 1);
%         %         set(handles.PannelOutputType, 'UserData', 1);
%         %         set(hObject, 'Value', 0);
%     else
%         %         [~, DevIndex] = max(strcmp(OutputName, 'iMic USB audio system (Core Audio)'));
%         %         DevID=cell2mat({output(DevIndex).ID});
%         %         handles.DevIDoutput = DevID;
%         %         handles.DevIDmic = DevID;
%         
%         handles.DevIDoutput = DevID_Out;
%         handles.DevIDmic = DevID_Mic;
%         
%         %         [~, DevIndexOut] = max(strcmp(OutputName, 'Built-in Output (Core Audio)'));
%         %         DevIDout=cell2mat({output(DevIndexOut).ID});
%         %         handles.DevIDoutput = DevIDout;
%         %         [~, DevIndex] = max(strcmp(InputName, 'Built-in Microph (Core Audio)'));
%         %         DevID=cell2mat({input(DevIndex).ID});
%         %         handles.DevIDmic = DevID;
%         
%         %         set(handles.radiobuttonPipe, 'Value', 0);
%         %         set(handles.PannelOutputType, 'UserData', 0);
%         %         set(hObject, 'Value', 1);
%     end
end
%display(['mic ID is: ', num2str(handles.DevIDmic)'])
guidata(hObject, handles)



% --- Executes during object creation, after setting all properties.
function audioOutputMenu_CreateFcn(hObject, eventdata, handles)
% hObject    handle to audioOutputMenu (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

devices = audiodevinfo;
for count = 1:max(size(devices.output))
    deviceCell{count} = devices.output(count).Name;
end

set(hObject, 'String', cellstr(deviceCell));
